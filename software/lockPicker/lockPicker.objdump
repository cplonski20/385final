
lockPicker.elf:     file format elf32-littlenios2
lockPicker.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00011ae4 memsz 0x00011ae4 flags r-x
    LOAD off    0x00012b04 vaddr 0x08011b04 paddr 0x080125c8 align 2**12
         filesz 0x00000ac4 memsz 0x00000ac4 flags rw-
    LOAD off    0x0001408c vaddr 0x0801308c paddr 0x0801308c align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000113ec  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004e8  0801161c  0801161c  0001261c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000ac4  08011b04  080125c8  00012b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  0801308c  0801308c  0001408c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000135c8  2**0
                  CONTENTS
  7 .sdram        00000000  080131e4  080131e4  000135c8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000135c8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ec0  00000000  00000000  000135f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023f6d  00000000  00000000  000144b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008fc6  00000000  00000000  0003841d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b857  00000000  00000000  000413e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000024c0  00000000  00000000  0004cc3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000040d6  00000000  00000000  0004f0fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001908e  00000000  00000000  000531d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006c260  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001ba0  00000000  00000000  0006c2a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000713d6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000713d9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000713e5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000713e6  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000713e7  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000713eb  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000713ef  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  000713f3  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  000713f7  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  000713fb  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  000713ff  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000038  00000000  00000000  00071407  2**0
                  CONTENTS, READONLY
 30 .jdi          00004e52  00000000  00000000  0007143f  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00069a97  00000000  00000000  00076291  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
0801161c l    d  .rodata	00000000 .rodata
08011b04 l    d  .rwdata	00000000 .rwdata
0801308c l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
080131e4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lockPicker_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 sgtl5000.c
00000000 l    df *ABS*	00000000 sgtl5000_test.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08011946 l     O .rodata	00000010 zeroes.4404
080037ac l     F .text	000000bc __sbprintf
08011956 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
080039bc l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08005514 l     F .text	00000008 __fp_unlock
08005528 l     F .text	0000019c __sinit.part.1
080056c4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08011b04 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
08011f48 l     O .rwdata	00000020 lc_ctype_charset
08011f28 l     O .rwdata	00000020 lc_message_charset
08011f68 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08011988 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08008b98 l     F .text	000000fc __sprint_r.part.0
08011aac l     O .rodata	00000010 zeroes.4349
0800a1d4 l     F .text	000000bc __sbprintf
08011abc l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0800e190 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800e2a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800e2d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800e3c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800e4ac l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800e598 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800e758 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
080125b8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800e9cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08012550 l     O .rwdata	00000038 i2c_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0800eb78 l     F .text	00000110 optional_irq_callback
0800ecd8 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08010908 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
080130b8 g     O .bss	00000004 alt_instruction_exception_handler
080081dc g     F .text	00000074 _mprec_log10
080082c8 g     F .text	0000008c __any_on
0800a788 g     F .text	00000054 _isatty_r
08011994 g     O .rodata	00000028 __mprec_tinytens
0800e6b0 g     F .text	00000060 alt_main
08001348 g     F .text	000000c0 _puts_r
080130e4 g     O .bss	00000100 alt_irq
0800a7dc g     F .text	00000060 _lseek_r
080125c8 g       *ABS*	00000000 __flash_rwdata_start
0800cbcc g     F .text	00000088 .hidden __eqdf2
080131e4 g       *ABS*	00000000 __alt_heap_start
0800130c g     F .text	0000003c printf
0800a9f4 g     F .text	0000009c _wcrtomb_r
08008a58 g     F .text	0000005c __sseek
08005874 g     F .text	00000010 __sinit
0800a89c g     F .text	00000140 __swbuf_r
08006348 g     F .text	0000007c _setlocale_r
080056cc g     F .text	00000078 __sfmoreglue
0800f3d0 g     F .text	000000a8 alt_avalon_i2c_rx_read
0800e734 g     F .text	00000024 __malloc_unlock
080105e8 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
0800f154 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
08007018 g     F .text	0000015c memmove
0800585c g     F .text	00000018 _cleanup
0800fe38 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
0800729c g     F .text	000000a8 _Balloc
080010f0 g     F .text	00000070 .hidden __fixsfsi
0800cc54 g     F .text	000000dc .hidden __gtdf2
08011060 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800a72c g     F .text	0000005c _fstat_r
080130a4 g     O .bss	00000004 errno
080089d4 g     F .text	00000008 __seofread
080130ac g     O .bss	00000004 alt_argv
0801a588 g       *ABS*	00000000 _gp
0801062c g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
08000c0c g     F .text	000004e4 .hidden __subsf3
0800f2e4 g     F .text	00000044 alt_avalon_i2c_is_busy
080123d0 g     O .rwdata	00000180 alt_fd_list
0800f088 g     F .text	000000cc alt_avalon_i2c_master_config_set
08010aa8 g     F .text	00000090 alt_find_dev
08006ed0 g     F .text	00000148 memcpy
0800551c g     F .text	0000000c _cleanup_r
0800e00c g     F .text	000000dc .hidden __floatsidf
0800cd30 g     F .text	000000f4 .hidden __ltdf2
0801161c g       *ABS*	00000000 __DTOR_END__
0800fc78 g     F .text	000001c0 alt_avalon_i2c_master_transmit
08001408 g     F .text	00000014 puts
08011084 g     F .text	0000009c alt_exception_cause_generated_bad_addr
080088b8 g     F .text	00000074 __fpclassifyd
08008138 g     F .text	000000a4 __ratio
0800a1b8 g     F .text	0000001c __vfiprintf_internal
080012dc g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0800b894 g     F .text	00000064 .hidden __udivsi3
0800e400 g     F .text	000000ac isatty
080119e4 g     O .rodata	000000c8 __mprec_tens
080063c4 g     F .text	0000000c __locale_charset
0800eef4 g     F .text	00000098 alt_avalon_i2c_enable
080130a0 g     O .bss	00000004 __malloc_top_pad
0801051c g     F .text	00000068 alt_avalon_i2c_int_disable
08012590 g     O .rwdata	00000004 __mb_cur_max
080063f4 g     F .text	0000000c _localeconv_r
080076d0 g     F .text	0000003c __i2b
08005cf8 g     F .text	000004c8 __sfvwrite_r
0800892c g     F .text	00000054 _sbrk_r
0800a83c g     F .text	00000060 _read_r
0800026c g     F .text	000000b4 SGTL5000_Reg_Rd
080125b0 g     O .rwdata	00000004 alt_max_fd
0800a420 g     F .text	000000f0 _fclose_r
080054e4 g     F .text	00000030 fflush
0801309c g     O .bss	00000004 __malloc_max_sbrked_mem
08010044 g     F .text	00000210 alt_avalon_i2c_master_receive
0800b950 g     F .text	000008ac .hidden __adddf3
08007ee0 g     F .text	0000010c __b2d
0800b1d8 g     F .text	000005c4 .hidden __umoddi3
0800e5d4 g     F .text	000000dc lseek
08010584 g     F .text	00000064 alt_avalon_i2c_int_enable
08012588 g     O .rwdata	00000004 _global_impure_ptr
08008354 g     F .text	00000564 _realloc_r
080131e4 g       *ABS*	00000000 __bss_end
08010d08 g     F .text	000000f0 alt_iic_isr_register
0800abdc g     F .text	000005fc .hidden __udivdi3
08010444 g     F .text	00000058 alt_avalon_i2c_int_status_get
0800a688 g     F .text	00000024 _fputwc_r
080119bc g     O .rodata	00000028 __mprec_bigtens
080074b4 g     F .text	00000104 __s2b
0800e0e8 g     F .text	000000a8 .hidden __floatunsidf
08007c20 g     F .text	00000060 __mcmp
08005894 g     F .text	00000018 __fp_lock_all
08010cbc g     F .text	0000004c alt_ic_irq_enabled
0800ed74 g     F .text	00000054 alt_avalon_i2c_register_callback
080130b4 g     O .bss	00000004 alt_irq_active
0800edc8 g     F .text	000000ec alt_avalon_i2c_init
080000fc g     F .exceptions	000000d4 alt_irq_handler
080123a8 g     O .rwdata	00000028 alt_dev_null
080108e8 g     F .text	00000020 alt_dcache_flush_all
080075b8 g     F .text	00000068 __hi0bits
0800df8c g     F .text	00000080 .hidden __fixdfsi
080125c8 g       *ABS*	00000000 __ram_rwdata_end
080125a8 g     O .rwdata	00000008 alt_dev_list
0800ea08 g     F .text	00000100 write
080111e8 g     F .text	000000a0 _putc_r
0800f704 g     F .text	0000004c alt_avalon_i2c_check_arblost
08000720 g     F .text	000000bc .hidden __gtsf2
080104e0 g     F .text	0000003c alt_avalon_i2c_int_clear
08011b04 g       *ABS*	00000000 __ram_rodata_end
0800e30c g     F .text	000000b8 fstat
0800cd30 g     F .text	000000f4 .hidden __ledf2
080125bc g     O .rwdata	00000008 alt_avalon_i2c_list
08007998 g     F .text	00000140 __pow5mult
08008cac g     F .text	0000150c ___vfiprintf_internal_r
08013094 g     O .bss	00000004 __nlocale_changed
0800b8f8 g     F .text	00000058 .hidden __umodsi3
080131e4 g       *ABS*	00000000 end
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0800eeb4 g     F .text	00000040 alt_avalon_i2c_open
0801161c g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800f88c g     F .text	000000e8 alt_avalon_i2c_master_tx
08001250 g     F .text	00000064 .hidden __clzsi2
08005884 g     F .text	00000004 __sfp_lock_acquire
08006dec g     F .text	000000e4 memchr
080014b4 g     F .text	000022dc ___vfprintf_internal_r
080059e8 g     F .text	00000310 _free_r
08010df8 g     F .text	0000022c alt_printf
080063d0 g     F .text	00000010 __locale_mb_cur_max
08011468 g     F .text	00000180 __call_exitprocs
08013090 g     O .bss	00000004 __mlocale_changed
0800ec88 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
08012594 g     O .rwdata	00000004 __malloc_sbrk_base
08000230 g     F .text	0000003c _start
08010254 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
08010678 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
08007ad8 g     F .text	00000148 __lshift
0800e794 g     F .text	00000104 read
0800eb40 g     F .text	00000038 alt_sys_init
08011350 g     F .text	00000118 __register_exitproc
0800fab0 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
0800770c g     F .text	0000028c __multiply
080012b4 g     F .text	00000028 .hidden __mulsi3
08011b04 g       *ABS*	00000000 __ram_rwdata_start
0801161c g       *ABS*	00000000 __ram_rodata_start
080130bc g     O .bss	00000028 __malloc_current_mallinfo
08007fec g     F .text	0000014c __d2b
08010790 g     F .text	00000158 alt_busy_sleep
0800a2f0 g     F .text	00000054 _close_r
0801116c g     F .text	0000007c memcmp
0800f328 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
080131e4 g       *ABS*	00000000 __alt_stack_base
08003868 g     F .text	00000154 __swsetup_r
0800c1fc g     F .text	000009d0 .hidden __divdf3
08005744 g     F .text	00000118 __sfp
08008250 g     F .text	00000078 __copybits
08011fa0 g     O .rwdata	00000408 __malloc_av_
08005890 g     F .text	00000004 __sinit_lock_release
0800ce24 g     F .text	0000086c .hidden __muldf3
08008980 g     F .text	00000054 __sread
08010944 g     F .text	000000a4 alt_dev_llist_insert
0800e710 g     F .text	00000024 __malloc_lock
0800e91c g     F .text	000000b0 sbrk
0800f750 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
0800f6b8 g     F .text	0000004c alt_avalon_i2c_check_nack
08005488 g     F .text	0000005c _fflush_r
0800a344 g     F .text	000000dc _calloc_r
0801308c g       *ABS*	00000000 __bss_start
08007174 g     F .text	00000128 memset
080003c0 g     F .text	00000300 main
0800f684 g     F .text	00000034 alt_avalon_i2c_master_target_set
080130b0 g     O .bss	00000004 alt_envp
08013098 g     O .bss	00000004 __malloc_max_total_mem
0800a9dc g     F .text	00000018 __swbuf
0801049c g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
08008ab4 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
0800a510 g     F .text	00000014 fclose
08003be4 g     F .text	00001688 _dtoa_r
080065e0 g     F .text	0000080c _malloc_r
0800ab50 g     F .text	00000030 __ascii_wctomb
080125b4 g     O .rwdata	00000004 alt_errno
080061c0 g     F .text	000000c4 _fwalk
08011288 g     F .text	000000c8 putc
0800b79c g     F .text	00000084 .hidden __divsi3
080058c4 g     F .text	00000124 _malloc_trim_r
0801161c g       *ABS*	00000000 __CTOR_END__
080007dc g     F .text	00000430 .hidden __mulsf3
08008abc g     F .text	000000dc strcmp
0801161c g       *ABS*	00000000 __flash_rodata_start
0801161c g       *ABS*	00000000 __DTOR_LIST__
08000320 g     F .text	000000a0 SGTL5000_Reg_Wr
0800cbcc g     F .text	00000088 .hidden __nedf2
0800eb08 g     F .text	00000038 alt_irq_init
0800e898 g     F .text	00000084 alt_release_fd
08011800 g     O .rodata	00000100 .hidden __clz_tab
0801308c g     O .bss	00000004 _PathLocale
08011120 g     F .text	00000014 atexit
08000720 g     F .text	000000bc .hidden __gesf2
0800a290 g     F .text	00000060 _write_r
08006400 g     F .text	00000018 setlocale
0801258c g     O .rwdata	00000004 _impure_ptr
080130a8 g     O .bss	00000004 alt_argc
0800526c g     F .text	0000021c __sflush_r
08010a48 g     F .text	00000060 _do_dtors
080063ec g     F .text	00000008 __locale_cjk_lang
0800f64c g     F .text	00000038 alt_avalon_i2c_master_target_get
0800f55c g     F .text	000000f0 alt_avalon_i2c_send_address
08000020 g       .exceptions	00000000 alt_irq_entry
08007e7c g     F .text	00000064 __ulp
080058ac g     F .text	00000018 __fp_unlock_all
080125a0 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08006418 g     F .text	0000000c localeconv
08010728 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
08010b58 g     F .text	00000050 alt_ic_isr_register
0800ef8c g     F .text	0000004c alt_avalon_i2c_disable
080125c8 g       *ABS*	00000000 _edata
080131e4 g       *ABS*	00000000 _end
0800a524 g     F .text	00000164 __fputwc
08000230 g       *ABS*	00000000 __ram_exceptions_end
0800efd8 g     F .text	000000b0 alt_avalon_i2c_master_config_get
08010c30 g     F .text	0000008c alt_ic_irq_disable
080089dc g     F .text	0000007c __swrite
08012598 g     O .rwdata	00000004 __malloc_trim_threshold
080063e0 g     F .text	0000000c __locale_msgcharset
08011134 g     F .text	00000038 exit
08006284 g     F .text	000000c4 _fwalk_reent
08001160 g     F .text	000000f0 .hidden __floatunsisf
08007c80 g     F .text	000001fc __mdiff
0800b820 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08005888 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800f1e8 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
0800f478 g     F .text	000000e4 alt_avalon_i2c_cmd_write
080006c0 g     F .text	00000060 .hidden __fixunssfsi
080115e8 g     F .text	00000034 _exit
08006424 g     F .text	000001bc __smakebuf_r
0800141c g     F .text	00000098 strlen
0800cc54 g     F .text	000000dc .hidden __gedf2
08011024 g     F .text	0000003c alt_putchar
0801259c g     O .rwdata	00000004 __wctomb
08008c94 g     F .text	00000018 __sprint_r
08010b38 g     F .text	00000020 alt_icache_flush_all
080125c4 g     O .rwdata	00000004 alt_priority_mask
08010ba8 g     F .text	00000088 alt_ic_irq_enable
08003790 g     F .text	0000001c __vfprintf_internal
0800ab80 g     F .text	0000005c _wctomb_r
0800d690 g     F .text	000008fc .hidden __subdf3
08007620 g     F .text	000000b0 __lo0bits
080109e8 g     F .text	00000060 _do_ctors
0800aa90 g     F .text	000000c0 wcrtomb
0800e1cc g     F .text	000000d8 close
080106dc g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0800e514 g     F .text	00000084 alt_load
0800f974 g     F .text	0000013c alt_avalon_i2c_master_rx
0800a6ac g     F .text	00000080 fputwc
0800588c g     F .text	00000004 __sinit_lock_acquire
0800736c g     F .text	00000148 __multadd
08007344 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408c14 	ori	at,at,560
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	108c3904 	addi	r2,r2,12516
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	108c3904 	addi	r2,r2,12516
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a2cc17 	ldw	r2,-29904(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a2cc17 	ldw	r2,-29904(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	e1bffe17 	ldw	r6,-8(fp)
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	1809883a 	mov	r4,r3
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 800023c:	d6a96214 	ori	gp,gp,42376
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000244:	108c2314 	ori	r2,r2,12428

    movhi r3, %hi(__bss_end)
 8000248:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 800024c:	18cc7914 	ori	r3,r3,12772

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	800e5140 	call	800e514 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	800e6b00 	call	800e6b0 <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <__alt_data_end+0xfc000268>

0800026c <SGTL5000_Reg_Rd>:
#include "sgtl5000.h"
#include "altera_avalon_i2c.h"
#include "altera_avalon_i2c_regs.h"

WORD SGTL5000_Reg_Rd (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR)
{
 800026c:	defff804 	addi	sp,sp,-32
 8000270:	dfc00715 	stw	ra,28(sp)
 8000274:	df000615 	stw	fp,24(sp)
 8000278:	df000604 	addi	fp,sp,24
 800027c:	e13ffe15 	stw	r4,-8(fp)
 8000280:	2805883a 	mov	r2,r5
 8000284:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[2];
	WORD value;
	buffer[0] = (ADDR & 0xFF00) >> 8;
 8000288:	e0bfff0b 	ldhu	r2,-4(fp)
 800028c:	1004d23a 	srli	r2,r2,8
 8000290:	e0bffd85 	stb	r2,-10(fp)
	buffer[1] = (ADDR & 0x00FF);
 8000294:	e0bfff0b 	ldhu	r2,-4(fp)
 8000298:	e0bffdc5 	stb	r2,-9(fp)

	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx_rx(dev,buffer,2,buffer,2,0);
 800029c:	e13ffd84 	addi	r4,fp,-10
 80002a0:	e0fffd84 	addi	r3,fp,-10
 80002a4:	d8000115 	stw	zero,4(sp)
 80002a8:	00800084 	movi	r2,2
 80002ac:	d8800015 	stw	r2,0(sp)
 80002b0:	200f883a 	mov	r7,r4
 80002b4:	01800084 	movi	r6,2
 80002b8:	180b883a 	mov	r5,r3
 80002bc:	e13ffe17 	ldw	r4,-8(fp)
 80002c0:	800fab00 	call	800fab0 <alt_avalon_i2c_master_tx_rx>
 80002c4:	e0bffc15 	stw	r2,-16(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 80002c8:	e0bffc17 	ldw	r2,-16(fp)
 80002cc:	10000626 	beq	r2,zero,80002e8 <SGTL5000_Reg_Rd+0x7c>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 80002d0:	e0bfff0b 	ldhu	r2,-4(fp)
 80002d4:	100b883a 	mov	r5,r2
 80002d8:	01020074 	movhi	r4,2049
 80002dc:	21058704 	addi	r4,r4,5660
 80002e0:	800130c0 	call	800130c <printf>
		while (1)
		{
			//hang here
		}
 80002e4:	003fff06 	br	80002e4 <__alt_data_end+0xfc0002e4>
	}
	value = (buffer[0] << 8) | buffer[1];
 80002e8:	e0bffd83 	ldbu	r2,-10(fp)
 80002ec:	10803fcc 	andi	r2,r2,255
 80002f0:	1004923a 	slli	r2,r2,8
 80002f4:	1007883a 	mov	r3,r2
 80002f8:	e0bffdc3 	ldbu	r2,-9(fp)
 80002fc:	10803fcc 	andi	r2,r2,255
 8000300:	1884b03a 	or	r2,r3,r2
 8000304:	e0bffd0d 	sth	r2,-12(fp)
	return value;
 8000308:	e0bffd0b 	ldhu	r2,-12(fp)
}
 800030c:	e037883a 	mov	sp,fp
 8000310:	dfc00117 	ldw	ra,4(sp)
 8000314:	df000017 	ldw	fp,0(sp)
 8000318:	dec00204 	addi	sp,sp,8
 800031c:	f800283a 	ret

08000320 <SGTL5000_Reg_Wr>:

WORD SGTL5000_Reg_Wr (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR, WORD DATA)
{
 8000320:	defff904 	addi	sp,sp,-28
 8000324:	dfc00615 	stw	ra,24(sp)
 8000328:	df000515 	stw	fp,20(sp)
 800032c:	df000504 	addi	fp,sp,20
 8000330:	e13ffd15 	stw	r4,-12(fp)
 8000334:	2807883a 	mov	r3,r5
 8000338:	3005883a 	mov	r2,r6
 800033c:	e0fffe0d 	sth	r3,-8(fp)
 8000340:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[4];
	buffer[0] = (ADDR & 0xFF00) >> 8;
 8000344:	e0bffe0b 	ldhu	r2,-8(fp)
 8000348:	1004d23a 	srli	r2,r2,8
 800034c:	e0bffc05 	stb	r2,-16(fp)
	buffer[1] = (ADDR & 0x00FF);
 8000350:	e0bffe0b 	ldhu	r2,-8(fp)
 8000354:	e0bffc45 	stb	r2,-15(fp)
	buffer[2] = (DATA & 0xFF00) >> 8;
 8000358:	e0bfff0b 	ldhu	r2,-4(fp)
 800035c:	1004d23a 	srli	r2,r2,8
 8000360:	e0bffc85 	stb	r2,-14(fp)
	buffer[3] = (DATA & 0x00FF);
 8000364:	e0bfff0b 	ldhu	r2,-4(fp)
 8000368:	e0bffcc5 	stb	r2,-13(fp)


	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx(dev,buffer,4,0);
 800036c:	e0bffc04 	addi	r2,fp,-16
 8000370:	000f883a 	mov	r7,zero
 8000374:	01800104 	movi	r6,4
 8000378:	100b883a 	mov	r5,r2
 800037c:	e13ffd17 	ldw	r4,-12(fp)
 8000380:	800f88c0 	call	800f88c <alt_avalon_i2c_master_tx>
 8000384:	e0bffb15 	stw	r2,-20(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 8000388:	e0bffb17 	ldw	r2,-20(fp)
 800038c:	10000626 	beq	r2,zero,80003a8 <SGTL5000_Reg_Wr+0x88>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 8000390:	e0bffe0b 	ldhu	r2,-8(fp)
 8000394:	100b883a 	mov	r5,r2
 8000398:	01020074 	movhi	r4,2049
 800039c:	21058704 	addi	r4,r4,5660
 80003a0:	800130c0 	call	800130c <printf>
		while (1)
		{
			//hang here
		}
 80003a4:	003fff06 	br	80003a4 <__alt_data_end+0xfc0003a4>
	}
	return DATA;
 80003a8:	e0bfff0b 	ldhu	r2,-4(fp)
}
 80003ac:	e037883a 	mov	sp,fp
 80003b0:	dfc00117 	ldw	ra,4(sp)
 80003b4:	df000017 	ldw	fp,0(sp)
 80003b8:	dec00204 	addi	sp,sp,8
 80003bc:	f800283a 	ret

080003c0 <main>:
#include "sgtl5000.h"



int main()
{
 80003c0:	defffc04 	addi	sp,sp,-16
 80003c4:	dfc00315 	stw	ra,12(sp)
 80003c8:	df000215 	stw	fp,8(sp)
 80003cc:	df000204 	addi	fp,sp,8
	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure
	//get a pointer to the Avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0"); //this has to reflect Platform Designer name
 80003d0:	01020074 	movhi	r4,2049
 80003d4:	21058f04 	addi	r4,r4,5692
 80003d8:	800eeb40 	call	800eeb4 <alt_avalon_i2c_open>
 80003dc:	e0bffe15 	stw	r2,-8(fp)
	if (NULL==i2c_dev)						     //check the BSP if unsure
 80003e0:	e0bffe17 	ldw	r2,-8(fp)
 80003e4:	1000051e 	bne	r2,zero,80003fc <main+0x3c>
	{
		printf("Error: Cannot find /dev/i2c_0\n");
 80003e8:	01020074 	movhi	r4,2049
 80003ec:	21059204 	addi	r4,r4,5704
 80003f0:	80014080 	call	8001408 <puts>
		return 1;
 80003f4:	00800044 	movi	r2,1
 80003f8:	0000ac06 	br	80006ac <main+0x2ec>
	}
	printf ("I2C Test Program\n");
 80003fc:	01020074 	movhi	r4,2049
 8000400:	21059a04 	addi	r4,r4,5736
 8000404:	80014080 	call	8001408 <puts>

	alt_avalon_i2c_master_target_set(i2c_dev,0xA); //CODEC at address 0b0001010
 8000408:	01400284 	movi	r5,10
 800040c:	e13ffe17 	ldw	r4,-8(fp)
 8000410:	800f6840 	call	800f684 <alt_avalon_i2c_master_target_set>
	//print device ID (verify I2C is working)
	printf( "Device ID register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ID));
 8000414:	000b883a 	mov	r5,zero
 8000418:	e13ffe17 	ldw	r4,-8(fp)
 800041c:	800026c0 	call	800026c <SGTL5000_Reg_Rd>
 8000420:	10bfffcc 	andi	r2,r2,65535
 8000424:	100b883a 	mov	r5,r2
 8000428:	01020074 	movhi	r4,2049
 800042c:	21059f04 	addi	r4,r4,5756
 8000430:	800130c0 	call	800130c <printf>

	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
 8000434:	00800384 	movi	r2,14
 8000438:	e0bfff05 	stb	r2,-4(fp)
	WORD frac_divisor = (WORD)(((180633600.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
 800043c:	e0bfff03 	ldbu	r2,-4(fp)
 8000440:	1009883a 	mov	r4,r2
 8000444:	80011600 	call	8001160 <__floatunsisf>
 8000448:	1007883a 	mov	r3,r2
 800044c:	180b883a 	mov	r5,r3
 8000450:	011059f4 	movhi	r4,16743
 8000454:	210d8144 	addi	r4,r4,13829
 8000458:	8000c0c0 	call	8000c0c <__subsf3>
 800045c:	1007883a 	mov	r3,r2
 8000460:	1805883a 	mov	r2,r3
 8000464:	01514034 	movhi	r5,17664
 8000468:	1009883a 	mov	r4,r2
 800046c:	80007dc0 	call	80007dc <__mulsf3>
 8000470:	1007883a 	mov	r3,r2
 8000474:	1805883a 	mov	r2,r3
 8000478:	1009883a 	mov	r4,r2
 800047c:	80006c00 	call	80006c0 <__fixunssfsi>
 8000480:	e0bfff8d 	sth	r2,-2(fp)
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
 8000484:	e0bfff03 	ldbu	r2,-4(fp)
 8000488:	e0ffff8b 	ldhu	r3,-2(fp)
 800048c:	180d883a 	mov	r6,r3
 8000490:	100b883a 	mov	r5,r2
 8000494:	01020074 	movhi	r4,2049
 8000498:	2105a504 	addi	r4,r4,5780
 800049c:	800130c0 	call	800130c <printf>
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
 80004a0:	e0bfff03 	ldbu	r2,-4(fp)
 80004a4:	100492fa 	slli	r2,r2,11
	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
	WORD frac_divisor = (WORD)(((180633600.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
 80004a8:	1007883a 	mov	r3,r2
 80004ac:	e0bfff8b 	ldhu	r2,-2(fp)
 80004b0:	1884b03a 	or	r2,r3,r2
 80004b4:	10bfffcc 	andi	r2,r2,65535
 80004b8:	100d883a 	mov	r6,r2
 80004bc:	01400c84 	movi	r5,50
 80004c0:	e13ffe17 	ldw	r4,-8(fp)
 80004c4:	80003200 	call	8000320 <SGTL5000_Reg_Wr>
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
				frac_divisor << SGTL5000_PLL_FRAC_DIV_SHIFT);
	printf( "CHIP_PLL_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PLL_CTRL));
 80004c8:	01400c84 	movi	r5,50
 80004cc:	e13ffe17 	ldw	r4,-8(fp)
 80004d0:	800026c0 	call	800026c <SGTL5000_Reg_Rd>
 80004d4:	10bfffcc 	andi	r2,r2,65535
 80004d8:	100b883a 	mov	r5,r2
 80004dc:	01020074 	movhi	r4,2049
 80004e0:	2105b604 	addi	r4,r4,5848
 80004e4:	800130c0 	call	800130c <printf>

	//configure power control, disable internal VDDD, VDDIO=3.3V, VDDA=VDDD=1.8V (ext)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_POWER, \
 80004e8:	01917f84 	movi	r6,17918
 80004ec:	01400c04 	movi	r5,48
 80004f0:	e13ffe17 	ldw	r4,-8(fp)
 80004f4:	80003200 	call	8000320 <SGTL5000_Reg_Wr>
			SGTL5000_REFTOP_POWERUP|
			SGTL5000_HP_POWERUP|
			SGTL5000_DAC_POWERUP|
			SGTL5000_CAPLESS_HP_POWERUP|
			SGTL5000_ADC_POWERUP);
	printf( "CHIP_ANA_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_POWER));
 80004f8:	01400c04 	movi	r5,48
 80004fc:	e13ffe17 	ldw	r4,-8(fp)
 8000500:	800026c0 	call	800026c <SGTL5000_Reg_Rd>
 8000504:	10bfffcc 	andi	r2,r2,65535
 8000508:	100b883a 	mov	r5,r2
 800050c:	01020074 	movhi	r4,2049
 8000510:	2105bd04 	addi	r4,r4,5876
 8000514:	800130c0 	call	800130c <printf>

	//select internal ground bias to .9V (1.8V/2)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_REF_CTRL, 0x004E);
 8000518:	01801384 	movi	r6,78
 800051c:	01400a04 	movi	r5,40
 8000520:	e13ffe17 	ldw	r4,-8(fp)
 8000524:	80003200 	call	8000320 <SGTL5000_Reg_Wr>
	printf( "CHIP_REF_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_REF_CTRL));
 8000528:	01400a04 	movi	r5,40
 800052c:	e13ffe17 	ldw	r4,-8(fp)
 8000530:	800026c0 	call	800026c <SGTL5000_Reg_Rd>
 8000534:	10bfffcc 	andi	r2,r2,65535
 8000538:	100b883a 	mov	r5,r2
 800053c:	01020074 	movhi	r4,2049
 8000540:	2105c504 	addi	r4,r4,5908
 8000544:	800130c0 	call	800130c <printf>

	//enable core modules
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_DIG_POWER,\
 8000548:	018018c4 	movi	r6,99
 800054c:	01400084 	movi	r5,2
 8000550:	e13ffe17 	ldw	r4,-8(fp)
 8000554:	80003200 	call	8000320 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_EN|
			SGTL5000_DAC_EN|
			//SGTL5000_DAP_POWERUP| //disable digital audio processor in CODEC
			SGTL5000_I2S_OUT_POWERUP|
			SGTL5000_I2S_IN_POWERUP);
	printf( "CHIP_DIG_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_DIG_POWER));
 8000558:	01400084 	movi	r5,2
 800055c:	e13ffe17 	ldw	r4,-8(fp)
 8000560:	800026c0 	call	800026c <SGTL5000_Reg_Rd>
 8000564:	10bfffcc 	andi	r2,r2,65535
 8000568:	100b883a 	mov	r5,r2
 800056c:	01020074 	movhi	r4,2049
 8000570:	2105cc04 	addi	r4,r4,5936
 8000574:	800130c0 	call	800130c <printf>


	//MCLK is 12.5 MHz, configure clocks to use PLL
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_CLK_CTRL, \
 8000578:	018001c4 	movi	r6,7
 800057c:	01400104 	movi	r5,4
 8000580:	e13ffe17 	ldw	r4,-8(fp)
 8000584:	80003200 	call	8000320 <SGTL5000_Reg_Wr>
			SGTL5000_SYS_FS_44_1k << SGTL5000_SYS_FS_SHIFT |
			SGTL5000_MCLK_FREQ_PLL << SGTL5000_MCLK_FREQ_SHIFT);
	printf( "CHIP_CLK_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_CLK_CTRL));
 8000588:	01400104 	movi	r5,4
 800058c:	e13ffe17 	ldw	r4,-8(fp)
 8000590:	800026c0 	call	800026c <SGTL5000_Reg_Rd>
 8000594:	10bfffcc 	andi	r2,r2,65535
 8000598:	100b883a 	mov	r5,r2
 800059c:	01020074 	movhi	r4,2049
 80005a0:	2105d404 	addi	r4,r4,5968
 80005a4:	800130c0 	call	800130c <printf>

	//Set as I2S master
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_I2S_CTRL, SGTL5000_I2S_MASTER);
 80005a8:	01802004 	movi	r6,128
 80005ac:	01400184 	movi	r5,6
 80005b0:	e13ffe17 	ldw	r4,-8(fp)
 80005b4:	80003200 	call	8000320 <SGTL5000_Reg_Wr>
	printf( "CHIP_I2S_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_I2S_CTRL));
 80005b8:	01400184 	movi	r5,6
 80005bc:	e13ffe17 	ldw	r4,-8(fp)
 80005c0:	800026c0 	call	800026c <SGTL5000_Reg_Rd>
 80005c4:	10bfffcc 	andi	r2,r2,65535
 80005c8:	100b883a 	mov	r5,r2
 80005cc:	01020074 	movhi	r4,2049
 80005d0:	2105db04 	addi	r4,r4,5996
 80005d4:	800130c0 	call	800130c <printf>

	//ADC input from Line
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_CTRL, \
 80005d8:	01800104 	movi	r6,4
 80005dc:	01400904 	movi	r5,36
 80005e0:	e13ffe17 	ldw	r4,-8(fp)
 80005e4:	80003200 	call	8000320 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_SEL_LINE_IN << SGTL5000_ADC_SEL_SHIFT);
	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 80005e8:	01400904 	movi	r5,36
 80005ec:	e13ffe17 	ldw	r4,-8(fp)
 80005f0:	800026c0 	call	800026c <SGTL5000_Reg_Rd>
 80005f4:	10bfffcc 	andi	r2,r2,65535
 80005f8:	100b883a 	mov	r5,r2
 80005fc:	01020074 	movhi	r4,2049
 8000600:	2105e204 	addi	r4,r4,6024
 8000604:	800130c0 	call	800130c <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_SSS_CTRL, \
 8000608:	01800404 	movi	r6,16
 800060c:	01400284 	movi	r5,10
 8000610:	e13ffe17 	ldw	r4,-8(fp)
 8000614:	80003200 	call	8000320 <SGTL5000_Reg_Wr>
			SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT |
			SGTL5000_I2S_OUT_SEL_ADC << SGTL5000_I2S_OUT_SEL_SHIFT);
	printf( "CHIP_SSS_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_SSS_CTRL));
 8000618:	01400284 	movi	r5,10
 800061c:	e13ffe17 	ldw	r4,-8(fp)
 8000620:	800026c0 	call	800026c <SGTL5000_Reg_Rd>
 8000624:	10bfffcc 	andi	r2,r2,65535
 8000628:	100b883a 	mov	r5,r2
 800062c:	01020074 	movhi	r4,2049
 8000630:	2105e904 	addi	r4,r4,6052
 8000634:	800130c0 	call	800130c <printf>

	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 8000638:	01400904 	movi	r5,36
 800063c:	e13ffe17 	ldw	r4,-8(fp)
 8000640:	800026c0 	call	800026c <SGTL5000_Reg_Rd>
 8000644:	10bfffcc 	andi	r2,r2,65535
 8000648:	100b883a 	mov	r5,r2
 800064c:	01020074 	movhi	r4,2049
 8000650:	2105e204 	addi	r4,r4,6024
 8000654:	800130c0 	call	800130c <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);
 8000658:	000d883a 	mov	r6,zero
 800065c:	01400384 	movi	r5,14
 8000660:	e13ffe17 	ldw	r4,-8(fp)
 8000664:	80003200 	call	8000320 <SGTL5000_Reg_Wr>
	printf( "CHIP_ADCDAC_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL));
 8000668:	01400384 	movi	r5,14
 800066c:	e13ffe17 	ldw	r4,-8(fp)
 8000670:	800026c0 	call	800026c <SGTL5000_Reg_Rd>
 8000674:	10bfffcc 	andi	r2,r2,65535
 8000678:	100b883a 	mov	r5,r2
 800067c:	01020074 	movhi	r4,2049
 8000680:	2105f004 	addi	r4,r4,6080
 8000684:	800130c0 	call	800130c <printf>
	printf( "CHIP_PAD_STRENGTH register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PAD_STRENGTH));
 8000688:	01400504 	movi	r5,20
 800068c:	e13ffe17 	ldw	r4,-8(fp)
 8000690:	800026c0 	call	800026c <SGTL5000_Reg_Rd>
 8000694:	10bfffcc 	andi	r2,r2,65535
 8000698:	100b883a 	mov	r5,r2
 800069c:	01020074 	movhi	r4,2049
 80006a0:	2105f804 	addi	r4,r4,6112
 80006a4:	800130c0 	call	800130c <printf>


	return 0;
 80006a8:	0005883a 	mov	r2,zero
}
 80006ac:	e037883a 	mov	sp,fp
 80006b0:	dfc00117 	ldw	ra,4(sp)
 80006b4:	df000017 	ldw	fp,0(sp)
 80006b8:	dec00204 	addi	sp,sp,8
 80006bc:	f800283a 	ret

080006c0 <__fixunssfsi>:
 80006c0:	defffd04 	addi	sp,sp,-12
 80006c4:	dc000015 	stw	r16,0(sp)
 80006c8:	0413c034 	movhi	r16,20224
 80006cc:	800b883a 	mov	r5,r16
 80006d0:	dc400115 	stw	r17,4(sp)
 80006d4:	dfc00215 	stw	ra,8(sp)
 80006d8:	2023883a 	mov	r17,r4
 80006dc:	80007200 	call	8000720 <__gesf2>
 80006e0:	1000070e 	bge	r2,zero,8000700 <__fixunssfsi+0x40>
 80006e4:	8809883a 	mov	r4,r17
 80006e8:	80010f00 	call	80010f0 <__fixsfsi>
 80006ec:	dfc00217 	ldw	ra,8(sp)
 80006f0:	dc400117 	ldw	r17,4(sp)
 80006f4:	dc000017 	ldw	r16,0(sp)
 80006f8:	dec00304 	addi	sp,sp,12
 80006fc:	f800283a 	ret
 8000700:	800b883a 	mov	r5,r16
 8000704:	8809883a 	mov	r4,r17
 8000708:	8000c0c0 	call	8000c0c <__subsf3>
 800070c:	1009883a 	mov	r4,r2
 8000710:	80010f00 	call	80010f0 <__fixsfsi>
 8000714:	00e00034 	movhi	r3,32768
 8000718:	10c5883a 	add	r2,r2,r3
 800071c:	003ff306 	br	80006ec <__alt_data_end+0xfc0006ec>

08000720 <__gesf2>:
 8000720:	2004d5fa 	srli	r2,r4,23
 8000724:	2806d5fa 	srli	r3,r5,23
 8000728:	01802034 	movhi	r6,128
 800072c:	31bfffc4 	addi	r6,r6,-1
 8000730:	10803fcc 	andi	r2,r2,255
 8000734:	01c03fc4 	movi	r7,255
 8000738:	3110703a 	and	r8,r6,r4
 800073c:	18c03fcc 	andi	r3,r3,255
 8000740:	314c703a 	and	r6,r6,r5
 8000744:	2008d7fa 	srli	r4,r4,31
 8000748:	280ad7fa 	srli	r5,r5,31
 800074c:	11c01926 	beq	r2,r7,80007b4 <__gesf2+0x94>
 8000750:	01c03fc4 	movi	r7,255
 8000754:	19c00f26 	beq	r3,r7,8000794 <__gesf2+0x74>
 8000758:	1000061e 	bne	r2,zero,8000774 <__gesf2+0x54>
 800075c:	400f003a 	cmpeq	r7,r8,zero
 8000760:	1800071e 	bne	r3,zero,8000780 <__gesf2+0x60>
 8000764:	3000061e 	bne	r6,zero,8000780 <__gesf2+0x60>
 8000768:	0005883a 	mov	r2,zero
 800076c:	40000e1e 	bne	r8,zero,80007a8 <__gesf2+0x88>
 8000770:	f800283a 	ret
 8000774:	18000a1e 	bne	r3,zero,80007a0 <__gesf2+0x80>
 8000778:	30000b26 	beq	r6,zero,80007a8 <__gesf2+0x88>
 800077c:	000f883a 	mov	r7,zero
 8000780:	29403fcc 	andi	r5,r5,255
 8000784:	38000726 	beq	r7,zero,80007a4 <__gesf2+0x84>
 8000788:	28000826 	beq	r5,zero,80007ac <__gesf2+0x8c>
 800078c:	00800044 	movi	r2,1
 8000790:	f800283a 	ret
 8000794:	303ff026 	beq	r6,zero,8000758 <__alt_data_end+0xfc000758>
 8000798:	00bfff84 	movi	r2,-2
 800079c:	f800283a 	ret
 80007a0:	29403fcc 	andi	r5,r5,255
 80007a4:	21400526 	beq	r4,r5,80007bc <__gesf2+0x9c>
 80007a8:	203ff826 	beq	r4,zero,800078c <__alt_data_end+0xfc00078c>
 80007ac:	00bfffc4 	movi	r2,-1
 80007b0:	f800283a 	ret
 80007b4:	403fe626 	beq	r8,zero,8000750 <__alt_data_end+0xfc000750>
 80007b8:	003ff706 	br	8000798 <__alt_data_end+0xfc000798>
 80007bc:	18bffa16 	blt	r3,r2,80007a8 <__alt_data_end+0xfc0007a8>
 80007c0:	10c00216 	blt	r2,r3,80007cc <__gesf2+0xac>
 80007c4:	323ff836 	bltu	r6,r8,80007a8 <__alt_data_end+0xfc0007a8>
 80007c8:	4180022e 	bgeu	r8,r6,80007d4 <__gesf2+0xb4>
 80007cc:	203fef1e 	bne	r4,zero,800078c <__alt_data_end+0xfc00078c>
 80007d0:	003ff606 	br	80007ac <__alt_data_end+0xfc0007ac>
 80007d4:	0005883a 	mov	r2,zero
 80007d8:	f800283a 	ret

080007dc <__mulsf3>:
 80007dc:	defff504 	addi	sp,sp,-44
 80007e0:	dc000115 	stw	r16,4(sp)
 80007e4:	2020d5fa 	srli	r16,r4,23
 80007e8:	dd400615 	stw	r21,24(sp)
 80007ec:	202ad7fa 	srli	r21,r4,31
 80007f0:	dc800315 	stw	r18,12(sp)
 80007f4:	04802034 	movhi	r18,128
 80007f8:	df000915 	stw	fp,36(sp)
 80007fc:	dd000515 	stw	r20,20(sp)
 8000800:	94bfffc4 	addi	r18,r18,-1
 8000804:	dfc00a15 	stw	ra,40(sp)
 8000808:	ddc00815 	stw	r23,32(sp)
 800080c:	dd800715 	stw	r22,28(sp)
 8000810:	dcc00415 	stw	r19,16(sp)
 8000814:	dc400215 	stw	r17,8(sp)
 8000818:	84003fcc 	andi	r16,r16,255
 800081c:	9124703a 	and	r18,r18,r4
 8000820:	a829883a 	mov	r20,r21
 8000824:	af003fcc 	andi	fp,r21,255
 8000828:	80005426 	beq	r16,zero,800097c <__mulsf3+0x1a0>
 800082c:	00803fc4 	movi	r2,255
 8000830:	80802f26 	beq	r16,r2,80008f0 <__mulsf3+0x114>
 8000834:	91002034 	orhi	r4,r18,128
 8000838:	202490fa 	slli	r18,r4,3
 800083c:	843fe044 	addi	r16,r16,-127
 8000840:	0023883a 	mov	r17,zero
 8000844:	002f883a 	mov	r23,zero
 8000848:	2804d5fa 	srli	r2,r5,23
 800084c:	282cd7fa 	srli	r22,r5,31
 8000850:	01002034 	movhi	r4,128
 8000854:	213fffc4 	addi	r4,r4,-1
 8000858:	10803fcc 	andi	r2,r2,255
 800085c:	2166703a 	and	r19,r4,r5
 8000860:	b1803fcc 	andi	r6,r22,255
 8000864:	10004c26 	beq	r2,zero,8000998 <__mulsf3+0x1bc>
 8000868:	00c03fc4 	movi	r3,255
 800086c:	10c04726 	beq	r2,r3,800098c <__mulsf3+0x1b0>
 8000870:	99002034 	orhi	r4,r19,128
 8000874:	202690fa 	slli	r19,r4,3
 8000878:	10bfe044 	addi	r2,r2,-127
 800087c:	0007883a 	mov	r3,zero
 8000880:	80a1883a 	add	r16,r16,r2
 8000884:	010003c4 	movi	r4,15
 8000888:	1c44b03a 	or	r2,r3,r17
 800088c:	b56af03a 	xor	r21,r22,r21
 8000890:	81c00044 	addi	r7,r16,1
 8000894:	20806b36 	bltu	r4,r2,8000a44 <__mulsf3+0x268>
 8000898:	100490ba 	slli	r2,r2,2
 800089c:	01020034 	movhi	r4,2048
 80008a0:	21022c04 	addi	r4,r4,2224
 80008a4:	1105883a 	add	r2,r2,r4
 80008a8:	10800017 	ldw	r2,0(r2)
 80008ac:	1000683a 	jmp	r2
 80008b0:	08000a44 	addi	zero,at,41
 80008b4:	08000904 	addi	zero,at,36
 80008b8:	08000904 	addi	zero,at,36
 80008bc:	08000900 	call	800090 <__alt_mem_onchip_memory2_0+0x800090>
 80008c0:	08000a28 	cmpgeui	zero,at,40
 80008c4:	08000a28 	cmpgeui	zero,at,40
 80008c8:	08000a14 	ori	zero,at,40
 80008cc:	08000900 	call	800090 <__alt_mem_onchip_memory2_0+0x800090>
 80008d0:	08000a28 	cmpgeui	zero,at,40
 80008d4:	08000a14 	ori	zero,at,40
 80008d8:	08000a28 	cmpgeui	zero,at,40
 80008dc:	08000900 	call	800090 <__alt_mem_onchip_memory2_0+0x800090>
 80008e0:	08000a34 	orhi	zero,at,40
 80008e4:	08000a34 	orhi	zero,at,40
 80008e8:	08000a34 	orhi	zero,at,40
 80008ec:	08000b44 	addi	zero,at,45
 80008f0:	90003b1e 	bne	r18,zero,80009e0 <__mulsf3+0x204>
 80008f4:	04400204 	movi	r17,8
 80008f8:	05c00084 	movi	r23,2
 80008fc:	003fd206 	br	8000848 <__alt_data_end+0xfc000848>
 8000900:	302b883a 	mov	r21,r6
 8000904:	00800084 	movi	r2,2
 8000908:	18802626 	beq	r3,r2,80009a4 <__mulsf3+0x1c8>
 800090c:	008000c4 	movi	r2,3
 8000910:	1880b826 	beq	r3,r2,8000bf4 <__mulsf3+0x418>
 8000914:	00800044 	movi	r2,1
 8000918:	1880af1e 	bne	r3,r2,8000bd8 <__mulsf3+0x3fc>
 800091c:	a829883a 	mov	r20,r21
 8000920:	0007883a 	mov	r3,zero
 8000924:	0009883a 	mov	r4,zero
 8000928:	18803fcc 	andi	r2,r3,255
 800092c:	100695fa 	slli	r3,r2,23
 8000930:	a0803fcc 	andi	r2,r20,255
 8000934:	100a97fa 	slli	r5,r2,31
 8000938:	00802034 	movhi	r2,128
 800093c:	10bfffc4 	addi	r2,r2,-1
 8000940:	2084703a 	and	r2,r4,r2
 8000944:	10c4b03a 	or	r2,r2,r3
 8000948:	1144b03a 	or	r2,r2,r5
 800094c:	dfc00a17 	ldw	ra,40(sp)
 8000950:	df000917 	ldw	fp,36(sp)
 8000954:	ddc00817 	ldw	r23,32(sp)
 8000958:	dd800717 	ldw	r22,28(sp)
 800095c:	dd400617 	ldw	r21,24(sp)
 8000960:	dd000517 	ldw	r20,20(sp)
 8000964:	dcc00417 	ldw	r19,16(sp)
 8000968:	dc800317 	ldw	r18,12(sp)
 800096c:	dc400217 	ldw	r17,8(sp)
 8000970:	dc000117 	ldw	r16,4(sp)
 8000974:	dec00b04 	addi	sp,sp,44
 8000978:	f800283a 	ret
 800097c:	90000d1e 	bne	r18,zero,80009b4 <__mulsf3+0x1d8>
 8000980:	04400104 	movi	r17,4
 8000984:	05c00044 	movi	r23,1
 8000988:	003faf06 	br	8000848 <__alt_data_end+0xfc000848>
 800098c:	9806c03a 	cmpne	r3,r19,zero
 8000990:	18c00084 	addi	r3,r3,2
 8000994:	003fba06 	br	8000880 <__alt_data_end+0xfc000880>
 8000998:	9800141e 	bne	r19,zero,80009ec <__mulsf3+0x210>
 800099c:	00c00044 	movi	r3,1
 80009a0:	003fb706 	br	8000880 <__alt_data_end+0xfc000880>
 80009a4:	a829883a 	mov	r20,r21
 80009a8:	00ffffc4 	movi	r3,-1
 80009ac:	0009883a 	mov	r4,zero
 80009b0:	003fdd06 	br	8000928 <__alt_data_end+0xfc000928>
 80009b4:	9009883a 	mov	r4,r18
 80009b8:	d9400015 	stw	r5,0(sp)
 80009bc:	80012500 	call	8001250 <__clzsi2>
 80009c0:	10fffec4 	addi	r3,r2,-5
 80009c4:	10801d84 	addi	r2,r2,118
 80009c8:	90e4983a 	sll	r18,r18,r3
 80009cc:	00a1c83a 	sub	r16,zero,r2
 80009d0:	0023883a 	mov	r17,zero
 80009d4:	002f883a 	mov	r23,zero
 80009d8:	d9400017 	ldw	r5,0(sp)
 80009dc:	003f9a06 	br	8000848 <__alt_data_end+0xfc000848>
 80009e0:	04400304 	movi	r17,12
 80009e4:	05c000c4 	movi	r23,3
 80009e8:	003f9706 	br	8000848 <__alt_data_end+0xfc000848>
 80009ec:	9809883a 	mov	r4,r19
 80009f0:	d9800015 	stw	r6,0(sp)
 80009f4:	80012500 	call	8001250 <__clzsi2>
 80009f8:	10fffec4 	addi	r3,r2,-5
 80009fc:	10801d84 	addi	r2,r2,118
 8000a00:	98e6983a 	sll	r19,r19,r3
 8000a04:	0085c83a 	sub	r2,zero,r2
 8000a08:	0007883a 	mov	r3,zero
 8000a0c:	d9800017 	ldw	r6,0(sp)
 8000a10:	003f9b06 	br	8000880 <__alt_data_end+0xfc000880>
 8000a14:	01002034 	movhi	r4,128
 8000a18:	0029883a 	mov	r20,zero
 8000a1c:	213fffc4 	addi	r4,r4,-1
 8000a20:	00ffffc4 	movi	r3,-1
 8000a24:	003fc006 	br	8000928 <__alt_data_end+0xfc000928>
 8000a28:	9027883a 	mov	r19,r18
 8000a2c:	b807883a 	mov	r3,r23
 8000a30:	003fb406 	br	8000904 <__alt_data_end+0xfc000904>
 8000a34:	9027883a 	mov	r19,r18
 8000a38:	e02b883a 	mov	r21,fp
 8000a3c:	b807883a 	mov	r3,r23
 8000a40:	003fb006 	br	8000904 <__alt_data_end+0xfc000904>
 8000a44:	9028d43a 	srli	r20,r18,16
 8000a48:	982cd43a 	srli	r22,r19,16
 8000a4c:	94bfffcc 	andi	r18,r18,65535
 8000a50:	9cffffcc 	andi	r19,r19,65535
 8000a54:	980b883a 	mov	r5,r19
 8000a58:	9009883a 	mov	r4,r18
 8000a5c:	d9c00015 	stw	r7,0(sp)
 8000a60:	80012b40 	call	80012b4 <__mulsi3>
 8000a64:	a00b883a 	mov	r5,r20
 8000a68:	9809883a 	mov	r4,r19
 8000a6c:	1023883a 	mov	r17,r2
 8000a70:	80012b40 	call	80012b4 <__mulsi3>
 8000a74:	a009883a 	mov	r4,r20
 8000a78:	b00b883a 	mov	r5,r22
 8000a7c:	1027883a 	mov	r19,r2
 8000a80:	80012b40 	call	80012b4 <__mulsi3>
 8000a84:	b00b883a 	mov	r5,r22
 8000a88:	9009883a 	mov	r4,r18
 8000a8c:	1029883a 	mov	r20,r2
 8000a90:	80012b40 	call	80012b4 <__mulsi3>
 8000a94:	8806d43a 	srli	r3,r17,16
 8000a98:	14c5883a 	add	r2,r2,r19
 8000a9c:	d9c00017 	ldw	r7,0(sp)
 8000aa0:	1885883a 	add	r2,r3,r2
 8000aa4:	14c0022e 	bgeu	r2,r19,8000ab0 <__mulsf3+0x2d4>
 8000aa8:	00c00074 	movhi	r3,1
 8000aac:	a0e9883a 	add	r20,r20,r3
 8000ab0:	1026943a 	slli	r19,r2,16
 8000ab4:	8c7fffcc 	andi	r17,r17,65535
 8000ab8:	1004d43a 	srli	r2,r2,16
 8000abc:	9c63883a 	add	r17,r19,r17
 8000ac0:	882691ba 	slli	r19,r17,6
 8000ac4:	1505883a 	add	r2,r2,r20
 8000ac8:	8822d6ba 	srli	r17,r17,26
 8000acc:	100891ba 	slli	r4,r2,6
 8000ad0:	9826c03a 	cmpne	r19,r19,zero
 8000ad4:	9c62b03a 	or	r17,r19,r17
 8000ad8:	8926b03a 	or	r19,r17,r4
 8000adc:	9882002c 	andhi	r2,r19,2048
 8000ae0:	10000426 	beq	r2,zero,8000af4 <__mulsf3+0x318>
 8000ae4:	9804d07a 	srli	r2,r19,1
 8000ae8:	9900004c 	andi	r4,r19,1
 8000aec:	3821883a 	mov	r16,r7
 8000af0:	1126b03a 	or	r19,r2,r4
 8000af4:	80c01fc4 	addi	r3,r16,127
 8000af8:	00c0210e 	bge	zero,r3,8000b80 <__mulsf3+0x3a4>
 8000afc:	988001cc 	andi	r2,r19,7
 8000b00:	10000426 	beq	r2,zero,8000b14 <__mulsf3+0x338>
 8000b04:	988003cc 	andi	r2,r19,15
 8000b08:	01000104 	movi	r4,4
 8000b0c:	11000126 	beq	r2,r4,8000b14 <__mulsf3+0x338>
 8000b10:	9927883a 	add	r19,r19,r4
 8000b14:	9882002c 	andhi	r2,r19,2048
 8000b18:	10000426 	beq	r2,zero,8000b2c <__mulsf3+0x350>
 8000b1c:	00be0034 	movhi	r2,63488
 8000b20:	10bfffc4 	addi	r2,r2,-1
 8000b24:	80c02004 	addi	r3,r16,128
 8000b28:	98a6703a 	and	r19,r19,r2
 8000b2c:	00803f84 	movi	r2,254
 8000b30:	10ff9c16 	blt	r2,r3,80009a4 <__alt_data_end+0xfc0009a4>
 8000b34:	980891ba 	slli	r4,r19,6
 8000b38:	a829883a 	mov	r20,r21
 8000b3c:	2008d27a 	srli	r4,r4,9
 8000b40:	003f7906 	br	8000928 <__alt_data_end+0xfc000928>
 8000b44:	9080102c 	andhi	r2,r18,64
 8000b48:	10000826 	beq	r2,zero,8000b6c <__mulsf3+0x390>
 8000b4c:	9880102c 	andhi	r2,r19,64
 8000b50:	1000061e 	bne	r2,zero,8000b6c <__mulsf3+0x390>
 8000b54:	00802034 	movhi	r2,128
 8000b58:	99001034 	orhi	r4,r19,64
 8000b5c:	10bfffc4 	addi	r2,r2,-1
 8000b60:	b029883a 	mov	r20,r22
 8000b64:	2088703a 	and	r4,r4,r2
 8000b68:	003fad06 	br	8000a20 <__alt_data_end+0xfc000a20>
 8000b6c:	00802034 	movhi	r2,128
 8000b70:	91001034 	orhi	r4,r18,64
 8000b74:	10bfffc4 	addi	r2,r2,-1
 8000b78:	2088703a 	and	r4,r4,r2
 8000b7c:	003fa806 	br	8000a20 <__alt_data_end+0xfc000a20>
 8000b80:	00800044 	movi	r2,1
 8000b84:	10c7c83a 	sub	r3,r2,r3
 8000b88:	008006c4 	movi	r2,27
 8000b8c:	10ff6316 	blt	r2,r3,800091c <__alt_data_end+0xfc00091c>
 8000b90:	00800804 	movi	r2,32
 8000b94:	10c5c83a 	sub	r2,r2,r3
 8000b98:	9884983a 	sll	r2,r19,r2
 8000b9c:	98c6d83a 	srl	r3,r19,r3
 8000ba0:	1004c03a 	cmpne	r2,r2,zero
 8000ba4:	1884b03a 	or	r2,r3,r2
 8000ba8:	10c001cc 	andi	r3,r2,7
 8000bac:	18000426 	beq	r3,zero,8000bc0 <__mulsf3+0x3e4>
 8000bb0:	10c003cc 	andi	r3,r2,15
 8000bb4:	01000104 	movi	r4,4
 8000bb8:	19000126 	beq	r3,r4,8000bc0 <__mulsf3+0x3e4>
 8000bbc:	1105883a 	add	r2,r2,r4
 8000bc0:	10c1002c 	andhi	r3,r2,1024
 8000bc4:	18000626 	beq	r3,zero,8000be0 <__mulsf3+0x404>
 8000bc8:	a829883a 	mov	r20,r21
 8000bcc:	00c00044 	movi	r3,1
 8000bd0:	0009883a 	mov	r4,zero
 8000bd4:	003f5406 	br	8000928 <__alt_data_end+0xfc000928>
 8000bd8:	3821883a 	mov	r16,r7
 8000bdc:	003fc506 	br	8000af4 <__alt_data_end+0xfc000af4>
 8000be0:	100491ba 	slli	r2,r2,6
 8000be4:	a829883a 	mov	r20,r21
 8000be8:	0007883a 	mov	r3,zero
 8000bec:	1008d27a 	srli	r4,r2,9
 8000bf0:	003f4d06 	br	8000928 <__alt_data_end+0xfc000928>
 8000bf4:	00802034 	movhi	r2,128
 8000bf8:	99001034 	orhi	r4,r19,64
 8000bfc:	10bfffc4 	addi	r2,r2,-1
 8000c00:	a829883a 	mov	r20,r21
 8000c04:	2088703a 	and	r4,r4,r2
 8000c08:	003f8506 	br	8000a20 <__alt_data_end+0xfc000a20>

08000c0c <__subsf3>:
 8000c0c:	defffc04 	addi	sp,sp,-16
 8000c10:	280cd5fa 	srli	r6,r5,23
 8000c14:	dc000015 	stw	r16,0(sp)
 8000c18:	01c02034 	movhi	r7,128
 8000c1c:	2020d5fa 	srli	r16,r4,23
 8000c20:	39ffffc4 	addi	r7,r7,-1
 8000c24:	3906703a 	and	r3,r7,r4
 8000c28:	dc400115 	stw	r17,4(sp)
 8000c2c:	394e703a 	and	r7,r7,r5
 8000c30:	2022d7fa 	srli	r17,r4,31
 8000c34:	dfc00315 	stw	ra,12(sp)
 8000c38:	dc800215 	stw	r18,8(sp)
 8000c3c:	31803fcc 	andi	r6,r6,255
 8000c40:	01003fc4 	movi	r4,255
 8000c44:	84003fcc 	andi	r16,r16,255
 8000c48:	180690fa 	slli	r3,r3,3
 8000c4c:	2804d7fa 	srli	r2,r5,31
 8000c50:	380e90fa 	slli	r7,r7,3
 8000c54:	31006d26 	beq	r6,r4,8000e0c <__subsf3+0x200>
 8000c58:	1080005c 	xori	r2,r2,1
 8000c5c:	8189c83a 	sub	r4,r16,r6
 8000c60:	14404f26 	beq	r2,r17,8000da0 <__subsf3+0x194>
 8000c64:	0100770e 	bge	zero,r4,8000e44 <__subsf3+0x238>
 8000c68:	30001e1e 	bne	r6,zero,8000ce4 <__subsf3+0xd8>
 8000c6c:	38006a1e 	bne	r7,zero,8000e18 <__subsf3+0x20c>
 8000c70:	188001cc 	andi	r2,r3,7
 8000c74:	10000426 	beq	r2,zero,8000c88 <__subsf3+0x7c>
 8000c78:	188003cc 	andi	r2,r3,15
 8000c7c:	01000104 	movi	r4,4
 8000c80:	11000126 	beq	r2,r4,8000c88 <__subsf3+0x7c>
 8000c84:	1907883a 	add	r3,r3,r4
 8000c88:	1881002c 	andhi	r2,r3,1024
 8000c8c:	10003926 	beq	r2,zero,8000d74 <__subsf3+0x168>
 8000c90:	84000044 	addi	r16,r16,1
 8000c94:	00803fc4 	movi	r2,255
 8000c98:	80807526 	beq	r16,r2,8000e70 <__subsf3+0x264>
 8000c9c:	180691ba 	slli	r3,r3,6
 8000ca0:	8880004c 	andi	r2,r17,1
 8000ca4:	180ad27a 	srli	r5,r3,9
 8000ca8:	84003fcc 	andi	r16,r16,255
 8000cac:	800695fa 	slli	r3,r16,23
 8000cb0:	10803fcc 	andi	r2,r2,255
 8000cb4:	01002034 	movhi	r4,128
 8000cb8:	213fffc4 	addi	r4,r4,-1
 8000cbc:	100497fa 	slli	r2,r2,31
 8000cc0:	2920703a 	and	r16,r5,r4
 8000cc4:	80e0b03a 	or	r16,r16,r3
 8000cc8:	8084b03a 	or	r2,r16,r2
 8000ccc:	dfc00317 	ldw	ra,12(sp)
 8000cd0:	dc800217 	ldw	r18,8(sp)
 8000cd4:	dc400117 	ldw	r17,4(sp)
 8000cd8:	dc000017 	ldw	r16,0(sp)
 8000cdc:	dec00404 	addi	sp,sp,16
 8000ce0:	f800283a 	ret
 8000ce4:	00803fc4 	movi	r2,255
 8000ce8:	80bfe126 	beq	r16,r2,8000c70 <__alt_data_end+0xfc000c70>
 8000cec:	39c10034 	orhi	r7,r7,1024
 8000cf0:	008006c4 	movi	r2,27
 8000cf4:	11007416 	blt	r2,r4,8000ec8 <__subsf3+0x2bc>
 8000cf8:	00800804 	movi	r2,32
 8000cfc:	1105c83a 	sub	r2,r2,r4
 8000d00:	3884983a 	sll	r2,r7,r2
 8000d04:	390ed83a 	srl	r7,r7,r4
 8000d08:	1008c03a 	cmpne	r4,r2,zero
 8000d0c:	390eb03a 	or	r7,r7,r4
 8000d10:	19c7c83a 	sub	r3,r3,r7
 8000d14:	1881002c 	andhi	r2,r3,1024
 8000d18:	10001426 	beq	r2,zero,8000d6c <__subsf3+0x160>
 8000d1c:	04810034 	movhi	r18,1024
 8000d20:	94bfffc4 	addi	r18,r18,-1
 8000d24:	1ca4703a 	and	r18,r3,r18
 8000d28:	9009883a 	mov	r4,r18
 8000d2c:	80012500 	call	8001250 <__clzsi2>
 8000d30:	10bffec4 	addi	r2,r2,-5
 8000d34:	90a4983a 	sll	r18,r18,r2
 8000d38:	14005116 	blt	r2,r16,8000e80 <__subsf3+0x274>
 8000d3c:	1405c83a 	sub	r2,r2,r16
 8000d40:	10c00044 	addi	r3,r2,1
 8000d44:	00800804 	movi	r2,32
 8000d48:	10c5c83a 	sub	r2,r2,r3
 8000d4c:	9084983a 	sll	r2,r18,r2
 8000d50:	90e4d83a 	srl	r18,r18,r3
 8000d54:	0021883a 	mov	r16,zero
 8000d58:	1006c03a 	cmpne	r3,r2,zero
 8000d5c:	90c6b03a 	or	r3,r18,r3
 8000d60:	003fc306 	br	8000c70 <__alt_data_end+0xfc000c70>
 8000d64:	2000e026 	beq	r4,zero,80010e8 <__subsf3+0x4dc>
 8000d68:	2007883a 	mov	r3,r4
 8000d6c:	188001cc 	andi	r2,r3,7
 8000d70:	103fc11e 	bne	r2,zero,8000c78 <__alt_data_end+0xfc000c78>
 8000d74:	180ad0fa 	srli	r5,r3,3
 8000d78:	00c03fc4 	movi	r3,255
 8000d7c:	8880004c 	andi	r2,r17,1
 8000d80:	80c0031e 	bne	r16,r3,8000d90 <__subsf3+0x184>
 8000d84:	28006d26 	beq	r5,zero,8000f3c <__subsf3+0x330>
 8000d88:	29401034 	orhi	r5,r5,64
 8000d8c:	043fffc4 	movi	r16,-1
 8000d90:	00c02034 	movhi	r3,128
 8000d94:	18ffffc4 	addi	r3,r3,-1
 8000d98:	28ca703a 	and	r5,r5,r3
 8000d9c:	003fc206 	br	8000ca8 <__alt_data_end+0xfc000ca8>
 8000da0:	01003c0e 	bge	zero,r4,8000e94 <__subsf3+0x288>
 8000da4:	30002126 	beq	r6,zero,8000e2c <__subsf3+0x220>
 8000da8:	01403fc4 	movi	r5,255
 8000dac:	817fb026 	beq	r16,r5,8000c70 <__alt_data_end+0xfc000c70>
 8000db0:	39c10034 	orhi	r7,r7,1024
 8000db4:	014006c4 	movi	r5,27
 8000db8:	29007416 	blt	r5,r4,8000f8c <__subsf3+0x380>
 8000dbc:	01400804 	movi	r5,32
 8000dc0:	290bc83a 	sub	r5,r5,r4
 8000dc4:	394a983a 	sll	r5,r7,r5
 8000dc8:	390ed83a 	srl	r7,r7,r4
 8000dcc:	2808c03a 	cmpne	r4,r5,zero
 8000dd0:	390eb03a 	or	r7,r7,r4
 8000dd4:	19c7883a 	add	r3,r3,r7
 8000dd8:	1901002c 	andhi	r4,r3,1024
 8000ddc:	20003826 	beq	r4,zero,8000ec0 <__subsf3+0x2b4>
 8000de0:	84000044 	addi	r16,r16,1
 8000de4:	01003fc4 	movi	r4,255
 8000de8:	81005426 	beq	r16,r4,8000f3c <__subsf3+0x330>
 8000dec:	1023883a 	mov	r17,r2
 8000df0:	00bf0034 	movhi	r2,64512
 8000df4:	10bfffc4 	addi	r2,r2,-1
 8000df8:	1900004c 	andi	r4,r3,1
 8000dfc:	1886703a 	and	r3,r3,r2
 8000e00:	1806d07a 	srli	r3,r3,1
 8000e04:	1906b03a 	or	r3,r3,r4
 8000e08:	003f9906 	br	8000c70 <__alt_data_end+0xfc000c70>
 8000e0c:	383f9226 	beq	r7,zero,8000c58 <__alt_data_end+0xfc000c58>
 8000e10:	10803fcc 	andi	r2,r2,255
 8000e14:	003f9106 	br	8000c5c <__alt_data_end+0xfc000c5c>
 8000e18:	213fffc4 	addi	r4,r4,-1
 8000e1c:	203fbc26 	beq	r4,zero,8000d10 <__alt_data_end+0xfc000d10>
 8000e20:	00803fc4 	movi	r2,255
 8000e24:	80bfb21e 	bne	r16,r2,8000cf0 <__alt_data_end+0xfc000cf0>
 8000e28:	003f9106 	br	8000c70 <__alt_data_end+0xfc000c70>
 8000e2c:	383f9026 	beq	r7,zero,8000c70 <__alt_data_end+0xfc000c70>
 8000e30:	213fffc4 	addi	r4,r4,-1
 8000e34:	203fe726 	beq	r4,zero,8000dd4 <__alt_data_end+0xfc000dd4>
 8000e38:	01403fc4 	movi	r5,255
 8000e3c:	817fdd1e 	bne	r16,r5,8000db4 <__alt_data_end+0xfc000db4>
 8000e40:	003f8b06 	br	8000c70 <__alt_data_end+0xfc000c70>
 8000e44:	2000221e 	bne	r4,zero,8000ed0 <__subsf3+0x2c4>
 8000e48:	81000044 	addi	r4,r16,1
 8000e4c:	21003fcc 	andi	r4,r4,255
 8000e50:	01400044 	movi	r5,1
 8000e54:	2900470e 	bge	r5,r4,8000f74 <__subsf3+0x368>
 8000e58:	19e5c83a 	sub	r18,r3,r7
 8000e5c:	9141002c 	andhi	r5,r18,1024
 8000e60:	28002d26 	beq	r5,zero,8000f18 <__subsf3+0x30c>
 8000e64:	38e5c83a 	sub	r18,r7,r3
 8000e68:	1023883a 	mov	r17,r2
 8000e6c:	003fae06 	br	8000d28 <__alt_data_end+0xfc000d28>
 8000e70:	8880004c 	andi	r2,r17,1
 8000e74:	043fffc4 	movi	r16,-1
 8000e78:	000b883a 	mov	r5,zero
 8000e7c:	003f8a06 	br	8000ca8 <__alt_data_end+0xfc000ca8>
 8000e80:	00ff0034 	movhi	r3,64512
 8000e84:	18ffffc4 	addi	r3,r3,-1
 8000e88:	80a1c83a 	sub	r16,r16,r2
 8000e8c:	90c6703a 	and	r3,r18,r3
 8000e90:	003f7706 	br	8000c70 <__alt_data_end+0xfc000c70>
 8000e94:	2000431e 	bne	r4,zero,8000fa4 <__subsf3+0x398>
 8000e98:	81000044 	addi	r4,r16,1
 8000e9c:	21803fcc 	andi	r6,r4,255
 8000ea0:	01400044 	movi	r5,1
 8000ea4:	2980280e 	bge	r5,r6,8000f48 <__subsf3+0x33c>
 8000ea8:	01403fc4 	movi	r5,255
 8000eac:	21402326 	beq	r4,r5,8000f3c <__subsf3+0x330>
 8000eb0:	19c7883a 	add	r3,r3,r7
 8000eb4:	1806d07a 	srli	r3,r3,1
 8000eb8:	2021883a 	mov	r16,r4
 8000ebc:	003f6c06 	br	8000c70 <__alt_data_end+0xfc000c70>
 8000ec0:	1023883a 	mov	r17,r2
 8000ec4:	003fa906 	br	8000d6c <__alt_data_end+0xfc000d6c>
 8000ec8:	01c00044 	movi	r7,1
 8000ecc:	003f9006 	br	8000d10 <__alt_data_end+0xfc000d10>
 8000ed0:	8000151e 	bne	r16,zero,8000f28 <__subsf3+0x31c>
 8000ed4:	18002f26 	beq	r3,zero,8000f94 <__subsf3+0x388>
 8000ed8:	0108303a 	nor	r4,zero,r4
 8000edc:	20000a26 	beq	r4,zero,8000f08 <__subsf3+0x2fc>
 8000ee0:	01403fc4 	movi	r5,255
 8000ee4:	31402b26 	beq	r6,r5,8000f94 <__subsf3+0x388>
 8000ee8:	014006c4 	movi	r5,27
 8000eec:	29006e16 	blt	r5,r4,80010a8 <__subsf3+0x49c>
 8000ef0:	01400804 	movi	r5,32
 8000ef4:	290bc83a 	sub	r5,r5,r4
 8000ef8:	194a983a 	sll	r5,r3,r5
 8000efc:	1908d83a 	srl	r4,r3,r4
 8000f00:	2806c03a 	cmpne	r3,r5,zero
 8000f04:	20c6b03a 	or	r3,r4,r3
 8000f08:	38c7c83a 	sub	r3,r7,r3
 8000f0c:	3021883a 	mov	r16,r6
 8000f10:	1023883a 	mov	r17,r2
 8000f14:	003f7f06 	br	8000d14 <__alt_data_end+0xfc000d14>
 8000f18:	903f831e 	bne	r18,zero,8000d28 <__alt_data_end+0xfc000d28>
 8000f1c:	0005883a 	mov	r2,zero
 8000f20:	0021883a 	mov	r16,zero
 8000f24:	003f9a06 	br	8000d90 <__alt_data_end+0xfc000d90>
 8000f28:	01403fc4 	movi	r5,255
 8000f2c:	31401926 	beq	r6,r5,8000f94 <__subsf3+0x388>
 8000f30:	0109c83a 	sub	r4,zero,r4
 8000f34:	18c10034 	orhi	r3,r3,1024
 8000f38:	003feb06 	br	8000ee8 <__alt_data_end+0xfc000ee8>
 8000f3c:	043fffc4 	movi	r16,-1
 8000f40:	000b883a 	mov	r5,zero
 8000f44:	003f5806 	br	8000ca8 <__alt_data_end+0xfc000ca8>
 8000f48:	8000481e 	bne	r16,zero,800106c <__subsf3+0x460>
 8000f4c:	18006226 	beq	r3,zero,80010d8 <__subsf3+0x4cc>
 8000f50:	383f4726 	beq	r7,zero,8000c70 <__alt_data_end+0xfc000c70>
 8000f54:	19c7883a 	add	r3,r3,r7
 8000f58:	1881002c 	andhi	r2,r3,1024
 8000f5c:	103f8326 	beq	r2,zero,8000d6c <__alt_data_end+0xfc000d6c>
 8000f60:	00bf0034 	movhi	r2,64512
 8000f64:	10bfffc4 	addi	r2,r2,-1
 8000f68:	2821883a 	mov	r16,r5
 8000f6c:	1886703a 	and	r3,r3,r2
 8000f70:	003f3f06 	br	8000c70 <__alt_data_end+0xfc000c70>
 8000f74:	80001c1e 	bne	r16,zero,8000fe8 <__subsf3+0x3dc>
 8000f78:	1800261e 	bne	r3,zero,8001014 <__subsf3+0x408>
 8000f7c:	38004c26 	beq	r7,zero,80010b0 <__subsf3+0x4a4>
 8000f80:	3807883a 	mov	r3,r7
 8000f84:	1023883a 	mov	r17,r2
 8000f88:	003f3906 	br	8000c70 <__alt_data_end+0xfc000c70>
 8000f8c:	01c00044 	movi	r7,1
 8000f90:	003f9006 	br	8000dd4 <__alt_data_end+0xfc000dd4>
 8000f94:	3807883a 	mov	r3,r7
 8000f98:	3021883a 	mov	r16,r6
 8000f9c:	1023883a 	mov	r17,r2
 8000fa0:	003f3306 	br	8000c70 <__alt_data_end+0xfc000c70>
 8000fa4:	8000161e 	bne	r16,zero,8001000 <__subsf3+0x3f4>
 8000fa8:	18002d26 	beq	r3,zero,8001060 <__subsf3+0x454>
 8000fac:	0108303a 	nor	r4,zero,r4
 8000fb0:	20000a26 	beq	r4,zero,8000fdc <__subsf3+0x3d0>
 8000fb4:	01403fc4 	movi	r5,255
 8000fb8:	31402926 	beq	r6,r5,8001060 <__subsf3+0x454>
 8000fbc:	014006c4 	movi	r5,27
 8000fc0:	29004716 	blt	r5,r4,80010e0 <__subsf3+0x4d4>
 8000fc4:	01400804 	movi	r5,32
 8000fc8:	290bc83a 	sub	r5,r5,r4
 8000fcc:	194a983a 	sll	r5,r3,r5
 8000fd0:	1908d83a 	srl	r4,r3,r4
 8000fd4:	2806c03a 	cmpne	r3,r5,zero
 8000fd8:	20c6b03a 	or	r3,r4,r3
 8000fdc:	19c7883a 	add	r3,r3,r7
 8000fe0:	3021883a 	mov	r16,r6
 8000fe4:	003f7c06 	br	8000dd8 <__alt_data_end+0xfc000dd8>
 8000fe8:	1800111e 	bne	r3,zero,8001030 <__subsf3+0x424>
 8000fec:	38003326 	beq	r7,zero,80010bc <__subsf3+0x4b0>
 8000ff0:	3807883a 	mov	r3,r7
 8000ff4:	1023883a 	mov	r17,r2
 8000ff8:	04003fc4 	movi	r16,255
 8000ffc:	003f1c06 	br	8000c70 <__alt_data_end+0xfc000c70>
 8001000:	01403fc4 	movi	r5,255
 8001004:	31401626 	beq	r6,r5,8001060 <__subsf3+0x454>
 8001008:	0109c83a 	sub	r4,zero,r4
 800100c:	18c10034 	orhi	r3,r3,1024
 8001010:	003fea06 	br	8000fbc <__alt_data_end+0xfc000fbc>
 8001014:	383f1626 	beq	r7,zero,8000c70 <__alt_data_end+0xfc000c70>
 8001018:	19c9c83a 	sub	r4,r3,r7
 800101c:	2141002c 	andhi	r5,r4,1024
 8001020:	283f5026 	beq	r5,zero,8000d64 <__alt_data_end+0xfc000d64>
 8001024:	38c7c83a 	sub	r3,r7,r3
 8001028:	1023883a 	mov	r17,r2
 800102c:	003f1006 	br	8000c70 <__alt_data_end+0xfc000c70>
 8001030:	38001b26 	beq	r7,zero,80010a0 <__subsf3+0x494>
 8001034:	1806d0fa 	srli	r3,r3,3
 8001038:	1900102c 	andhi	r4,r3,64
 800103c:	20000526 	beq	r4,zero,8001054 <__subsf3+0x448>
 8001040:	380ed0fa 	srli	r7,r7,3
 8001044:	3900102c 	andhi	r4,r7,64
 8001048:	2000021e 	bne	r4,zero,8001054 <__subsf3+0x448>
 800104c:	3807883a 	mov	r3,r7
 8001050:	1023883a 	mov	r17,r2
 8001054:	180690fa 	slli	r3,r3,3
 8001058:	04003fc4 	movi	r16,255
 800105c:	003f0406 	br	8000c70 <__alt_data_end+0xfc000c70>
 8001060:	3807883a 	mov	r3,r7
 8001064:	3021883a 	mov	r16,r6
 8001068:	003f0106 	br	8000c70 <__alt_data_end+0xfc000c70>
 800106c:	18001726 	beq	r3,zero,80010cc <__subsf3+0x4c0>
 8001070:	38000b26 	beq	r7,zero,80010a0 <__subsf3+0x494>
 8001074:	1806d0fa 	srli	r3,r3,3
 8001078:	1900102c 	andhi	r4,r3,64
 800107c:	20000426 	beq	r4,zero,8001090 <__subsf3+0x484>
 8001080:	380ed0fa 	srli	r7,r7,3
 8001084:	3900102c 	andhi	r4,r7,64
 8001088:	2000011e 	bne	r4,zero,8001090 <__subsf3+0x484>
 800108c:	3807883a 	mov	r3,r7
 8001090:	180690fa 	slli	r3,r3,3
 8001094:	1023883a 	mov	r17,r2
 8001098:	04003fc4 	movi	r16,255
 800109c:	003ef406 	br	8000c70 <__alt_data_end+0xfc000c70>
 80010a0:	04003fc4 	movi	r16,255
 80010a4:	003ef206 	br	8000c70 <__alt_data_end+0xfc000c70>
 80010a8:	00c00044 	movi	r3,1
 80010ac:	003f9606 	br	8000f08 <__alt_data_end+0xfc000f08>
 80010b0:	000b883a 	mov	r5,zero
 80010b4:	0005883a 	mov	r2,zero
 80010b8:	003f3506 	br	8000d90 <__alt_data_end+0xfc000d90>
 80010bc:	01402034 	movhi	r5,128
 80010c0:	297fffc4 	addi	r5,r5,-1
 80010c4:	0005883a 	mov	r2,zero
 80010c8:	003f2f06 	br	8000d88 <__alt_data_end+0xfc000d88>
 80010cc:	3807883a 	mov	r3,r7
 80010d0:	04003fc4 	movi	r16,255
 80010d4:	003ee606 	br	8000c70 <__alt_data_end+0xfc000c70>
 80010d8:	3807883a 	mov	r3,r7
 80010dc:	003ee406 	br	8000c70 <__alt_data_end+0xfc000c70>
 80010e0:	00c00044 	movi	r3,1
 80010e4:	003fbd06 	br	8000fdc <__alt_data_end+0xfc000fdc>
 80010e8:	0005883a 	mov	r2,zero
 80010ec:	003f2806 	br	8000d90 <__alt_data_end+0xfc000d90>

080010f0 <__fixsfsi>:
 80010f0:	200ad5fa 	srli	r5,r4,23
 80010f4:	00c02034 	movhi	r3,128
 80010f8:	18ffffc4 	addi	r3,r3,-1
 80010fc:	29403fcc 	andi	r5,r5,255
 8001100:	00801f84 	movi	r2,126
 8001104:	1906703a 	and	r3,r3,r4
 8001108:	2008d7fa 	srli	r4,r4,31
 800110c:	11400e0e 	bge	r2,r5,8001148 <__fixsfsi+0x58>
 8001110:	00802744 	movi	r2,157
 8001114:	11400816 	blt	r2,r5,8001138 <__fixsfsi+0x48>
 8001118:	00802544 	movi	r2,149
 800111c:	18c02034 	orhi	r3,r3,128
 8001120:	11400b0e 	bge	r2,r5,8001150 <__fixsfsi+0x60>
 8001124:	28bfda84 	addi	r2,r5,-150
 8001128:	1884983a 	sll	r2,r3,r2
 800112c:	20000726 	beq	r4,zero,800114c <__fixsfsi+0x5c>
 8001130:	0085c83a 	sub	r2,zero,r2
 8001134:	f800283a 	ret
 8001138:	00a00034 	movhi	r2,32768
 800113c:	10bfffc4 	addi	r2,r2,-1
 8001140:	2085883a 	add	r2,r4,r2
 8001144:	f800283a 	ret
 8001148:	0005883a 	mov	r2,zero
 800114c:	f800283a 	ret
 8001150:	00802584 	movi	r2,150
 8001154:	1145c83a 	sub	r2,r2,r5
 8001158:	1884d83a 	srl	r2,r3,r2
 800115c:	003ff306 	br	800112c <__alt_data_end+0xfc00112c>

08001160 <__floatunsisf>:
 8001160:	defffe04 	addi	sp,sp,-8
 8001164:	dfc00115 	stw	ra,4(sp)
 8001168:	dc000015 	stw	r16,0(sp)
 800116c:	20002c26 	beq	r4,zero,8001220 <__floatunsisf+0xc0>
 8001170:	2021883a 	mov	r16,r4
 8001174:	80012500 	call	8001250 <__clzsi2>
 8001178:	00c02784 	movi	r3,158
 800117c:	1887c83a 	sub	r3,r3,r2
 8001180:	01002584 	movi	r4,150
 8001184:	20c00f16 	blt	r4,r3,80011c4 <__floatunsisf+0x64>
 8001188:	20c9c83a 	sub	r4,r4,r3
 800118c:	8108983a 	sll	r4,r16,r4
 8001190:	00802034 	movhi	r2,128
 8001194:	10bfffc4 	addi	r2,r2,-1
 8001198:	2088703a 	and	r4,r4,r2
 800119c:	18803fcc 	andi	r2,r3,255
 80011a0:	100695fa 	slli	r3,r2,23
 80011a4:	00802034 	movhi	r2,128
 80011a8:	10bfffc4 	addi	r2,r2,-1
 80011ac:	2084703a 	and	r2,r4,r2
 80011b0:	10c4b03a 	or	r2,r2,r3
 80011b4:	dfc00117 	ldw	ra,4(sp)
 80011b8:	dc000017 	ldw	r16,0(sp)
 80011bc:	dec00204 	addi	sp,sp,8
 80011c0:	f800283a 	ret
 80011c4:	01002644 	movi	r4,153
 80011c8:	20c01816 	blt	r4,r3,800122c <__floatunsisf+0xcc>
 80011cc:	20c9c83a 	sub	r4,r4,r3
 80011d0:	8108983a 	sll	r4,r16,r4
 80011d4:	017f0034 	movhi	r5,64512
 80011d8:	297fffc4 	addi	r5,r5,-1
 80011dc:	218001cc 	andi	r6,r4,7
 80011e0:	214a703a 	and	r5,r4,r5
 80011e4:	30000426 	beq	r6,zero,80011f8 <__floatunsisf+0x98>
 80011e8:	210003cc 	andi	r4,r4,15
 80011ec:	01800104 	movi	r6,4
 80011f0:	21800126 	beq	r4,r6,80011f8 <__floatunsisf+0x98>
 80011f4:	298b883a 	add	r5,r5,r6
 80011f8:	2901002c 	andhi	r4,r5,1024
 80011fc:	20000526 	beq	r4,zero,8001214 <__floatunsisf+0xb4>
 8001200:	00c027c4 	movi	r3,159
 8001204:	1887c83a 	sub	r3,r3,r2
 8001208:	00bf0034 	movhi	r2,64512
 800120c:	10bfffc4 	addi	r2,r2,-1
 8001210:	288a703a 	and	r5,r5,r2
 8001214:	280891ba 	slli	r4,r5,6
 8001218:	2008d27a 	srli	r4,r4,9
 800121c:	003fdf06 	br	800119c <__alt_data_end+0xfc00119c>
 8001220:	0007883a 	mov	r3,zero
 8001224:	0009883a 	mov	r4,zero
 8001228:	003fdc06 	br	800119c <__alt_data_end+0xfc00119c>
 800122c:	01402e44 	movi	r5,185
 8001230:	28cbc83a 	sub	r5,r5,r3
 8001234:	01000144 	movi	r4,5
 8001238:	2089c83a 	sub	r4,r4,r2
 800123c:	814a983a 	sll	r5,r16,r5
 8001240:	8108d83a 	srl	r4,r16,r4
 8001244:	2820c03a 	cmpne	r16,r5,zero
 8001248:	2408b03a 	or	r4,r4,r16
 800124c:	003fe106 	br	80011d4 <__alt_data_end+0xfc0011d4>

08001250 <__clzsi2>:
 8001250:	00bfffd4 	movui	r2,65535
 8001254:	11000536 	bltu	r2,r4,800126c <__clzsi2+0x1c>
 8001258:	00803fc4 	movi	r2,255
 800125c:	11000f36 	bltu	r2,r4,800129c <__clzsi2+0x4c>
 8001260:	00800804 	movi	r2,32
 8001264:	0007883a 	mov	r3,zero
 8001268:	00000506 	br	8001280 <__clzsi2+0x30>
 800126c:	00804034 	movhi	r2,256
 8001270:	10bfffc4 	addi	r2,r2,-1
 8001274:	11000c2e 	bgeu	r2,r4,80012a8 <__clzsi2+0x58>
 8001278:	00800204 	movi	r2,8
 800127c:	00c00604 	movi	r3,24
 8001280:	20c8d83a 	srl	r4,r4,r3
 8001284:	00c20074 	movhi	r3,2049
 8001288:	18c60004 	addi	r3,r3,6144
 800128c:	1909883a 	add	r4,r3,r4
 8001290:	20c00003 	ldbu	r3,0(r4)
 8001294:	10c5c83a 	sub	r2,r2,r3
 8001298:	f800283a 	ret
 800129c:	00800604 	movi	r2,24
 80012a0:	00c00204 	movi	r3,8
 80012a4:	003ff606 	br	8001280 <__alt_data_end+0xfc001280>
 80012a8:	00800404 	movi	r2,16
 80012ac:	1007883a 	mov	r3,r2
 80012b0:	003ff306 	br	8001280 <__alt_data_end+0xfc001280>

080012b4 <__mulsi3>:
 80012b4:	0005883a 	mov	r2,zero
 80012b8:	20000726 	beq	r4,zero,80012d8 <__mulsi3+0x24>
 80012bc:	20c0004c 	andi	r3,r4,1
 80012c0:	2008d07a 	srli	r4,r4,1
 80012c4:	18000126 	beq	r3,zero,80012cc <__mulsi3+0x18>
 80012c8:	1145883a 	add	r2,r2,r5
 80012cc:	294b883a 	add	r5,r5,r5
 80012d0:	203ffa1e 	bne	r4,zero,80012bc <__alt_data_end+0xfc0012bc>
 80012d4:	f800283a 	ret
 80012d8:	f800283a 	ret

080012dc <_printf_r>:
 80012dc:	defffd04 	addi	sp,sp,-12
 80012e0:	2805883a 	mov	r2,r5
 80012e4:	dfc00015 	stw	ra,0(sp)
 80012e8:	d9800115 	stw	r6,4(sp)
 80012ec:	d9c00215 	stw	r7,8(sp)
 80012f0:	21400217 	ldw	r5,8(r4)
 80012f4:	d9c00104 	addi	r7,sp,4
 80012f8:	100d883a 	mov	r6,r2
 80012fc:	80014b40 	call	80014b4 <___vfprintf_internal_r>
 8001300:	dfc00017 	ldw	ra,0(sp)
 8001304:	dec00304 	addi	sp,sp,12
 8001308:	f800283a 	ret

0800130c <printf>:
 800130c:	defffc04 	addi	sp,sp,-16
 8001310:	dfc00015 	stw	ra,0(sp)
 8001314:	d9400115 	stw	r5,4(sp)
 8001318:	d9800215 	stw	r6,8(sp)
 800131c:	d9c00315 	stw	r7,12(sp)
 8001320:	00820074 	movhi	r2,2049
 8001324:	10896304 	addi	r2,r2,9612
 8001328:	10800017 	ldw	r2,0(r2)
 800132c:	200b883a 	mov	r5,r4
 8001330:	d9800104 	addi	r6,sp,4
 8001334:	11000217 	ldw	r4,8(r2)
 8001338:	80037900 	call	8003790 <__vfprintf_internal>
 800133c:	dfc00017 	ldw	ra,0(sp)
 8001340:	dec00404 	addi	sp,sp,16
 8001344:	f800283a 	ret

08001348 <_puts_r>:
 8001348:	defff604 	addi	sp,sp,-40
 800134c:	dc000715 	stw	r16,28(sp)
 8001350:	2021883a 	mov	r16,r4
 8001354:	2809883a 	mov	r4,r5
 8001358:	dc400815 	stw	r17,32(sp)
 800135c:	dfc00915 	stw	ra,36(sp)
 8001360:	2823883a 	mov	r17,r5
 8001364:	800141c0 	call	800141c <strlen>
 8001368:	10c00044 	addi	r3,r2,1
 800136c:	d8800115 	stw	r2,4(sp)
 8001370:	00820074 	movhi	r2,2049
 8001374:	10864004 	addi	r2,r2,6400
 8001378:	d8800215 	stw	r2,8(sp)
 800137c:	00800044 	movi	r2,1
 8001380:	d8800315 	stw	r2,12(sp)
 8001384:	00800084 	movi	r2,2
 8001388:	dc400015 	stw	r17,0(sp)
 800138c:	d8c00615 	stw	r3,24(sp)
 8001390:	dec00415 	stw	sp,16(sp)
 8001394:	d8800515 	stw	r2,20(sp)
 8001398:	80000226 	beq	r16,zero,80013a4 <_puts_r+0x5c>
 800139c:	80800e17 	ldw	r2,56(r16)
 80013a0:	10001426 	beq	r2,zero,80013f4 <_puts_r+0xac>
 80013a4:	81400217 	ldw	r5,8(r16)
 80013a8:	2880030b 	ldhu	r2,12(r5)
 80013ac:	10c8000c 	andi	r3,r2,8192
 80013b0:	1800061e 	bne	r3,zero,80013cc <_puts_r+0x84>
 80013b4:	29001917 	ldw	r4,100(r5)
 80013b8:	00f7ffc4 	movi	r3,-8193
 80013bc:	10880014 	ori	r2,r2,8192
 80013c0:	20c6703a 	and	r3,r4,r3
 80013c4:	2880030d 	sth	r2,12(r5)
 80013c8:	28c01915 	stw	r3,100(r5)
 80013cc:	d9800404 	addi	r6,sp,16
 80013d0:	8009883a 	mov	r4,r16
 80013d4:	8005cf80 	call	8005cf8 <__sfvwrite_r>
 80013d8:	1000091e 	bne	r2,zero,8001400 <_puts_r+0xb8>
 80013dc:	00800284 	movi	r2,10
 80013e0:	dfc00917 	ldw	ra,36(sp)
 80013e4:	dc400817 	ldw	r17,32(sp)
 80013e8:	dc000717 	ldw	r16,28(sp)
 80013ec:	dec00a04 	addi	sp,sp,40
 80013f0:	f800283a 	ret
 80013f4:	8009883a 	mov	r4,r16
 80013f8:	80058740 	call	8005874 <__sinit>
 80013fc:	003fe906 	br	80013a4 <__alt_data_end+0xfc0013a4>
 8001400:	00bfffc4 	movi	r2,-1
 8001404:	003ff606 	br	80013e0 <__alt_data_end+0xfc0013e0>

08001408 <puts>:
 8001408:	00820074 	movhi	r2,2049
 800140c:	10896304 	addi	r2,r2,9612
 8001410:	200b883a 	mov	r5,r4
 8001414:	11000017 	ldw	r4,0(r2)
 8001418:	80013481 	jmpi	8001348 <_puts_r>

0800141c <strlen>:
 800141c:	208000cc 	andi	r2,r4,3
 8001420:	10002026 	beq	r2,zero,80014a4 <strlen+0x88>
 8001424:	20800007 	ldb	r2,0(r4)
 8001428:	10002026 	beq	r2,zero,80014ac <strlen+0x90>
 800142c:	2005883a 	mov	r2,r4
 8001430:	00000206 	br	800143c <strlen+0x20>
 8001434:	10c00007 	ldb	r3,0(r2)
 8001438:	18001826 	beq	r3,zero,800149c <strlen+0x80>
 800143c:	10800044 	addi	r2,r2,1
 8001440:	10c000cc 	andi	r3,r2,3
 8001444:	183ffb1e 	bne	r3,zero,8001434 <__alt_data_end+0xfc001434>
 8001448:	10c00017 	ldw	r3,0(r2)
 800144c:	01ffbff4 	movhi	r7,65279
 8001450:	39ffbfc4 	addi	r7,r7,-257
 8001454:	00ca303a 	nor	r5,zero,r3
 8001458:	01a02074 	movhi	r6,32897
 800145c:	19c7883a 	add	r3,r3,r7
 8001460:	31a02004 	addi	r6,r6,-32640
 8001464:	1946703a 	and	r3,r3,r5
 8001468:	1986703a 	and	r3,r3,r6
 800146c:	1800091e 	bne	r3,zero,8001494 <strlen+0x78>
 8001470:	10800104 	addi	r2,r2,4
 8001474:	10c00017 	ldw	r3,0(r2)
 8001478:	19cb883a 	add	r5,r3,r7
 800147c:	00c6303a 	nor	r3,zero,r3
 8001480:	28c6703a 	and	r3,r5,r3
 8001484:	1986703a 	and	r3,r3,r6
 8001488:	183ff926 	beq	r3,zero,8001470 <__alt_data_end+0xfc001470>
 800148c:	00000106 	br	8001494 <strlen+0x78>
 8001490:	10800044 	addi	r2,r2,1
 8001494:	10c00007 	ldb	r3,0(r2)
 8001498:	183ffd1e 	bne	r3,zero,8001490 <__alt_data_end+0xfc001490>
 800149c:	1105c83a 	sub	r2,r2,r4
 80014a0:	f800283a 	ret
 80014a4:	2005883a 	mov	r2,r4
 80014a8:	003fe706 	br	8001448 <__alt_data_end+0xfc001448>
 80014ac:	0005883a 	mov	r2,zero
 80014b0:	f800283a 	ret

080014b4 <___vfprintf_internal_r>:
 80014b4:	deffb804 	addi	sp,sp,-288
 80014b8:	dfc04715 	stw	ra,284(sp)
 80014bc:	ddc04515 	stw	r23,276(sp)
 80014c0:	dd404315 	stw	r21,268(sp)
 80014c4:	d9002d15 	stw	r4,180(sp)
 80014c8:	282f883a 	mov	r23,r5
 80014cc:	302b883a 	mov	r21,r6
 80014d0:	d9c02e15 	stw	r7,184(sp)
 80014d4:	df004615 	stw	fp,280(sp)
 80014d8:	dd804415 	stw	r22,272(sp)
 80014dc:	dd004215 	stw	r20,264(sp)
 80014e0:	dcc04115 	stw	r19,260(sp)
 80014e4:	dc804015 	stw	r18,256(sp)
 80014e8:	dc403f15 	stw	r17,252(sp)
 80014ec:	dc003e15 	stw	r16,248(sp)
 80014f0:	80063f40 	call	80063f4 <_localeconv_r>
 80014f4:	10800017 	ldw	r2,0(r2)
 80014f8:	1009883a 	mov	r4,r2
 80014fc:	d8803415 	stw	r2,208(sp)
 8001500:	800141c0 	call	800141c <strlen>
 8001504:	d8803715 	stw	r2,220(sp)
 8001508:	d8802d17 	ldw	r2,180(sp)
 800150c:	10000226 	beq	r2,zero,8001518 <___vfprintf_internal_r+0x64>
 8001510:	10800e17 	ldw	r2,56(r2)
 8001514:	1000fb26 	beq	r2,zero,8001904 <___vfprintf_internal_r+0x450>
 8001518:	b880030b 	ldhu	r2,12(r23)
 800151c:	10c8000c 	andi	r3,r2,8192
 8001520:	1800061e 	bne	r3,zero,800153c <___vfprintf_internal_r+0x88>
 8001524:	b9001917 	ldw	r4,100(r23)
 8001528:	00f7ffc4 	movi	r3,-8193
 800152c:	10880014 	ori	r2,r2,8192
 8001530:	20c6703a 	and	r3,r4,r3
 8001534:	b880030d 	sth	r2,12(r23)
 8001538:	b8c01915 	stw	r3,100(r23)
 800153c:	10c0020c 	andi	r3,r2,8
 8001540:	1800c326 	beq	r3,zero,8001850 <___vfprintf_internal_r+0x39c>
 8001544:	b8c00417 	ldw	r3,16(r23)
 8001548:	1800c126 	beq	r3,zero,8001850 <___vfprintf_internal_r+0x39c>
 800154c:	1080068c 	andi	r2,r2,26
 8001550:	00c00284 	movi	r3,10
 8001554:	10c0c626 	beq	r2,r3,8001870 <___vfprintf_internal_r+0x3bc>
 8001558:	d8c00404 	addi	r3,sp,16
 800155c:	05020074 	movhi	r20,2049
 8001560:	d9001e04 	addi	r4,sp,120
 8001564:	a5065184 	addi	r20,r20,6470
 8001568:	d8c01e15 	stw	r3,120(sp)
 800156c:	d8002015 	stw	zero,128(sp)
 8001570:	d8001f15 	stw	zero,124(sp)
 8001574:	d8003315 	stw	zero,204(sp)
 8001578:	d8003615 	stw	zero,216(sp)
 800157c:	d8003815 	stw	zero,224(sp)
 8001580:	1811883a 	mov	r8,r3
 8001584:	d8003915 	stw	zero,228(sp)
 8001588:	d8003a15 	stw	zero,232(sp)
 800158c:	d8002f15 	stw	zero,188(sp)
 8001590:	d9002815 	stw	r4,160(sp)
 8001594:	a8800007 	ldb	r2,0(r21)
 8001598:	10028b26 	beq	r2,zero,8001fc8 <___vfprintf_internal_r+0xb14>
 800159c:	00c00944 	movi	r3,37
 80015a0:	a823883a 	mov	r17,r21
 80015a4:	10c0021e 	bne	r2,r3,80015b0 <___vfprintf_internal_r+0xfc>
 80015a8:	00001406 	br	80015fc <___vfprintf_internal_r+0x148>
 80015ac:	10c00326 	beq	r2,r3,80015bc <___vfprintf_internal_r+0x108>
 80015b0:	8c400044 	addi	r17,r17,1
 80015b4:	88800007 	ldb	r2,0(r17)
 80015b8:	103ffc1e 	bne	r2,zero,80015ac <__alt_data_end+0xfc0015ac>
 80015bc:	8d61c83a 	sub	r16,r17,r21
 80015c0:	80000e26 	beq	r16,zero,80015fc <___vfprintf_internal_r+0x148>
 80015c4:	d8c02017 	ldw	r3,128(sp)
 80015c8:	d8801f17 	ldw	r2,124(sp)
 80015cc:	45400015 	stw	r21,0(r8)
 80015d0:	1c07883a 	add	r3,r3,r16
 80015d4:	10800044 	addi	r2,r2,1
 80015d8:	d8c02015 	stw	r3,128(sp)
 80015dc:	44000115 	stw	r16,4(r8)
 80015e0:	d8801f15 	stw	r2,124(sp)
 80015e4:	00c001c4 	movi	r3,7
 80015e8:	1880a916 	blt	r3,r2,8001890 <___vfprintf_internal_r+0x3dc>
 80015ec:	42000204 	addi	r8,r8,8
 80015f0:	d9402f17 	ldw	r5,188(sp)
 80015f4:	2c0b883a 	add	r5,r5,r16
 80015f8:	d9402f15 	stw	r5,188(sp)
 80015fc:	88800007 	ldb	r2,0(r17)
 8001600:	1000aa26 	beq	r2,zero,80018ac <___vfprintf_internal_r+0x3f8>
 8001604:	8d400044 	addi	r21,r17,1
 8001608:	8c400047 	ldb	r17,1(r17)
 800160c:	0021883a 	mov	r16,zero
 8001610:	00bfffc4 	movi	r2,-1
 8001614:	0025883a 	mov	r18,zero
 8001618:	dc002905 	stb	r16,164(sp)
 800161c:	d8002785 	stb	zero,158(sp)
 8001620:	d8002b05 	stb	zero,172(sp)
 8001624:	d8802a15 	stw	r2,168(sp)
 8001628:	d8003115 	stw	zero,196(sp)
 800162c:	04c01604 	movi	r19,88
 8001630:	05800244 	movi	r22,9
 8001634:	9021883a 	mov	r16,r18
 8001638:	4039883a 	mov	fp,r8
 800163c:	ad400044 	addi	r21,r21,1
 8001640:	88bff804 	addi	r2,r17,-32
 8001644:	98833236 	bltu	r19,r2,8002310 <___vfprintf_internal_r+0xe5c>
 8001648:	100490ba 	slli	r2,r2,2
 800164c:	00c20034 	movhi	r3,2048
 8001650:	18c59804 	addi	r3,r3,5728
 8001654:	10c5883a 	add	r2,r2,r3
 8001658:	10800017 	ldw	r2,0(r2)
 800165c:	1000683a 	jmp	r2
 8001660:	08002208 	cmpgei	zero,at,136
 8001664:	08002310 	cmplti	zero,at,140
 8001668:	08002310 	cmplti	zero,at,140
 800166c:	08002228 	cmpgeui	zero,at,136
 8001670:	08002310 	cmplti	zero,at,140
 8001674:	08002310 	cmplti	zero,at,140
 8001678:	08002310 	cmplti	zero,at,140
 800167c:	08002310 	cmplti	zero,at,140
 8001680:	08002310 	cmplti	zero,at,140
 8001684:	08002310 	cmplti	zero,at,140
 8001688:	08001910 	cmplti	zero,at,100
 800168c:	08002118 	cmpnei	zero,at,132
 8001690:	08002310 	cmplti	zero,at,140
 8001694:	080017d4 	ori	zero,at,95
 8001698:	08001934 	orhi	zero,at,100
 800169c:	08002310 	cmplti	zero,at,140
 80016a0:	08001984 	addi	zero,at,102
 80016a4:	08001990 	cmplti	zero,at,102
 80016a8:	08001990 	cmplti	zero,at,102
 80016ac:	08001990 	cmplti	zero,at,102
 80016b0:	08001990 	cmplti	zero,at,102
 80016b4:	08001990 	cmplti	zero,at,102
 80016b8:	08001990 	cmplti	zero,at,102
 80016bc:	08001990 	cmplti	zero,at,102
 80016c0:	08001990 	cmplti	zero,at,102
 80016c4:	08001990 	cmplti	zero,at,102
 80016c8:	08002310 	cmplti	zero,at,140
 80016cc:	08002310 	cmplti	zero,at,140
 80016d0:	08002310 	cmplti	zero,at,140
 80016d4:	08002310 	cmplti	zero,at,140
 80016d8:	08002310 	cmplti	zero,at,140
 80016dc:	08002310 	cmplti	zero,at,140
 80016e0:	08002310 	cmplti	zero,at,140
 80016e4:	08002310 	cmplti	zero,at,140
 80016e8:	08002310 	cmplti	zero,at,140
 80016ec:	08002310 	cmplti	zero,at,140
 80016f0:	080019cc 	andi	zero,at,103
 80016f4:	08001a94 	ori	zero,at,106
 80016f8:	08002310 	cmplti	zero,at,140
 80016fc:	08001a94 	ori	zero,at,106
 8001700:	08002310 	cmplti	zero,at,140
 8001704:	08002310 	cmplti	zero,at,140
 8001708:	08002310 	cmplti	zero,at,140
 800170c:	08002310 	cmplti	zero,at,140
 8001710:	08001b40 	call	8001b4 <__alt_mem_onchip_memory2_0+0x8001b4>
 8001714:	08002310 	cmplti	zero,at,140
 8001718:	08002310 	cmplti	zero,at,140
 800171c:	08001b4c 	andi	zero,at,109
 8001720:	08002310 	cmplti	zero,at,140
 8001724:	08002310 	cmplti	zero,at,140
 8001728:	08002310 	cmplti	zero,at,140
 800172c:	08002310 	cmplti	zero,at,140
 8001730:	08002310 	cmplti	zero,at,140
 8001734:	08001fd0 	cmplti	zero,at,127
 8001738:	08002310 	cmplti	zero,at,140
 800173c:	08002310 	cmplti	zero,at,140
 8001740:	0800203c 	xorhi	zero,at,128
 8001744:	08002310 	cmplti	zero,at,140
 8001748:	08002310 	cmplti	zero,at,140
 800174c:	08002310 	cmplti	zero,at,140
 8001750:	08002310 	cmplti	zero,at,140
 8001754:	08002310 	cmplti	zero,at,140
 8001758:	08002310 	cmplti	zero,at,140
 800175c:	08002310 	cmplti	zero,at,140
 8001760:	08002310 	cmplti	zero,at,140
 8001764:	08002310 	cmplti	zero,at,140
 8001768:	08002310 	cmplti	zero,at,140
 800176c:	080022b4 	orhi	zero,at,138
 8001770:	08002234 	orhi	zero,at,136
 8001774:	08001a94 	ori	zero,at,106
 8001778:	08001a94 	ori	zero,at,106
 800177c:	08001a94 	ori	zero,at,106
 8001780:	08002254 	ori	zero,at,137
 8001784:	08002234 	orhi	zero,at,136
 8001788:	08002310 	cmplti	zero,at,140
 800178c:	08002310 	cmplti	zero,at,140
 8001790:	08002260 	cmpeqi	zero,at,137
 8001794:	08002310 	cmplti	zero,at,140
 8001798:	08002274 	orhi	zero,at,137
 800179c:	080020f8 	rdprs	zero,at,131
 80017a0:	080017e0 	cmpeqi	zero,at,95
 80017a4:	08002130 	cmpltui	zero,at,132
 80017a8:	08002310 	cmplti	zero,at,140
 80017ac:	0800213c 	xorhi	zero,at,132
 80017b0:	08002310 	cmplti	zero,at,140
 80017b4:	080021a0 	cmpeqi	zero,at,134
 80017b8:	08002310 	cmplti	zero,at,140
 80017bc:	08002310 	cmplti	zero,at,140
 80017c0:	080021c0 	call	80021c <__alt_mem_onchip_memory2_0+0x80021c>
 80017c4:	d8c03117 	ldw	r3,196(sp)
 80017c8:	d8802e15 	stw	r2,184(sp)
 80017cc:	00c7c83a 	sub	r3,zero,r3
 80017d0:	d8c03115 	stw	r3,196(sp)
 80017d4:	84000114 	ori	r16,r16,4
 80017d8:	ac400007 	ldb	r17,0(r21)
 80017dc:	003f9706 	br	800163c <__alt_data_end+0xfc00163c>
 80017e0:	00800c04 	movi	r2,48
 80017e4:	d8802705 	stb	r2,156(sp)
 80017e8:	00801e04 	movi	r2,120
 80017ec:	d8802745 	stb	r2,157(sp)
 80017f0:	d9002a17 	ldw	r4,168(sp)
 80017f4:	d8802e17 	ldw	r2,184(sp)
 80017f8:	d8002785 	stb	zero,158(sp)
 80017fc:	e011883a 	mov	r8,fp
 8001800:	10c00104 	addi	r3,r2,4
 8001804:	14c00017 	ldw	r19,0(r2)
 8001808:	002d883a 	mov	r22,zero
 800180c:	80800094 	ori	r2,r16,2
 8001810:	2002ca16 	blt	r4,zero,800233c <___vfprintf_internal_r+0xe88>
 8001814:	00bfdfc4 	movi	r2,-129
 8001818:	80a4703a 	and	r18,r16,r2
 800181c:	d8c02e15 	stw	r3,184(sp)
 8001820:	94800094 	ori	r18,r18,2
 8001824:	9802b41e 	bne	r19,zero,80022f8 <___vfprintf_internal_r+0xe44>
 8001828:	01420074 	movhi	r5,2049
 800182c:	29464a04 	addi	r5,r5,6440
 8001830:	d9403915 	stw	r5,228(sp)
 8001834:	04401e04 	movi	r17,120
 8001838:	d8802a17 	ldw	r2,168(sp)
 800183c:	0039883a 	mov	fp,zero
 8001840:	1001fa26 	beq	r2,zero,800202c <___vfprintf_internal_r+0xb78>
 8001844:	0027883a 	mov	r19,zero
 8001848:	002d883a 	mov	r22,zero
 800184c:	00021906 	br	80020b4 <___vfprintf_internal_r+0xc00>
 8001850:	d9002d17 	ldw	r4,180(sp)
 8001854:	b80b883a 	mov	r5,r23
 8001858:	80038680 	call	8003868 <__swsetup_r>
 800185c:	1005dc1e 	bne	r2,zero,8002fd0 <___vfprintf_internal_r+0x1b1c>
 8001860:	b880030b 	ldhu	r2,12(r23)
 8001864:	00c00284 	movi	r3,10
 8001868:	1080068c 	andi	r2,r2,26
 800186c:	10ff3a1e 	bne	r2,r3,8001558 <__alt_data_end+0xfc001558>
 8001870:	b880038f 	ldh	r2,14(r23)
 8001874:	103f3816 	blt	r2,zero,8001558 <__alt_data_end+0xfc001558>
 8001878:	d9c02e17 	ldw	r7,184(sp)
 800187c:	d9002d17 	ldw	r4,180(sp)
 8001880:	a80d883a 	mov	r6,r21
 8001884:	b80b883a 	mov	r5,r23
 8001888:	80037ac0 	call	80037ac <__sbprintf>
 800188c:	00001106 	br	80018d4 <___vfprintf_internal_r+0x420>
 8001890:	d9002d17 	ldw	r4,180(sp)
 8001894:	d9801e04 	addi	r6,sp,120
 8001898:	b80b883a 	mov	r5,r23
 800189c:	8008c940 	call	8008c94 <__sprint_r>
 80018a0:	1000081e 	bne	r2,zero,80018c4 <___vfprintf_internal_r+0x410>
 80018a4:	da000404 	addi	r8,sp,16
 80018a8:	003f5106 	br	80015f0 <__alt_data_end+0xfc0015f0>
 80018ac:	d8802017 	ldw	r2,128(sp)
 80018b0:	10000426 	beq	r2,zero,80018c4 <___vfprintf_internal_r+0x410>
 80018b4:	d9002d17 	ldw	r4,180(sp)
 80018b8:	d9801e04 	addi	r6,sp,120
 80018bc:	b80b883a 	mov	r5,r23
 80018c0:	8008c940 	call	8008c94 <__sprint_r>
 80018c4:	b880030b 	ldhu	r2,12(r23)
 80018c8:	1080100c 	andi	r2,r2,64
 80018cc:	1005c01e 	bne	r2,zero,8002fd0 <___vfprintf_internal_r+0x1b1c>
 80018d0:	d8802f17 	ldw	r2,188(sp)
 80018d4:	dfc04717 	ldw	ra,284(sp)
 80018d8:	df004617 	ldw	fp,280(sp)
 80018dc:	ddc04517 	ldw	r23,276(sp)
 80018e0:	dd804417 	ldw	r22,272(sp)
 80018e4:	dd404317 	ldw	r21,268(sp)
 80018e8:	dd004217 	ldw	r20,264(sp)
 80018ec:	dcc04117 	ldw	r19,260(sp)
 80018f0:	dc804017 	ldw	r18,256(sp)
 80018f4:	dc403f17 	ldw	r17,252(sp)
 80018f8:	dc003e17 	ldw	r16,248(sp)
 80018fc:	dec04804 	addi	sp,sp,288
 8001900:	f800283a 	ret
 8001904:	d9002d17 	ldw	r4,180(sp)
 8001908:	80058740 	call	8005874 <__sinit>
 800190c:	003f0206 	br	8001518 <__alt_data_end+0xfc001518>
 8001910:	d9002e17 	ldw	r4,184(sp)
 8001914:	d9402e17 	ldw	r5,184(sp)
 8001918:	21000017 	ldw	r4,0(r4)
 800191c:	28800104 	addi	r2,r5,4
 8001920:	d9003115 	stw	r4,196(sp)
 8001924:	203fa716 	blt	r4,zero,80017c4 <__alt_data_end+0xfc0017c4>
 8001928:	d8802e15 	stw	r2,184(sp)
 800192c:	ac400007 	ldb	r17,0(r21)
 8001930:	003f4206 	br	800163c <__alt_data_end+0xfc00163c>
 8001934:	ac400007 	ldb	r17,0(r21)
 8001938:	01000a84 	movi	r4,42
 800193c:	a8c00044 	addi	r3,r21,1
 8001940:	89075826 	beq	r17,r4,80036a4 <___vfprintf_internal_r+0x21f0>
 8001944:	8cbff404 	addi	r18,r17,-48
 8001948:	b486ae36 	bltu	r22,r18,8003404 <___vfprintf_internal_r+0x1f50>
 800194c:	0009883a 	mov	r4,zero
 8001950:	1823883a 	mov	r17,r3
 8001954:	01400284 	movi	r5,10
 8001958:	80012b40 	call	80012b4 <__mulsi3>
 800195c:	88c00007 	ldb	r3,0(r17)
 8001960:	1489883a 	add	r4,r2,r18
 8001964:	8d400044 	addi	r21,r17,1
 8001968:	1cbff404 	addi	r18,r3,-48
 800196c:	a823883a 	mov	r17,r21
 8001970:	b4bff82e 	bgeu	r22,r18,8001954 <__alt_data_end+0xfc001954>
 8001974:	1823883a 	mov	r17,r3
 8001978:	2005f616 	blt	r4,zero,8003154 <___vfprintf_internal_r+0x1ca0>
 800197c:	d9002a15 	stw	r4,168(sp)
 8001980:	003f2f06 	br	8001640 <__alt_data_end+0xfc001640>
 8001984:	84002014 	ori	r16,r16,128
 8001988:	ac400007 	ldb	r17,0(r21)
 800198c:	003f2b06 	br	800163c <__alt_data_end+0xfc00163c>
 8001990:	8cbff404 	addi	r18,r17,-48
 8001994:	d8003115 	stw	zero,196(sp)
 8001998:	0009883a 	mov	r4,zero
 800199c:	a823883a 	mov	r17,r21
 80019a0:	01400284 	movi	r5,10
 80019a4:	80012b40 	call	80012b4 <__mulsi3>
 80019a8:	88c00007 	ldb	r3,0(r17)
 80019ac:	9089883a 	add	r4,r18,r2
 80019b0:	ad400044 	addi	r21,r21,1
 80019b4:	1cbff404 	addi	r18,r3,-48
 80019b8:	a823883a 	mov	r17,r21
 80019bc:	b4bff82e 	bgeu	r22,r18,80019a0 <__alt_data_end+0xfc0019a0>
 80019c0:	1823883a 	mov	r17,r3
 80019c4:	d9003115 	stw	r4,196(sp)
 80019c8:	003f1d06 	br	8001640 <__alt_data_end+0xfc001640>
 80019cc:	8025883a 	mov	r18,r16
 80019d0:	dc002903 	ldbu	r16,164(sp)
 80019d4:	e011883a 	mov	r8,fp
 80019d8:	84003fcc 	andi	r16,r16,255
 80019dc:	8007531e 	bne	r16,zero,800372c <___vfprintf_internal_r+0x2278>
 80019e0:	94800414 	ori	r18,r18,16
 80019e4:	9080080c 	andi	r2,r18,32
 80019e8:	1003a326 	beq	r2,zero,8002878 <___vfprintf_internal_r+0x13c4>
 80019ec:	d9002e17 	ldw	r4,184(sp)
 80019f0:	20800117 	ldw	r2,4(r4)
 80019f4:	24c00017 	ldw	r19,0(r4)
 80019f8:	21000204 	addi	r4,r4,8
 80019fc:	d9002e15 	stw	r4,184(sp)
 8001a00:	102d883a 	mov	r22,r2
 8001a04:	10047316 	blt	r2,zero,8002bd4 <___vfprintf_internal_r+0x1720>
 8001a08:	d9002a17 	ldw	r4,168(sp)
 8001a0c:	df002783 	ldbu	fp,158(sp)
 8001a10:	2003e416 	blt	r4,zero,80029a4 <___vfprintf_internal_r+0x14f0>
 8001a14:	00ffdfc4 	movi	r3,-129
 8001a18:	9d84b03a 	or	r2,r19,r22
 8001a1c:	90e4703a 	and	r18,r18,r3
 8001a20:	10018026 	beq	r2,zero,8002024 <___vfprintf_internal_r+0xb70>
 8001a24:	b003ab26 	beq	r22,zero,80028d4 <___vfprintf_internal_r+0x1420>
 8001a28:	dc402915 	stw	r17,164(sp)
 8001a2c:	dc001e04 	addi	r16,sp,120
 8001a30:	b023883a 	mov	r17,r22
 8001a34:	402d883a 	mov	r22,r8
 8001a38:	9809883a 	mov	r4,r19
 8001a3c:	880b883a 	mov	r5,r17
 8001a40:	01800284 	movi	r6,10
 8001a44:	000f883a 	mov	r7,zero
 8001a48:	800b1d80 	call	800b1d8 <__umoddi3>
 8001a4c:	10800c04 	addi	r2,r2,48
 8001a50:	843fffc4 	addi	r16,r16,-1
 8001a54:	9809883a 	mov	r4,r19
 8001a58:	880b883a 	mov	r5,r17
 8001a5c:	80800005 	stb	r2,0(r16)
 8001a60:	01800284 	movi	r6,10
 8001a64:	000f883a 	mov	r7,zero
 8001a68:	800abdc0 	call	800abdc <__udivdi3>
 8001a6c:	1027883a 	mov	r19,r2
 8001a70:	10c4b03a 	or	r2,r2,r3
 8001a74:	1823883a 	mov	r17,r3
 8001a78:	103fef1e 	bne	r2,zero,8001a38 <__alt_data_end+0xfc001a38>
 8001a7c:	d8c02817 	ldw	r3,160(sp)
 8001a80:	dc402917 	ldw	r17,164(sp)
 8001a84:	b011883a 	mov	r8,r22
 8001a88:	1c07c83a 	sub	r3,r3,r16
 8001a8c:	d8c02b15 	stw	r3,172(sp)
 8001a90:	00005f06 	br	8001c10 <___vfprintf_internal_r+0x75c>
 8001a94:	8025883a 	mov	r18,r16
 8001a98:	dc002903 	ldbu	r16,164(sp)
 8001a9c:	e011883a 	mov	r8,fp
 8001aa0:	84003fcc 	andi	r16,r16,255
 8001aa4:	80071e1e 	bne	r16,zero,8003720 <___vfprintf_internal_r+0x226c>
 8001aa8:	9080020c 	andi	r2,r18,8
 8001aac:	1004af26 	beq	r2,zero,8002d6c <___vfprintf_internal_r+0x18b8>
 8001ab0:	d9002e17 	ldw	r4,184(sp)
 8001ab4:	d9402e17 	ldw	r5,184(sp)
 8001ab8:	d8802e17 	ldw	r2,184(sp)
 8001abc:	21000017 	ldw	r4,0(r4)
 8001ac0:	29400117 	ldw	r5,4(r5)
 8001ac4:	10800204 	addi	r2,r2,8
 8001ac8:	d9003615 	stw	r4,216(sp)
 8001acc:	d9403815 	stw	r5,224(sp)
 8001ad0:	d8802e15 	stw	r2,184(sp)
 8001ad4:	d9003617 	ldw	r4,216(sp)
 8001ad8:	d9403817 	ldw	r5,224(sp)
 8001adc:	da003d15 	stw	r8,244(sp)
 8001ae0:	04000044 	movi	r16,1
 8001ae4:	80088b80 	call	80088b8 <__fpclassifyd>
 8001ae8:	da003d17 	ldw	r8,244(sp)
 8001aec:	1404441e 	bne	r2,r16,8002c00 <___vfprintf_internal_r+0x174c>
 8001af0:	d9003617 	ldw	r4,216(sp)
 8001af4:	d9403817 	ldw	r5,224(sp)
 8001af8:	000d883a 	mov	r6,zero
 8001afc:	000f883a 	mov	r7,zero
 8001b00:	800cd300 	call	800cd30 <__ledf2>
 8001b04:	da003d17 	ldw	r8,244(sp)
 8001b08:	1005e316 	blt	r2,zero,8003298 <___vfprintf_internal_r+0x1de4>
 8001b0c:	df002783 	ldbu	fp,158(sp)
 8001b10:	008011c4 	movi	r2,71
 8001b14:	1445580e 	bge	r2,r17,8003078 <___vfprintf_internal_r+0x1bc4>
 8001b18:	04020074 	movhi	r16,2049
 8001b1c:	84064204 	addi	r16,r16,6408
 8001b20:	00c000c4 	movi	r3,3
 8001b24:	00bfdfc4 	movi	r2,-129
 8001b28:	d8c02915 	stw	r3,164(sp)
 8001b2c:	90a4703a 	and	r18,r18,r2
 8001b30:	d8c02b15 	stw	r3,172(sp)
 8001b34:	d8002a15 	stw	zero,168(sp)
 8001b38:	d8003215 	stw	zero,200(sp)
 8001b3c:	00003a06 	br	8001c28 <___vfprintf_internal_r+0x774>
 8001b40:	84000214 	ori	r16,r16,8
 8001b44:	ac400007 	ldb	r17,0(r21)
 8001b48:	003ebc06 	br	800163c <__alt_data_end+0xfc00163c>
 8001b4c:	8025883a 	mov	r18,r16
 8001b50:	dc002903 	ldbu	r16,164(sp)
 8001b54:	e011883a 	mov	r8,fp
 8001b58:	84003fcc 	andi	r16,r16,255
 8001b5c:	8007001e 	bne	r16,zero,8003760 <___vfprintf_internal_r+0x22ac>
 8001b60:	94800414 	ori	r18,r18,16
 8001b64:	9080080c 	andi	r2,r18,32
 8001b68:	1002fa26 	beq	r2,zero,8002754 <___vfprintf_internal_r+0x12a0>
 8001b6c:	d9002e17 	ldw	r4,184(sp)
 8001b70:	d9402a17 	ldw	r5,168(sp)
 8001b74:	d8002785 	stb	zero,158(sp)
 8001b78:	20800204 	addi	r2,r4,8
 8001b7c:	24c00017 	ldw	r19,0(r4)
 8001b80:	25800117 	ldw	r22,4(r4)
 8001b84:	2804b116 	blt	r5,zero,8002e4c <___vfprintf_internal_r+0x1998>
 8001b88:	013fdfc4 	movi	r4,-129
 8001b8c:	9d86b03a 	or	r3,r19,r22
 8001b90:	d8802e15 	stw	r2,184(sp)
 8001b94:	9124703a 	and	r18,r18,r4
 8001b98:	1802fb1e 	bne	r3,zero,8002788 <___vfprintf_internal_r+0x12d4>
 8001b9c:	d8c02a17 	ldw	r3,168(sp)
 8001ba0:	0039883a 	mov	fp,zero
 8001ba4:	1805e526 	beq	r3,zero,800333c <___vfprintf_internal_r+0x1e88>
 8001ba8:	0027883a 	mov	r19,zero
 8001bac:	002d883a 	mov	r22,zero
 8001bb0:	dc001e04 	addi	r16,sp,120
 8001bb4:	9806d0fa 	srli	r3,r19,3
 8001bb8:	b008977a 	slli	r4,r22,29
 8001bbc:	b02cd0fa 	srli	r22,r22,3
 8001bc0:	9cc001cc 	andi	r19,r19,7
 8001bc4:	98800c04 	addi	r2,r19,48
 8001bc8:	843fffc4 	addi	r16,r16,-1
 8001bcc:	20e6b03a 	or	r19,r4,r3
 8001bd0:	80800005 	stb	r2,0(r16)
 8001bd4:	9d86b03a 	or	r3,r19,r22
 8001bd8:	183ff61e 	bne	r3,zero,8001bb4 <__alt_data_end+0xfc001bb4>
 8001bdc:	90c0004c 	andi	r3,r18,1
 8001be0:	18014126 	beq	r3,zero,80020e8 <___vfprintf_internal_r+0xc34>
 8001be4:	10803fcc 	andi	r2,r2,255
 8001be8:	1080201c 	xori	r2,r2,128
 8001bec:	10bfe004 	addi	r2,r2,-128
 8001bf0:	00c00c04 	movi	r3,48
 8001bf4:	10c13c26 	beq	r2,r3,80020e8 <___vfprintf_internal_r+0xc34>
 8001bf8:	80ffffc5 	stb	r3,-1(r16)
 8001bfc:	d8c02817 	ldw	r3,160(sp)
 8001c00:	80bfffc4 	addi	r2,r16,-1
 8001c04:	1021883a 	mov	r16,r2
 8001c08:	1887c83a 	sub	r3,r3,r2
 8001c0c:	d8c02b15 	stw	r3,172(sp)
 8001c10:	d8802b17 	ldw	r2,172(sp)
 8001c14:	d9002a17 	ldw	r4,168(sp)
 8001c18:	1100010e 	bge	r2,r4,8001c20 <___vfprintf_internal_r+0x76c>
 8001c1c:	2005883a 	mov	r2,r4
 8001c20:	d8802915 	stw	r2,164(sp)
 8001c24:	d8003215 	stw	zero,200(sp)
 8001c28:	e7003fcc 	andi	fp,fp,255
 8001c2c:	e700201c 	xori	fp,fp,128
 8001c30:	e73fe004 	addi	fp,fp,-128
 8001c34:	e0000326 	beq	fp,zero,8001c44 <___vfprintf_internal_r+0x790>
 8001c38:	d8c02917 	ldw	r3,164(sp)
 8001c3c:	18c00044 	addi	r3,r3,1
 8001c40:	d8c02915 	stw	r3,164(sp)
 8001c44:	90c0008c 	andi	r3,r18,2
 8001c48:	d8c02c15 	stw	r3,176(sp)
 8001c4c:	18000326 	beq	r3,zero,8001c5c <___vfprintf_internal_r+0x7a8>
 8001c50:	d8c02917 	ldw	r3,164(sp)
 8001c54:	18c00084 	addi	r3,r3,2
 8001c58:	d8c02915 	stw	r3,164(sp)
 8001c5c:	90c0210c 	andi	r3,r18,132
 8001c60:	d8c03015 	stw	r3,192(sp)
 8001c64:	1801c51e 	bne	r3,zero,800237c <___vfprintf_internal_r+0xec8>
 8001c68:	d9003117 	ldw	r4,196(sp)
 8001c6c:	d8c02917 	ldw	r3,164(sp)
 8001c70:	20e7c83a 	sub	r19,r4,r3
 8001c74:	04c1c10e 	bge	zero,r19,800237c <___vfprintf_internal_r+0xec8>
 8001c78:	02400404 	movi	r9,16
 8001c7c:	d8c02017 	ldw	r3,128(sp)
 8001c80:	d8801f17 	ldw	r2,124(sp)
 8001c84:	4cc52f0e 	bge	r9,r19,8003144 <___vfprintf_internal_r+0x1c90>
 8001c88:	01420074 	movhi	r5,2049
 8001c8c:	29465584 	addi	r5,r5,6486
 8001c90:	dc403b15 	stw	r17,236(sp)
 8001c94:	d9403515 	stw	r5,212(sp)
 8001c98:	9823883a 	mov	r17,r19
 8001c9c:	482d883a 	mov	r22,r9
 8001ca0:	9027883a 	mov	r19,r18
 8001ca4:	070001c4 	movi	fp,7
 8001ca8:	8025883a 	mov	r18,r16
 8001cac:	dc002d17 	ldw	r16,180(sp)
 8001cb0:	00000306 	br	8001cc0 <___vfprintf_internal_r+0x80c>
 8001cb4:	8c7ffc04 	addi	r17,r17,-16
 8001cb8:	42000204 	addi	r8,r8,8
 8001cbc:	b440130e 	bge	r22,r17,8001d0c <___vfprintf_internal_r+0x858>
 8001cc0:	01020074 	movhi	r4,2049
 8001cc4:	18c00404 	addi	r3,r3,16
 8001cc8:	10800044 	addi	r2,r2,1
 8001ccc:	21065584 	addi	r4,r4,6486
 8001cd0:	41000015 	stw	r4,0(r8)
 8001cd4:	45800115 	stw	r22,4(r8)
 8001cd8:	d8c02015 	stw	r3,128(sp)
 8001cdc:	d8801f15 	stw	r2,124(sp)
 8001ce0:	e0bff40e 	bge	fp,r2,8001cb4 <__alt_data_end+0xfc001cb4>
 8001ce4:	d9801e04 	addi	r6,sp,120
 8001ce8:	b80b883a 	mov	r5,r23
 8001cec:	8009883a 	mov	r4,r16
 8001cf0:	8008c940 	call	8008c94 <__sprint_r>
 8001cf4:	103ef31e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 8001cf8:	8c7ffc04 	addi	r17,r17,-16
 8001cfc:	d8c02017 	ldw	r3,128(sp)
 8001d00:	d8801f17 	ldw	r2,124(sp)
 8001d04:	da000404 	addi	r8,sp,16
 8001d08:	b47fed16 	blt	r22,r17,8001cc0 <__alt_data_end+0xfc001cc0>
 8001d0c:	9021883a 	mov	r16,r18
 8001d10:	9825883a 	mov	r18,r19
 8001d14:	8827883a 	mov	r19,r17
 8001d18:	dc403b17 	ldw	r17,236(sp)
 8001d1c:	d9403517 	ldw	r5,212(sp)
 8001d20:	98c7883a 	add	r3,r19,r3
 8001d24:	10800044 	addi	r2,r2,1
 8001d28:	41400015 	stw	r5,0(r8)
 8001d2c:	44c00115 	stw	r19,4(r8)
 8001d30:	d8c02015 	stw	r3,128(sp)
 8001d34:	d8801f15 	stw	r2,124(sp)
 8001d38:	010001c4 	movi	r4,7
 8001d3c:	2082c516 	blt	r4,r2,8002854 <___vfprintf_internal_r+0x13a0>
 8001d40:	df002787 	ldb	fp,158(sp)
 8001d44:	42000204 	addi	r8,r8,8
 8001d48:	e0000c26 	beq	fp,zero,8001d7c <___vfprintf_internal_r+0x8c8>
 8001d4c:	d8801f17 	ldw	r2,124(sp)
 8001d50:	d9002784 	addi	r4,sp,158
 8001d54:	18c00044 	addi	r3,r3,1
 8001d58:	10800044 	addi	r2,r2,1
 8001d5c:	41000015 	stw	r4,0(r8)
 8001d60:	01000044 	movi	r4,1
 8001d64:	41000115 	stw	r4,4(r8)
 8001d68:	d8c02015 	stw	r3,128(sp)
 8001d6c:	d8801f15 	stw	r2,124(sp)
 8001d70:	010001c4 	movi	r4,7
 8001d74:	20825e16 	blt	r4,r2,80026f0 <___vfprintf_internal_r+0x123c>
 8001d78:	42000204 	addi	r8,r8,8
 8001d7c:	d8802c17 	ldw	r2,176(sp)
 8001d80:	10000c26 	beq	r2,zero,8001db4 <___vfprintf_internal_r+0x900>
 8001d84:	d8801f17 	ldw	r2,124(sp)
 8001d88:	d9002704 	addi	r4,sp,156
 8001d8c:	18c00084 	addi	r3,r3,2
 8001d90:	10800044 	addi	r2,r2,1
 8001d94:	41000015 	stw	r4,0(r8)
 8001d98:	01000084 	movi	r4,2
 8001d9c:	41000115 	stw	r4,4(r8)
 8001da0:	d8c02015 	stw	r3,128(sp)
 8001da4:	d8801f15 	stw	r2,124(sp)
 8001da8:	010001c4 	movi	r4,7
 8001dac:	20825816 	blt	r4,r2,8002710 <___vfprintf_internal_r+0x125c>
 8001db0:	42000204 	addi	r8,r8,8
 8001db4:	d9003017 	ldw	r4,192(sp)
 8001db8:	00802004 	movi	r2,128
 8001dbc:	2081bb26 	beq	r4,r2,80024ac <___vfprintf_internal_r+0xff8>
 8001dc0:	d9402a17 	ldw	r5,168(sp)
 8001dc4:	d8802b17 	ldw	r2,172(sp)
 8001dc8:	28adc83a 	sub	r22,r5,r2
 8001dcc:	0580310e 	bge	zero,r22,8001e94 <___vfprintf_internal_r+0x9e0>
 8001dd0:	07000404 	movi	fp,16
 8001dd4:	d8801f17 	ldw	r2,124(sp)
 8001dd8:	e584360e 	bge	fp,r22,8002eb4 <___vfprintf_internal_r+0x1a00>
 8001ddc:	01420074 	movhi	r5,2049
 8001de0:	29465184 	addi	r5,r5,6470
 8001de4:	dc402a15 	stw	r17,168(sp)
 8001de8:	d9402c15 	stw	r5,176(sp)
 8001dec:	b023883a 	mov	r17,r22
 8001df0:	04c001c4 	movi	r19,7
 8001df4:	a82d883a 	mov	r22,r21
 8001df8:	902b883a 	mov	r21,r18
 8001dfc:	8025883a 	mov	r18,r16
 8001e00:	dc002d17 	ldw	r16,180(sp)
 8001e04:	00000306 	br	8001e14 <___vfprintf_internal_r+0x960>
 8001e08:	8c7ffc04 	addi	r17,r17,-16
 8001e0c:	42000204 	addi	r8,r8,8
 8001e10:	e440110e 	bge	fp,r17,8001e58 <___vfprintf_internal_r+0x9a4>
 8001e14:	18c00404 	addi	r3,r3,16
 8001e18:	10800044 	addi	r2,r2,1
 8001e1c:	45000015 	stw	r20,0(r8)
 8001e20:	47000115 	stw	fp,4(r8)
 8001e24:	d8c02015 	stw	r3,128(sp)
 8001e28:	d8801f15 	stw	r2,124(sp)
 8001e2c:	98bff60e 	bge	r19,r2,8001e08 <__alt_data_end+0xfc001e08>
 8001e30:	d9801e04 	addi	r6,sp,120
 8001e34:	b80b883a 	mov	r5,r23
 8001e38:	8009883a 	mov	r4,r16
 8001e3c:	8008c940 	call	8008c94 <__sprint_r>
 8001e40:	103ea01e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 8001e44:	8c7ffc04 	addi	r17,r17,-16
 8001e48:	d8c02017 	ldw	r3,128(sp)
 8001e4c:	d8801f17 	ldw	r2,124(sp)
 8001e50:	da000404 	addi	r8,sp,16
 8001e54:	e47fef16 	blt	fp,r17,8001e14 <__alt_data_end+0xfc001e14>
 8001e58:	9021883a 	mov	r16,r18
 8001e5c:	a825883a 	mov	r18,r21
 8001e60:	b02b883a 	mov	r21,r22
 8001e64:	882d883a 	mov	r22,r17
 8001e68:	dc402a17 	ldw	r17,168(sp)
 8001e6c:	d9002c17 	ldw	r4,176(sp)
 8001e70:	1d87883a 	add	r3,r3,r22
 8001e74:	10800044 	addi	r2,r2,1
 8001e78:	41000015 	stw	r4,0(r8)
 8001e7c:	45800115 	stw	r22,4(r8)
 8001e80:	d8c02015 	stw	r3,128(sp)
 8001e84:	d8801f15 	stw	r2,124(sp)
 8001e88:	010001c4 	movi	r4,7
 8001e8c:	20821016 	blt	r4,r2,80026d0 <___vfprintf_internal_r+0x121c>
 8001e90:	42000204 	addi	r8,r8,8
 8001e94:	9080400c 	andi	r2,r18,256
 8001e98:	10013a1e 	bne	r2,zero,8002384 <___vfprintf_internal_r+0xed0>
 8001e9c:	d9402b17 	ldw	r5,172(sp)
 8001ea0:	d8801f17 	ldw	r2,124(sp)
 8001ea4:	44000015 	stw	r16,0(r8)
 8001ea8:	1947883a 	add	r3,r3,r5
 8001eac:	10800044 	addi	r2,r2,1
 8001eb0:	41400115 	stw	r5,4(r8)
 8001eb4:	d8c02015 	stw	r3,128(sp)
 8001eb8:	d8801f15 	stw	r2,124(sp)
 8001ebc:	010001c4 	movi	r4,7
 8001ec0:	2081f516 	blt	r4,r2,8002698 <___vfprintf_internal_r+0x11e4>
 8001ec4:	42000204 	addi	r8,r8,8
 8001ec8:	9480010c 	andi	r18,r18,4
 8001ecc:	90003226 	beq	r18,zero,8001f98 <___vfprintf_internal_r+0xae4>
 8001ed0:	d9403117 	ldw	r5,196(sp)
 8001ed4:	d8802917 	ldw	r2,164(sp)
 8001ed8:	28a1c83a 	sub	r16,r5,r2
 8001edc:	04002e0e 	bge	zero,r16,8001f98 <___vfprintf_internal_r+0xae4>
 8001ee0:	04400404 	movi	r17,16
 8001ee4:	d8801f17 	ldw	r2,124(sp)
 8001ee8:	8c04c40e 	bge	r17,r16,80031fc <___vfprintf_internal_r+0x1d48>
 8001eec:	01420074 	movhi	r5,2049
 8001ef0:	29465584 	addi	r5,r5,6486
 8001ef4:	d9403515 	stw	r5,212(sp)
 8001ef8:	048001c4 	movi	r18,7
 8001efc:	dcc02d17 	ldw	r19,180(sp)
 8001f00:	00000306 	br	8001f10 <___vfprintf_internal_r+0xa5c>
 8001f04:	843ffc04 	addi	r16,r16,-16
 8001f08:	42000204 	addi	r8,r8,8
 8001f0c:	8c00130e 	bge	r17,r16,8001f5c <___vfprintf_internal_r+0xaa8>
 8001f10:	01020074 	movhi	r4,2049
 8001f14:	18c00404 	addi	r3,r3,16
 8001f18:	10800044 	addi	r2,r2,1
 8001f1c:	21065584 	addi	r4,r4,6486
 8001f20:	41000015 	stw	r4,0(r8)
 8001f24:	44400115 	stw	r17,4(r8)
 8001f28:	d8c02015 	stw	r3,128(sp)
 8001f2c:	d8801f15 	stw	r2,124(sp)
 8001f30:	90bff40e 	bge	r18,r2,8001f04 <__alt_data_end+0xfc001f04>
 8001f34:	d9801e04 	addi	r6,sp,120
 8001f38:	b80b883a 	mov	r5,r23
 8001f3c:	9809883a 	mov	r4,r19
 8001f40:	8008c940 	call	8008c94 <__sprint_r>
 8001f44:	103e5f1e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 8001f48:	843ffc04 	addi	r16,r16,-16
 8001f4c:	d8c02017 	ldw	r3,128(sp)
 8001f50:	d8801f17 	ldw	r2,124(sp)
 8001f54:	da000404 	addi	r8,sp,16
 8001f58:	8c3fed16 	blt	r17,r16,8001f10 <__alt_data_end+0xfc001f10>
 8001f5c:	d9403517 	ldw	r5,212(sp)
 8001f60:	1c07883a 	add	r3,r3,r16
 8001f64:	10800044 	addi	r2,r2,1
 8001f68:	41400015 	stw	r5,0(r8)
 8001f6c:	44000115 	stw	r16,4(r8)
 8001f70:	d8c02015 	stw	r3,128(sp)
 8001f74:	d8801f15 	stw	r2,124(sp)
 8001f78:	010001c4 	movi	r4,7
 8001f7c:	2080060e 	bge	r4,r2,8001f98 <___vfprintf_internal_r+0xae4>
 8001f80:	d9002d17 	ldw	r4,180(sp)
 8001f84:	d9801e04 	addi	r6,sp,120
 8001f88:	b80b883a 	mov	r5,r23
 8001f8c:	8008c940 	call	8008c94 <__sprint_r>
 8001f90:	103e4c1e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 8001f94:	d8c02017 	ldw	r3,128(sp)
 8001f98:	d8803117 	ldw	r2,196(sp)
 8001f9c:	d9002917 	ldw	r4,164(sp)
 8001fa0:	1100010e 	bge	r2,r4,8001fa8 <___vfprintf_internal_r+0xaf4>
 8001fa4:	2005883a 	mov	r2,r4
 8001fa8:	d9402f17 	ldw	r5,188(sp)
 8001fac:	288b883a 	add	r5,r5,r2
 8001fb0:	d9402f15 	stw	r5,188(sp)
 8001fb4:	1801c01e 	bne	r3,zero,80026b8 <___vfprintf_internal_r+0x1204>
 8001fb8:	a8800007 	ldb	r2,0(r21)
 8001fbc:	d8001f15 	stw	zero,124(sp)
 8001fc0:	da000404 	addi	r8,sp,16
 8001fc4:	103d751e 	bne	r2,zero,800159c <__alt_data_end+0xfc00159c>
 8001fc8:	a823883a 	mov	r17,r21
 8001fcc:	003d8b06 	br	80015fc <__alt_data_end+0xfc0015fc>
 8001fd0:	8025883a 	mov	r18,r16
 8001fd4:	dc002903 	ldbu	r16,164(sp)
 8001fd8:	e011883a 	mov	r8,fp
 8001fdc:	84003fcc 	andi	r16,r16,255
 8001fe0:	8005e51e 	bne	r16,zero,8003778 <___vfprintf_internal_r+0x22c4>
 8001fe4:	94800414 	ori	r18,r18,16
 8001fe8:	9080080c 	andi	r2,r18,32
 8001fec:	10022b26 	beq	r2,zero,800289c <___vfprintf_internal_r+0x13e8>
 8001ff0:	d9002e17 	ldw	r4,184(sp)
 8001ff4:	d9402a17 	ldw	r5,168(sp)
 8001ff8:	d8002785 	stb	zero,158(sp)
 8001ffc:	20c00204 	addi	r3,r4,8
 8002000:	24c00017 	ldw	r19,0(r4)
 8002004:	25800117 	ldw	r22,4(r4)
 8002008:	28042e16 	blt	r5,zero,80030c4 <___vfprintf_internal_r+0x1c10>
 800200c:	013fdfc4 	movi	r4,-129
 8002010:	9d84b03a 	or	r2,r19,r22
 8002014:	d8c02e15 	stw	r3,184(sp)
 8002018:	9124703a 	and	r18,r18,r4
 800201c:	0039883a 	mov	fp,zero
 8002020:	103e801e 	bne	r2,zero,8001a24 <__alt_data_end+0xfc001a24>
 8002024:	d9002a17 	ldw	r4,168(sp)
 8002028:	2002e01e 	bne	r4,zero,8002bac <___vfprintf_internal_r+0x16f8>
 800202c:	d8002a15 	stw	zero,168(sp)
 8002030:	d8002b15 	stw	zero,172(sp)
 8002034:	dc001e04 	addi	r16,sp,120
 8002038:	003ef506 	br	8001c10 <__alt_data_end+0xfc001c10>
 800203c:	8025883a 	mov	r18,r16
 8002040:	dc002903 	ldbu	r16,164(sp)
 8002044:	e011883a 	mov	r8,fp
 8002048:	84003fcc 	andi	r16,r16,255
 800204c:	8005ba1e 	bne	r16,zero,8003738 <___vfprintf_internal_r+0x2284>
 8002050:	01020074 	movhi	r4,2049
 8002054:	21064504 	addi	r4,r4,6420
 8002058:	d9003915 	stw	r4,228(sp)
 800205c:	9080080c 	andi	r2,r18,32
 8002060:	10006126 	beq	r2,zero,80021e8 <___vfprintf_internal_r+0xd34>
 8002064:	d9402e17 	ldw	r5,184(sp)
 8002068:	2cc00017 	ldw	r19,0(r5)
 800206c:	2d800117 	ldw	r22,4(r5)
 8002070:	29400204 	addi	r5,r5,8
 8002074:	d9402e15 	stw	r5,184(sp)
 8002078:	9080004c 	andi	r2,r18,1
 800207c:	1001ac26 	beq	r2,zero,8002730 <___vfprintf_internal_r+0x127c>
 8002080:	9d84b03a 	or	r2,r19,r22
 8002084:	10038526 	beq	r2,zero,8002e9c <___vfprintf_internal_r+0x19e8>
 8002088:	d8c02a17 	ldw	r3,168(sp)
 800208c:	00800c04 	movi	r2,48
 8002090:	d8802705 	stb	r2,156(sp)
 8002094:	dc402745 	stb	r17,157(sp)
 8002098:	d8002785 	stb	zero,158(sp)
 800209c:	90800094 	ori	r2,r18,2
 80020a0:	18047916 	blt	r3,zero,8003288 <___vfprintf_internal_r+0x1dd4>
 80020a4:	00bfdfc4 	movi	r2,-129
 80020a8:	90a4703a 	and	r18,r18,r2
 80020ac:	94800094 	ori	r18,r18,2
 80020b0:	0039883a 	mov	fp,zero
 80020b4:	d9003917 	ldw	r4,228(sp)
 80020b8:	dc001e04 	addi	r16,sp,120
 80020bc:	988003cc 	andi	r2,r19,15
 80020c0:	b006973a 	slli	r3,r22,28
 80020c4:	2085883a 	add	r2,r4,r2
 80020c8:	9826d13a 	srli	r19,r19,4
 80020cc:	10800003 	ldbu	r2,0(r2)
 80020d0:	b02cd13a 	srli	r22,r22,4
 80020d4:	843fffc4 	addi	r16,r16,-1
 80020d8:	1ce6b03a 	or	r19,r3,r19
 80020dc:	80800005 	stb	r2,0(r16)
 80020e0:	9d84b03a 	or	r2,r19,r22
 80020e4:	103ff51e 	bne	r2,zero,80020bc <__alt_data_end+0xfc0020bc>
 80020e8:	d8c02817 	ldw	r3,160(sp)
 80020ec:	1c07c83a 	sub	r3,r3,r16
 80020f0:	d8c02b15 	stw	r3,172(sp)
 80020f4:	003ec606 	br	8001c10 <__alt_data_end+0xfc001c10>
 80020f8:	8025883a 	mov	r18,r16
 80020fc:	dc002903 	ldbu	r16,164(sp)
 8002100:	e011883a 	mov	r8,fp
 8002104:	84003fcc 	andi	r16,r16,255
 8002108:	803e9626 	beq	r16,zero,8001b64 <__alt_data_end+0xfc001b64>
 800210c:	d8c02b03 	ldbu	r3,172(sp)
 8002110:	d8c02785 	stb	r3,158(sp)
 8002114:	003e9306 	br	8001b64 <__alt_data_end+0xfc001b64>
 8002118:	00c00044 	movi	r3,1
 800211c:	d8c02905 	stb	r3,164(sp)
 8002120:	00c00ac4 	movi	r3,43
 8002124:	d8c02b05 	stb	r3,172(sp)
 8002128:	ac400007 	ldb	r17,0(r21)
 800212c:	003d4306 	br	800163c <__alt_data_end+0xfc00163c>
 8002130:	84000814 	ori	r16,r16,32
 8002134:	ac400007 	ldb	r17,0(r21)
 8002138:	003d4006 	br	800163c <__alt_data_end+0xfc00163c>
 800213c:	d8802e17 	ldw	r2,184(sp)
 8002140:	8025883a 	mov	r18,r16
 8002144:	d8002785 	stb	zero,158(sp)
 8002148:	14000017 	ldw	r16,0(r2)
 800214c:	e011883a 	mov	r8,fp
 8002150:	14c00104 	addi	r19,r2,4
 8002154:	80042d26 	beq	r16,zero,800320c <___vfprintf_internal_r+0x1d58>
 8002158:	d8c02a17 	ldw	r3,168(sp)
 800215c:	1803e416 	blt	r3,zero,80030f0 <___vfprintf_internal_r+0x1c3c>
 8002160:	180d883a 	mov	r6,r3
 8002164:	000b883a 	mov	r5,zero
 8002168:	8009883a 	mov	r4,r16
 800216c:	df003d15 	stw	fp,244(sp)
 8002170:	8006dec0 	call	8006dec <memchr>
 8002174:	da003d17 	ldw	r8,244(sp)
 8002178:	10046826 	beq	r2,zero,800331c <___vfprintf_internal_r+0x1e68>
 800217c:	1405c83a 	sub	r2,r2,r16
 8002180:	d8802b15 	stw	r2,172(sp)
 8002184:	1003e016 	blt	r2,zero,8003108 <___vfprintf_internal_r+0x1c54>
 8002188:	df002783 	ldbu	fp,158(sp)
 800218c:	d8802915 	stw	r2,164(sp)
 8002190:	dcc02e15 	stw	r19,184(sp)
 8002194:	d8002a15 	stw	zero,168(sp)
 8002198:	d8003215 	stw	zero,200(sp)
 800219c:	003ea206 	br	8001c28 <__alt_data_end+0xfc001c28>
 80021a0:	8025883a 	mov	r18,r16
 80021a4:	dc002903 	ldbu	r16,164(sp)
 80021a8:	e011883a 	mov	r8,fp
 80021ac:	84003fcc 	andi	r16,r16,255
 80021b0:	803f8d26 	beq	r16,zero,8001fe8 <__alt_data_end+0xfc001fe8>
 80021b4:	d8c02b03 	ldbu	r3,172(sp)
 80021b8:	d8c02785 	stb	r3,158(sp)
 80021bc:	003f8a06 	br	8001fe8 <__alt_data_end+0xfc001fe8>
 80021c0:	8025883a 	mov	r18,r16
 80021c4:	dc002903 	ldbu	r16,164(sp)
 80021c8:	e011883a 	mov	r8,fp
 80021cc:	84003fcc 	andi	r16,r16,255
 80021d0:	8005661e 	bne	r16,zero,800376c <___vfprintf_internal_r+0x22b8>
 80021d4:	01020074 	movhi	r4,2049
 80021d8:	21064a04 	addi	r4,r4,6440
 80021dc:	d9003915 	stw	r4,228(sp)
 80021e0:	9080080c 	andi	r2,r18,32
 80021e4:	103f9f1e 	bne	r2,zero,8002064 <__alt_data_end+0xfc002064>
 80021e8:	9080040c 	andi	r2,r18,16
 80021ec:	1002eb26 	beq	r2,zero,8002d9c <___vfprintf_internal_r+0x18e8>
 80021f0:	d8802e17 	ldw	r2,184(sp)
 80021f4:	002d883a 	mov	r22,zero
 80021f8:	14c00017 	ldw	r19,0(r2)
 80021fc:	10800104 	addi	r2,r2,4
 8002200:	d8802e15 	stw	r2,184(sp)
 8002204:	003f9c06 	br	8002078 <__alt_data_end+0xfc002078>
 8002208:	d8802b07 	ldb	r2,172(sp)
 800220c:	1002e11e 	bne	r2,zero,8002d94 <___vfprintf_internal_r+0x18e0>
 8002210:	00c00044 	movi	r3,1
 8002214:	d8c02905 	stb	r3,164(sp)
 8002218:	00c00804 	movi	r3,32
 800221c:	d8c02b05 	stb	r3,172(sp)
 8002220:	ac400007 	ldb	r17,0(r21)
 8002224:	003d0506 	br	800163c <__alt_data_end+0xfc00163c>
 8002228:	84000054 	ori	r16,r16,1
 800222c:	ac400007 	ldb	r17,0(r21)
 8002230:	003d0206 	br	800163c <__alt_data_end+0xfc00163c>
 8002234:	8025883a 	mov	r18,r16
 8002238:	dc002903 	ldbu	r16,164(sp)
 800223c:	e011883a 	mov	r8,fp
 8002240:	84003fcc 	andi	r16,r16,255
 8002244:	803de726 	beq	r16,zero,80019e4 <__alt_data_end+0xfc0019e4>
 8002248:	d8c02b03 	ldbu	r3,172(sp)
 800224c:	d8c02785 	stb	r3,158(sp)
 8002250:	003de406 	br	80019e4 <__alt_data_end+0xfc0019e4>
 8002254:	84001014 	ori	r16,r16,64
 8002258:	ac400007 	ldb	r17,0(r21)
 800225c:	003cf706 	br	800163c <__alt_data_end+0xfc00163c>
 8002260:	ac400007 	ldb	r17,0(r21)
 8002264:	00801b04 	movi	r2,108
 8002268:	88838f26 	beq	r17,r2,80030a8 <___vfprintf_internal_r+0x1bf4>
 800226c:	84000414 	ori	r16,r16,16
 8002270:	003cf206 	br	800163c <__alt_data_end+0xfc00163c>
 8002274:	8025883a 	mov	r18,r16
 8002278:	dc002903 	ldbu	r16,164(sp)
 800227c:	e011883a 	mov	r8,fp
 8002280:	84003fcc 	andi	r16,r16,255
 8002284:	80053f1e 	bne	r16,zero,8003784 <___vfprintf_internal_r+0x22d0>
 8002288:	9080080c 	andi	r2,r18,32
 800228c:	1002d226 	beq	r2,zero,8002dd8 <___vfprintf_internal_r+0x1924>
 8002290:	d9002e17 	ldw	r4,184(sp)
 8002294:	d9402f17 	ldw	r5,188(sp)
 8002298:	20800017 	ldw	r2,0(r4)
 800229c:	2807d7fa 	srai	r3,r5,31
 80022a0:	21000104 	addi	r4,r4,4
 80022a4:	d9002e15 	stw	r4,184(sp)
 80022a8:	11400015 	stw	r5,0(r2)
 80022ac:	10c00115 	stw	r3,4(r2)
 80022b0:	003cb806 	br	8001594 <__alt_data_end+0xfc001594>
 80022b4:	d8c02e17 	ldw	r3,184(sp)
 80022b8:	d9002e17 	ldw	r4,184(sp)
 80022bc:	8025883a 	mov	r18,r16
 80022c0:	18800017 	ldw	r2,0(r3)
 80022c4:	21000104 	addi	r4,r4,4
 80022c8:	00c00044 	movi	r3,1
 80022cc:	e011883a 	mov	r8,fp
 80022d0:	d8c02915 	stw	r3,164(sp)
 80022d4:	d8002785 	stb	zero,158(sp)
 80022d8:	d8801405 	stb	r2,80(sp)
 80022dc:	d9002e15 	stw	r4,184(sp)
 80022e0:	d8c02b15 	stw	r3,172(sp)
 80022e4:	d8002a15 	stw	zero,168(sp)
 80022e8:	d8003215 	stw	zero,200(sp)
 80022ec:	dc001404 	addi	r16,sp,80
 80022f0:	0039883a 	mov	fp,zero
 80022f4:	003e5306 	br	8001c44 <__alt_data_end+0xfc001c44>
 80022f8:	01020074 	movhi	r4,2049
 80022fc:	21064a04 	addi	r4,r4,6440
 8002300:	0039883a 	mov	fp,zero
 8002304:	d9003915 	stw	r4,228(sp)
 8002308:	04401e04 	movi	r17,120
 800230c:	003f6906 	br	80020b4 <__alt_data_end+0xfc0020b4>
 8002310:	8025883a 	mov	r18,r16
 8002314:	dc002903 	ldbu	r16,164(sp)
 8002318:	e011883a 	mov	r8,fp
 800231c:	84003fcc 	andi	r16,r16,255
 8002320:	8005081e 	bne	r16,zero,8003744 <___vfprintf_internal_r+0x2290>
 8002324:	883d6126 	beq	r17,zero,80018ac <__alt_data_end+0xfc0018ac>
 8002328:	00c00044 	movi	r3,1
 800232c:	d8c02915 	stw	r3,164(sp)
 8002330:	dc401405 	stb	r17,80(sp)
 8002334:	d8002785 	stb	zero,158(sp)
 8002338:	003fe906 	br	80022e0 <__alt_data_end+0xfc0022e0>
 800233c:	01420074 	movhi	r5,2049
 8002340:	29464a04 	addi	r5,r5,6440
 8002344:	d9403915 	stw	r5,228(sp)
 8002348:	d8c02e15 	stw	r3,184(sp)
 800234c:	1025883a 	mov	r18,r2
 8002350:	04401e04 	movi	r17,120
 8002354:	9d84b03a 	or	r2,r19,r22
 8002358:	1000fc1e 	bne	r2,zero,800274c <___vfprintf_internal_r+0x1298>
 800235c:	0039883a 	mov	fp,zero
 8002360:	00800084 	movi	r2,2
 8002364:	10803fcc 	andi	r2,r2,255
 8002368:	00c00044 	movi	r3,1
 800236c:	10c20f26 	beq	r2,r3,8002bac <___vfprintf_internal_r+0x16f8>
 8002370:	00c00084 	movi	r3,2
 8002374:	10fd3326 	beq	r2,r3,8001844 <__alt_data_end+0xfc001844>
 8002378:	003e0b06 	br	8001ba8 <__alt_data_end+0xfc001ba8>
 800237c:	d8c02017 	ldw	r3,128(sp)
 8002380:	003e7106 	br	8001d48 <__alt_data_end+0xfc001d48>
 8002384:	00801944 	movi	r2,101
 8002388:	14407e0e 	bge	r2,r17,8002584 <___vfprintf_internal_r+0x10d0>
 800238c:	d9003617 	ldw	r4,216(sp)
 8002390:	d9403817 	ldw	r5,224(sp)
 8002394:	000d883a 	mov	r6,zero
 8002398:	000f883a 	mov	r7,zero
 800239c:	d8c03c15 	stw	r3,240(sp)
 80023a0:	da003d15 	stw	r8,244(sp)
 80023a4:	800cbcc0 	call	800cbcc <__eqdf2>
 80023a8:	d8c03c17 	ldw	r3,240(sp)
 80023ac:	da003d17 	ldw	r8,244(sp)
 80023b0:	1000f71e 	bne	r2,zero,8002790 <___vfprintf_internal_r+0x12dc>
 80023b4:	d8801f17 	ldw	r2,124(sp)
 80023b8:	01020074 	movhi	r4,2049
 80023bc:	21065104 	addi	r4,r4,6468
 80023c0:	18c00044 	addi	r3,r3,1
 80023c4:	10800044 	addi	r2,r2,1
 80023c8:	41000015 	stw	r4,0(r8)
 80023cc:	01000044 	movi	r4,1
 80023d0:	41000115 	stw	r4,4(r8)
 80023d4:	d8c02015 	stw	r3,128(sp)
 80023d8:	d8801f15 	stw	r2,124(sp)
 80023dc:	010001c4 	movi	r4,7
 80023e0:	2082b816 	blt	r4,r2,8002ec4 <___vfprintf_internal_r+0x1a10>
 80023e4:	42000204 	addi	r8,r8,8
 80023e8:	d8802617 	ldw	r2,152(sp)
 80023ec:	d9403317 	ldw	r5,204(sp)
 80023f0:	11400216 	blt	r2,r5,80023fc <___vfprintf_internal_r+0xf48>
 80023f4:	9080004c 	andi	r2,r18,1
 80023f8:	103eb326 	beq	r2,zero,8001ec8 <__alt_data_end+0xfc001ec8>
 80023fc:	d8803717 	ldw	r2,220(sp)
 8002400:	d9003417 	ldw	r4,208(sp)
 8002404:	d9403717 	ldw	r5,220(sp)
 8002408:	1887883a 	add	r3,r3,r2
 800240c:	d8801f17 	ldw	r2,124(sp)
 8002410:	41000015 	stw	r4,0(r8)
 8002414:	41400115 	stw	r5,4(r8)
 8002418:	10800044 	addi	r2,r2,1
 800241c:	d8c02015 	stw	r3,128(sp)
 8002420:	d8801f15 	stw	r2,124(sp)
 8002424:	010001c4 	movi	r4,7
 8002428:	20832916 	blt	r4,r2,80030d0 <___vfprintf_internal_r+0x1c1c>
 800242c:	42000204 	addi	r8,r8,8
 8002430:	d8803317 	ldw	r2,204(sp)
 8002434:	143fffc4 	addi	r16,r2,-1
 8002438:	043ea30e 	bge	zero,r16,8001ec8 <__alt_data_end+0xfc001ec8>
 800243c:	04400404 	movi	r17,16
 8002440:	d8801f17 	ldw	r2,124(sp)
 8002444:	8c00880e 	bge	r17,r16,8002668 <___vfprintf_internal_r+0x11b4>
 8002448:	01420074 	movhi	r5,2049
 800244c:	29465184 	addi	r5,r5,6470
 8002450:	d9402c15 	stw	r5,176(sp)
 8002454:	058001c4 	movi	r22,7
 8002458:	dcc02d17 	ldw	r19,180(sp)
 800245c:	00000306 	br	800246c <___vfprintf_internal_r+0xfb8>
 8002460:	42000204 	addi	r8,r8,8
 8002464:	843ffc04 	addi	r16,r16,-16
 8002468:	8c00820e 	bge	r17,r16,8002674 <___vfprintf_internal_r+0x11c0>
 800246c:	18c00404 	addi	r3,r3,16
 8002470:	10800044 	addi	r2,r2,1
 8002474:	45000015 	stw	r20,0(r8)
 8002478:	44400115 	stw	r17,4(r8)
 800247c:	d8c02015 	stw	r3,128(sp)
 8002480:	d8801f15 	stw	r2,124(sp)
 8002484:	b0bff60e 	bge	r22,r2,8002460 <__alt_data_end+0xfc002460>
 8002488:	d9801e04 	addi	r6,sp,120
 800248c:	b80b883a 	mov	r5,r23
 8002490:	9809883a 	mov	r4,r19
 8002494:	8008c940 	call	8008c94 <__sprint_r>
 8002498:	103d0a1e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 800249c:	d8c02017 	ldw	r3,128(sp)
 80024a0:	d8801f17 	ldw	r2,124(sp)
 80024a4:	da000404 	addi	r8,sp,16
 80024a8:	003fee06 	br	8002464 <__alt_data_end+0xfc002464>
 80024ac:	d9403117 	ldw	r5,196(sp)
 80024b0:	d8802917 	ldw	r2,164(sp)
 80024b4:	28adc83a 	sub	r22,r5,r2
 80024b8:	05be410e 	bge	zero,r22,8001dc0 <__alt_data_end+0xfc001dc0>
 80024bc:	07000404 	movi	fp,16
 80024c0:	d8801f17 	ldw	r2,124(sp)
 80024c4:	e5838f0e 	bge	fp,r22,8003304 <___vfprintf_internal_r+0x1e50>
 80024c8:	01420074 	movhi	r5,2049
 80024cc:	29465184 	addi	r5,r5,6470
 80024d0:	dc403015 	stw	r17,192(sp)
 80024d4:	d9402c15 	stw	r5,176(sp)
 80024d8:	b023883a 	mov	r17,r22
 80024dc:	04c001c4 	movi	r19,7
 80024e0:	a82d883a 	mov	r22,r21
 80024e4:	902b883a 	mov	r21,r18
 80024e8:	8025883a 	mov	r18,r16
 80024ec:	dc002d17 	ldw	r16,180(sp)
 80024f0:	00000306 	br	8002500 <___vfprintf_internal_r+0x104c>
 80024f4:	8c7ffc04 	addi	r17,r17,-16
 80024f8:	42000204 	addi	r8,r8,8
 80024fc:	e440110e 	bge	fp,r17,8002544 <___vfprintf_internal_r+0x1090>
 8002500:	18c00404 	addi	r3,r3,16
 8002504:	10800044 	addi	r2,r2,1
 8002508:	45000015 	stw	r20,0(r8)
 800250c:	47000115 	stw	fp,4(r8)
 8002510:	d8c02015 	stw	r3,128(sp)
 8002514:	d8801f15 	stw	r2,124(sp)
 8002518:	98bff60e 	bge	r19,r2,80024f4 <__alt_data_end+0xfc0024f4>
 800251c:	d9801e04 	addi	r6,sp,120
 8002520:	b80b883a 	mov	r5,r23
 8002524:	8009883a 	mov	r4,r16
 8002528:	8008c940 	call	8008c94 <__sprint_r>
 800252c:	103ce51e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 8002530:	8c7ffc04 	addi	r17,r17,-16
 8002534:	d8c02017 	ldw	r3,128(sp)
 8002538:	d8801f17 	ldw	r2,124(sp)
 800253c:	da000404 	addi	r8,sp,16
 8002540:	e47fef16 	blt	fp,r17,8002500 <__alt_data_end+0xfc002500>
 8002544:	9021883a 	mov	r16,r18
 8002548:	a825883a 	mov	r18,r21
 800254c:	b02b883a 	mov	r21,r22
 8002550:	882d883a 	mov	r22,r17
 8002554:	dc403017 	ldw	r17,192(sp)
 8002558:	d9002c17 	ldw	r4,176(sp)
 800255c:	1d87883a 	add	r3,r3,r22
 8002560:	10800044 	addi	r2,r2,1
 8002564:	41000015 	stw	r4,0(r8)
 8002568:	45800115 	stw	r22,4(r8)
 800256c:	d8c02015 	stw	r3,128(sp)
 8002570:	d8801f15 	stw	r2,124(sp)
 8002574:	010001c4 	movi	r4,7
 8002578:	20818e16 	blt	r4,r2,8002bb4 <___vfprintf_internal_r+0x1700>
 800257c:	42000204 	addi	r8,r8,8
 8002580:	003e0f06 	br	8001dc0 <__alt_data_end+0xfc001dc0>
 8002584:	d9403317 	ldw	r5,204(sp)
 8002588:	00800044 	movi	r2,1
 800258c:	18c00044 	addi	r3,r3,1
 8002590:	1141530e 	bge	r2,r5,8002ae0 <___vfprintf_internal_r+0x162c>
 8002594:	dc401f17 	ldw	r17,124(sp)
 8002598:	00800044 	movi	r2,1
 800259c:	40800115 	stw	r2,4(r8)
 80025a0:	8c400044 	addi	r17,r17,1
 80025a4:	44000015 	stw	r16,0(r8)
 80025a8:	d8c02015 	stw	r3,128(sp)
 80025ac:	dc401f15 	stw	r17,124(sp)
 80025b0:	008001c4 	movi	r2,7
 80025b4:	14416b16 	blt	r2,r17,8002b64 <___vfprintf_internal_r+0x16b0>
 80025b8:	42000204 	addi	r8,r8,8
 80025bc:	d8803717 	ldw	r2,220(sp)
 80025c0:	d9003417 	ldw	r4,208(sp)
 80025c4:	8c400044 	addi	r17,r17,1
 80025c8:	10c7883a 	add	r3,r2,r3
 80025cc:	40800115 	stw	r2,4(r8)
 80025d0:	41000015 	stw	r4,0(r8)
 80025d4:	d8c02015 	stw	r3,128(sp)
 80025d8:	dc401f15 	stw	r17,124(sp)
 80025dc:	008001c4 	movi	r2,7
 80025e0:	14416916 	blt	r2,r17,8002b88 <___vfprintf_internal_r+0x16d4>
 80025e4:	45800204 	addi	r22,r8,8
 80025e8:	d9003617 	ldw	r4,216(sp)
 80025ec:	d9403817 	ldw	r5,224(sp)
 80025f0:	000d883a 	mov	r6,zero
 80025f4:	000f883a 	mov	r7,zero
 80025f8:	d8c03c15 	stw	r3,240(sp)
 80025fc:	800cbcc0 	call	800cbcc <__eqdf2>
 8002600:	d8c03c17 	ldw	r3,240(sp)
 8002604:	1000bc26 	beq	r2,zero,80028f8 <___vfprintf_internal_r+0x1444>
 8002608:	d9403317 	ldw	r5,204(sp)
 800260c:	84000044 	addi	r16,r16,1
 8002610:	8c400044 	addi	r17,r17,1
 8002614:	28bfffc4 	addi	r2,r5,-1
 8002618:	1887883a 	add	r3,r3,r2
 800261c:	b0800115 	stw	r2,4(r22)
 8002620:	b4000015 	stw	r16,0(r22)
 8002624:	d8c02015 	stw	r3,128(sp)
 8002628:	dc401f15 	stw	r17,124(sp)
 800262c:	008001c4 	movi	r2,7
 8002630:	14414316 	blt	r2,r17,8002b40 <___vfprintf_internal_r+0x168c>
 8002634:	b5800204 	addi	r22,r22,8
 8002638:	d9003a17 	ldw	r4,232(sp)
 800263c:	df0022c4 	addi	fp,sp,139
 8002640:	8c400044 	addi	r17,r17,1
 8002644:	20c7883a 	add	r3,r4,r3
 8002648:	b7000015 	stw	fp,0(r22)
 800264c:	b1000115 	stw	r4,4(r22)
 8002650:	d8c02015 	stw	r3,128(sp)
 8002654:	dc401f15 	stw	r17,124(sp)
 8002658:	008001c4 	movi	r2,7
 800265c:	14400e16 	blt	r2,r17,8002698 <___vfprintf_internal_r+0x11e4>
 8002660:	b2000204 	addi	r8,r22,8
 8002664:	003e1806 	br	8001ec8 <__alt_data_end+0xfc001ec8>
 8002668:	01020074 	movhi	r4,2049
 800266c:	21065184 	addi	r4,r4,6470
 8002670:	d9002c15 	stw	r4,176(sp)
 8002674:	d9002c17 	ldw	r4,176(sp)
 8002678:	1c07883a 	add	r3,r3,r16
 800267c:	44000115 	stw	r16,4(r8)
 8002680:	41000015 	stw	r4,0(r8)
 8002684:	10800044 	addi	r2,r2,1
 8002688:	d8c02015 	stw	r3,128(sp)
 800268c:	d8801f15 	stw	r2,124(sp)
 8002690:	010001c4 	movi	r4,7
 8002694:	20be0b0e 	bge	r4,r2,8001ec4 <__alt_data_end+0xfc001ec4>
 8002698:	d9002d17 	ldw	r4,180(sp)
 800269c:	d9801e04 	addi	r6,sp,120
 80026a0:	b80b883a 	mov	r5,r23
 80026a4:	8008c940 	call	8008c94 <__sprint_r>
 80026a8:	103c861e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 80026ac:	d8c02017 	ldw	r3,128(sp)
 80026b0:	da000404 	addi	r8,sp,16
 80026b4:	003e0406 	br	8001ec8 <__alt_data_end+0xfc001ec8>
 80026b8:	d9002d17 	ldw	r4,180(sp)
 80026bc:	d9801e04 	addi	r6,sp,120
 80026c0:	b80b883a 	mov	r5,r23
 80026c4:	8008c940 	call	8008c94 <__sprint_r>
 80026c8:	103e3b26 	beq	r2,zero,8001fb8 <__alt_data_end+0xfc001fb8>
 80026cc:	003c7d06 	br	80018c4 <__alt_data_end+0xfc0018c4>
 80026d0:	d9002d17 	ldw	r4,180(sp)
 80026d4:	d9801e04 	addi	r6,sp,120
 80026d8:	b80b883a 	mov	r5,r23
 80026dc:	8008c940 	call	8008c94 <__sprint_r>
 80026e0:	103c781e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 80026e4:	d8c02017 	ldw	r3,128(sp)
 80026e8:	da000404 	addi	r8,sp,16
 80026ec:	003de906 	br	8001e94 <__alt_data_end+0xfc001e94>
 80026f0:	d9002d17 	ldw	r4,180(sp)
 80026f4:	d9801e04 	addi	r6,sp,120
 80026f8:	b80b883a 	mov	r5,r23
 80026fc:	8008c940 	call	8008c94 <__sprint_r>
 8002700:	103c701e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 8002704:	d8c02017 	ldw	r3,128(sp)
 8002708:	da000404 	addi	r8,sp,16
 800270c:	003d9b06 	br	8001d7c <__alt_data_end+0xfc001d7c>
 8002710:	d9002d17 	ldw	r4,180(sp)
 8002714:	d9801e04 	addi	r6,sp,120
 8002718:	b80b883a 	mov	r5,r23
 800271c:	8008c940 	call	8008c94 <__sprint_r>
 8002720:	103c681e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 8002724:	d8c02017 	ldw	r3,128(sp)
 8002728:	da000404 	addi	r8,sp,16
 800272c:	003da106 	br	8001db4 <__alt_data_end+0xfc001db4>
 8002730:	d9402a17 	ldw	r5,168(sp)
 8002734:	d8002785 	stb	zero,158(sp)
 8002738:	283f0616 	blt	r5,zero,8002354 <__alt_data_end+0xfc002354>
 800273c:	00ffdfc4 	movi	r3,-129
 8002740:	9d84b03a 	or	r2,r19,r22
 8002744:	90e4703a 	and	r18,r18,r3
 8002748:	103c3b26 	beq	r2,zero,8001838 <__alt_data_end+0xfc001838>
 800274c:	0039883a 	mov	fp,zero
 8002750:	003e5806 	br	80020b4 <__alt_data_end+0xfc0020b4>
 8002754:	9080040c 	andi	r2,r18,16
 8002758:	1001b326 	beq	r2,zero,8002e28 <___vfprintf_internal_r+0x1974>
 800275c:	d8c02e17 	ldw	r3,184(sp)
 8002760:	d9002a17 	ldw	r4,168(sp)
 8002764:	d8002785 	stb	zero,158(sp)
 8002768:	18800104 	addi	r2,r3,4
 800276c:	1cc00017 	ldw	r19,0(r3)
 8002770:	002d883a 	mov	r22,zero
 8002774:	2001b516 	blt	r4,zero,8002e4c <___vfprintf_internal_r+0x1998>
 8002778:	00ffdfc4 	movi	r3,-129
 800277c:	d8802e15 	stw	r2,184(sp)
 8002780:	90e4703a 	and	r18,r18,r3
 8002784:	983d0526 	beq	r19,zero,8001b9c <__alt_data_end+0xfc001b9c>
 8002788:	0039883a 	mov	fp,zero
 800278c:	003d0806 	br	8001bb0 <__alt_data_end+0xfc001bb0>
 8002790:	dc402617 	ldw	r17,152(sp)
 8002794:	0441d30e 	bge	zero,r17,8002ee4 <___vfprintf_internal_r+0x1a30>
 8002798:	dc403217 	ldw	r17,200(sp)
 800279c:	d8803317 	ldw	r2,204(sp)
 80027a0:	1440010e 	bge	r2,r17,80027a8 <___vfprintf_internal_r+0x12f4>
 80027a4:	1023883a 	mov	r17,r2
 80027a8:	04400a0e 	bge	zero,r17,80027d4 <___vfprintf_internal_r+0x1320>
 80027ac:	d8801f17 	ldw	r2,124(sp)
 80027b0:	1c47883a 	add	r3,r3,r17
 80027b4:	44000015 	stw	r16,0(r8)
 80027b8:	10800044 	addi	r2,r2,1
 80027bc:	44400115 	stw	r17,4(r8)
 80027c0:	d8c02015 	stw	r3,128(sp)
 80027c4:	d8801f15 	stw	r2,124(sp)
 80027c8:	010001c4 	movi	r4,7
 80027cc:	20826516 	blt	r4,r2,8003164 <___vfprintf_internal_r+0x1cb0>
 80027d0:	42000204 	addi	r8,r8,8
 80027d4:	88026116 	blt	r17,zero,800315c <___vfprintf_internal_r+0x1ca8>
 80027d8:	d9003217 	ldw	r4,200(sp)
 80027dc:	2463c83a 	sub	r17,r4,r17
 80027e0:	04407b0e 	bge	zero,r17,80029d0 <___vfprintf_internal_r+0x151c>
 80027e4:	05800404 	movi	r22,16
 80027e8:	d8801f17 	ldw	r2,124(sp)
 80027ec:	b4419d0e 	bge	r22,r17,8002e64 <___vfprintf_internal_r+0x19b0>
 80027f0:	01020074 	movhi	r4,2049
 80027f4:	21065184 	addi	r4,r4,6470
 80027f8:	d9002c15 	stw	r4,176(sp)
 80027fc:	070001c4 	movi	fp,7
 8002800:	dcc02d17 	ldw	r19,180(sp)
 8002804:	00000306 	br	8002814 <___vfprintf_internal_r+0x1360>
 8002808:	42000204 	addi	r8,r8,8
 800280c:	8c7ffc04 	addi	r17,r17,-16
 8002810:	b441970e 	bge	r22,r17,8002e70 <___vfprintf_internal_r+0x19bc>
 8002814:	18c00404 	addi	r3,r3,16
 8002818:	10800044 	addi	r2,r2,1
 800281c:	45000015 	stw	r20,0(r8)
 8002820:	45800115 	stw	r22,4(r8)
 8002824:	d8c02015 	stw	r3,128(sp)
 8002828:	d8801f15 	stw	r2,124(sp)
 800282c:	e0bff60e 	bge	fp,r2,8002808 <__alt_data_end+0xfc002808>
 8002830:	d9801e04 	addi	r6,sp,120
 8002834:	b80b883a 	mov	r5,r23
 8002838:	9809883a 	mov	r4,r19
 800283c:	8008c940 	call	8008c94 <__sprint_r>
 8002840:	103c201e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 8002844:	d8c02017 	ldw	r3,128(sp)
 8002848:	d8801f17 	ldw	r2,124(sp)
 800284c:	da000404 	addi	r8,sp,16
 8002850:	003fee06 	br	800280c <__alt_data_end+0xfc00280c>
 8002854:	d9002d17 	ldw	r4,180(sp)
 8002858:	d9801e04 	addi	r6,sp,120
 800285c:	b80b883a 	mov	r5,r23
 8002860:	8008c940 	call	8008c94 <__sprint_r>
 8002864:	103c171e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 8002868:	d8c02017 	ldw	r3,128(sp)
 800286c:	df002787 	ldb	fp,158(sp)
 8002870:	da000404 	addi	r8,sp,16
 8002874:	003d3406 	br	8001d48 <__alt_data_end+0xfc001d48>
 8002878:	9080040c 	andi	r2,r18,16
 800287c:	10016126 	beq	r2,zero,8002e04 <___vfprintf_internal_r+0x1950>
 8002880:	d9402e17 	ldw	r5,184(sp)
 8002884:	2cc00017 	ldw	r19,0(r5)
 8002888:	29400104 	addi	r5,r5,4
 800288c:	d9402e15 	stw	r5,184(sp)
 8002890:	982dd7fa 	srai	r22,r19,31
 8002894:	b005883a 	mov	r2,r22
 8002898:	003c5a06 	br	8001a04 <__alt_data_end+0xfc001a04>
 800289c:	9080040c 	andi	r2,r18,16
 80028a0:	10003526 	beq	r2,zero,8002978 <___vfprintf_internal_r+0x14c4>
 80028a4:	d8c02e17 	ldw	r3,184(sp)
 80028a8:	d9002a17 	ldw	r4,168(sp)
 80028ac:	d8002785 	stb	zero,158(sp)
 80028b0:	18800104 	addi	r2,r3,4
 80028b4:	1cc00017 	ldw	r19,0(r3)
 80028b8:	002d883a 	mov	r22,zero
 80028bc:	20003716 	blt	r4,zero,800299c <___vfprintf_internal_r+0x14e8>
 80028c0:	00ffdfc4 	movi	r3,-129
 80028c4:	d8802e15 	stw	r2,184(sp)
 80028c8:	90e4703a 	and	r18,r18,r3
 80028cc:	0039883a 	mov	fp,zero
 80028d0:	983dd426 	beq	r19,zero,8002024 <__alt_data_end+0xfc002024>
 80028d4:	00800244 	movi	r2,9
 80028d8:	14fc5336 	bltu	r2,r19,8001a28 <__alt_data_end+0xfc001a28>
 80028dc:	d8c02817 	ldw	r3,160(sp)
 80028e0:	dc001dc4 	addi	r16,sp,119
 80028e4:	9cc00c04 	addi	r19,r19,48
 80028e8:	1c07c83a 	sub	r3,r3,r16
 80028ec:	dcc01dc5 	stb	r19,119(sp)
 80028f0:	d8c02b15 	stw	r3,172(sp)
 80028f4:	003cc606 	br	8001c10 <__alt_data_end+0xfc001c10>
 80028f8:	d8803317 	ldw	r2,204(sp)
 80028fc:	143fffc4 	addi	r16,r2,-1
 8002900:	043f4d0e 	bge	zero,r16,8002638 <__alt_data_end+0xfc002638>
 8002904:	07000404 	movi	fp,16
 8002908:	e400810e 	bge	fp,r16,8002b10 <___vfprintf_internal_r+0x165c>
 800290c:	01420074 	movhi	r5,2049
 8002910:	29465184 	addi	r5,r5,6470
 8002914:	d9402c15 	stw	r5,176(sp)
 8002918:	01c001c4 	movi	r7,7
 800291c:	dcc02d17 	ldw	r19,180(sp)
 8002920:	00000306 	br	8002930 <___vfprintf_internal_r+0x147c>
 8002924:	b5800204 	addi	r22,r22,8
 8002928:	843ffc04 	addi	r16,r16,-16
 800292c:	e4007b0e 	bge	fp,r16,8002b1c <___vfprintf_internal_r+0x1668>
 8002930:	18c00404 	addi	r3,r3,16
 8002934:	8c400044 	addi	r17,r17,1
 8002938:	b5000015 	stw	r20,0(r22)
 800293c:	b7000115 	stw	fp,4(r22)
 8002940:	d8c02015 	stw	r3,128(sp)
 8002944:	dc401f15 	stw	r17,124(sp)
 8002948:	3c7ff60e 	bge	r7,r17,8002924 <__alt_data_end+0xfc002924>
 800294c:	d9801e04 	addi	r6,sp,120
 8002950:	b80b883a 	mov	r5,r23
 8002954:	9809883a 	mov	r4,r19
 8002958:	d9c03c15 	stw	r7,240(sp)
 800295c:	8008c940 	call	8008c94 <__sprint_r>
 8002960:	d9c03c17 	ldw	r7,240(sp)
 8002964:	103bd71e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 8002968:	d8c02017 	ldw	r3,128(sp)
 800296c:	dc401f17 	ldw	r17,124(sp)
 8002970:	dd800404 	addi	r22,sp,16
 8002974:	003fec06 	br	8002928 <__alt_data_end+0xfc002928>
 8002978:	9080100c 	andi	r2,r18,64
 800297c:	d8002785 	stb	zero,158(sp)
 8002980:	10010e26 	beq	r2,zero,8002dbc <___vfprintf_internal_r+0x1908>
 8002984:	d9402e17 	ldw	r5,184(sp)
 8002988:	d8c02a17 	ldw	r3,168(sp)
 800298c:	002d883a 	mov	r22,zero
 8002990:	28800104 	addi	r2,r5,4
 8002994:	2cc0000b 	ldhu	r19,0(r5)
 8002998:	183fc90e 	bge	r3,zero,80028c0 <__alt_data_end+0xfc0028c0>
 800299c:	d8802e15 	stw	r2,184(sp)
 80029a0:	0039883a 	mov	fp,zero
 80029a4:	9d84b03a 	or	r2,r19,r22
 80029a8:	103c1e1e 	bne	r2,zero,8001a24 <__alt_data_end+0xfc001a24>
 80029ac:	00800044 	movi	r2,1
 80029b0:	003e6c06 	br	8002364 <__alt_data_end+0xfc002364>
 80029b4:	d9002d17 	ldw	r4,180(sp)
 80029b8:	d9801e04 	addi	r6,sp,120
 80029bc:	b80b883a 	mov	r5,r23
 80029c0:	8008c940 	call	8008c94 <__sprint_r>
 80029c4:	103bbf1e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 80029c8:	d8c02017 	ldw	r3,128(sp)
 80029cc:	da000404 	addi	r8,sp,16
 80029d0:	d9003217 	ldw	r4,200(sp)
 80029d4:	d8802617 	ldw	r2,152(sp)
 80029d8:	d9403317 	ldw	r5,204(sp)
 80029dc:	8123883a 	add	r17,r16,r4
 80029e0:	11400216 	blt	r2,r5,80029ec <___vfprintf_internal_r+0x1538>
 80029e4:	9100004c 	andi	r4,r18,1
 80029e8:	20000d26 	beq	r4,zero,8002a20 <___vfprintf_internal_r+0x156c>
 80029ec:	d9003717 	ldw	r4,220(sp)
 80029f0:	d9403417 	ldw	r5,208(sp)
 80029f4:	1907883a 	add	r3,r3,r4
 80029f8:	d9001f17 	ldw	r4,124(sp)
 80029fc:	41400015 	stw	r5,0(r8)
 8002a00:	d9403717 	ldw	r5,220(sp)
 8002a04:	21000044 	addi	r4,r4,1
 8002a08:	d8c02015 	stw	r3,128(sp)
 8002a0c:	41400115 	stw	r5,4(r8)
 8002a10:	d9001f15 	stw	r4,124(sp)
 8002a14:	014001c4 	movi	r5,7
 8002a18:	2901e816 	blt	r5,r4,80031bc <___vfprintf_internal_r+0x1d08>
 8002a1c:	42000204 	addi	r8,r8,8
 8002a20:	d9003317 	ldw	r4,204(sp)
 8002a24:	8121883a 	add	r16,r16,r4
 8002a28:	2085c83a 	sub	r2,r4,r2
 8002a2c:	8461c83a 	sub	r16,r16,r17
 8002a30:	1400010e 	bge	r2,r16,8002a38 <___vfprintf_internal_r+0x1584>
 8002a34:	1021883a 	mov	r16,r2
 8002a38:	04000a0e 	bge	zero,r16,8002a64 <___vfprintf_internal_r+0x15b0>
 8002a3c:	d9001f17 	ldw	r4,124(sp)
 8002a40:	1c07883a 	add	r3,r3,r16
 8002a44:	44400015 	stw	r17,0(r8)
 8002a48:	21000044 	addi	r4,r4,1
 8002a4c:	44000115 	stw	r16,4(r8)
 8002a50:	d8c02015 	stw	r3,128(sp)
 8002a54:	d9001f15 	stw	r4,124(sp)
 8002a58:	014001c4 	movi	r5,7
 8002a5c:	2901fb16 	blt	r5,r4,800324c <___vfprintf_internal_r+0x1d98>
 8002a60:	42000204 	addi	r8,r8,8
 8002a64:	8001f716 	blt	r16,zero,8003244 <___vfprintf_internal_r+0x1d90>
 8002a68:	1421c83a 	sub	r16,r2,r16
 8002a6c:	043d160e 	bge	zero,r16,8001ec8 <__alt_data_end+0xfc001ec8>
 8002a70:	04400404 	movi	r17,16
 8002a74:	d8801f17 	ldw	r2,124(sp)
 8002a78:	8c3efb0e 	bge	r17,r16,8002668 <__alt_data_end+0xfc002668>
 8002a7c:	01420074 	movhi	r5,2049
 8002a80:	29465184 	addi	r5,r5,6470
 8002a84:	d9402c15 	stw	r5,176(sp)
 8002a88:	058001c4 	movi	r22,7
 8002a8c:	dcc02d17 	ldw	r19,180(sp)
 8002a90:	00000306 	br	8002aa0 <___vfprintf_internal_r+0x15ec>
 8002a94:	42000204 	addi	r8,r8,8
 8002a98:	843ffc04 	addi	r16,r16,-16
 8002a9c:	8c3ef50e 	bge	r17,r16,8002674 <__alt_data_end+0xfc002674>
 8002aa0:	18c00404 	addi	r3,r3,16
 8002aa4:	10800044 	addi	r2,r2,1
 8002aa8:	45000015 	stw	r20,0(r8)
 8002aac:	44400115 	stw	r17,4(r8)
 8002ab0:	d8c02015 	stw	r3,128(sp)
 8002ab4:	d8801f15 	stw	r2,124(sp)
 8002ab8:	b0bff60e 	bge	r22,r2,8002a94 <__alt_data_end+0xfc002a94>
 8002abc:	d9801e04 	addi	r6,sp,120
 8002ac0:	b80b883a 	mov	r5,r23
 8002ac4:	9809883a 	mov	r4,r19
 8002ac8:	8008c940 	call	8008c94 <__sprint_r>
 8002acc:	103b7d1e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 8002ad0:	d8c02017 	ldw	r3,128(sp)
 8002ad4:	d8801f17 	ldw	r2,124(sp)
 8002ad8:	da000404 	addi	r8,sp,16
 8002adc:	003fee06 	br	8002a98 <__alt_data_end+0xfc002a98>
 8002ae0:	9088703a 	and	r4,r18,r2
 8002ae4:	203eab1e 	bne	r4,zero,8002594 <__alt_data_end+0xfc002594>
 8002ae8:	dc401f17 	ldw	r17,124(sp)
 8002aec:	40800115 	stw	r2,4(r8)
 8002af0:	44000015 	stw	r16,0(r8)
 8002af4:	8c400044 	addi	r17,r17,1
 8002af8:	d8c02015 	stw	r3,128(sp)
 8002afc:	dc401f15 	stw	r17,124(sp)
 8002b00:	008001c4 	movi	r2,7
 8002b04:	14400e16 	blt	r2,r17,8002b40 <___vfprintf_internal_r+0x168c>
 8002b08:	45800204 	addi	r22,r8,8
 8002b0c:	003eca06 	br	8002638 <__alt_data_end+0xfc002638>
 8002b10:	01020074 	movhi	r4,2049
 8002b14:	21065184 	addi	r4,r4,6470
 8002b18:	d9002c15 	stw	r4,176(sp)
 8002b1c:	d8802c17 	ldw	r2,176(sp)
 8002b20:	1c07883a 	add	r3,r3,r16
 8002b24:	8c400044 	addi	r17,r17,1
 8002b28:	b0800015 	stw	r2,0(r22)
 8002b2c:	b4000115 	stw	r16,4(r22)
 8002b30:	d8c02015 	stw	r3,128(sp)
 8002b34:	dc401f15 	stw	r17,124(sp)
 8002b38:	008001c4 	movi	r2,7
 8002b3c:	147ebd0e 	bge	r2,r17,8002634 <__alt_data_end+0xfc002634>
 8002b40:	d9002d17 	ldw	r4,180(sp)
 8002b44:	d9801e04 	addi	r6,sp,120
 8002b48:	b80b883a 	mov	r5,r23
 8002b4c:	8008c940 	call	8008c94 <__sprint_r>
 8002b50:	103b5c1e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 8002b54:	d8c02017 	ldw	r3,128(sp)
 8002b58:	dc401f17 	ldw	r17,124(sp)
 8002b5c:	dd800404 	addi	r22,sp,16
 8002b60:	003eb506 	br	8002638 <__alt_data_end+0xfc002638>
 8002b64:	d9002d17 	ldw	r4,180(sp)
 8002b68:	d9801e04 	addi	r6,sp,120
 8002b6c:	b80b883a 	mov	r5,r23
 8002b70:	8008c940 	call	8008c94 <__sprint_r>
 8002b74:	103b531e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 8002b78:	d8c02017 	ldw	r3,128(sp)
 8002b7c:	dc401f17 	ldw	r17,124(sp)
 8002b80:	da000404 	addi	r8,sp,16
 8002b84:	003e8d06 	br	80025bc <__alt_data_end+0xfc0025bc>
 8002b88:	d9002d17 	ldw	r4,180(sp)
 8002b8c:	d9801e04 	addi	r6,sp,120
 8002b90:	b80b883a 	mov	r5,r23
 8002b94:	8008c940 	call	8008c94 <__sprint_r>
 8002b98:	103b4a1e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 8002b9c:	d8c02017 	ldw	r3,128(sp)
 8002ba0:	dc401f17 	ldw	r17,124(sp)
 8002ba4:	dd800404 	addi	r22,sp,16
 8002ba8:	003e8f06 	br	80025e8 <__alt_data_end+0xfc0025e8>
 8002bac:	0027883a 	mov	r19,zero
 8002bb0:	003f4a06 	br	80028dc <__alt_data_end+0xfc0028dc>
 8002bb4:	d9002d17 	ldw	r4,180(sp)
 8002bb8:	d9801e04 	addi	r6,sp,120
 8002bbc:	b80b883a 	mov	r5,r23
 8002bc0:	8008c940 	call	8008c94 <__sprint_r>
 8002bc4:	103b3f1e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 8002bc8:	d8c02017 	ldw	r3,128(sp)
 8002bcc:	da000404 	addi	r8,sp,16
 8002bd0:	003c7b06 	br	8001dc0 <__alt_data_end+0xfc001dc0>
 8002bd4:	d9402a17 	ldw	r5,168(sp)
 8002bd8:	04e7c83a 	sub	r19,zero,r19
 8002bdc:	07000b44 	movi	fp,45
 8002be0:	9804c03a 	cmpne	r2,r19,zero
 8002be4:	05adc83a 	sub	r22,zero,r22
 8002be8:	df002785 	stb	fp,158(sp)
 8002bec:	b0adc83a 	sub	r22,r22,r2
 8002bf0:	28017b16 	blt	r5,zero,80031e0 <___vfprintf_internal_r+0x1d2c>
 8002bf4:	00bfdfc4 	movi	r2,-129
 8002bf8:	90a4703a 	and	r18,r18,r2
 8002bfc:	003b8906 	br	8001a24 <__alt_data_end+0xfc001a24>
 8002c00:	d9003617 	ldw	r4,216(sp)
 8002c04:	d9403817 	ldw	r5,224(sp)
 8002c08:	da003d15 	stw	r8,244(sp)
 8002c0c:	80088b80 	call	80088b8 <__fpclassifyd>
 8002c10:	da003d17 	ldw	r8,244(sp)
 8002c14:	1000f026 	beq	r2,zero,8002fd8 <___vfprintf_internal_r+0x1b24>
 8002c18:	d9002a17 	ldw	r4,168(sp)
 8002c1c:	05bff7c4 	movi	r22,-33
 8002c20:	00bfffc4 	movi	r2,-1
 8002c24:	8dac703a 	and	r22,r17,r22
 8002c28:	20820026 	beq	r4,r2,800342c <___vfprintf_internal_r+0x1f78>
 8002c2c:	008011c4 	movi	r2,71
 8002c30:	b081f726 	beq	r22,r2,8003410 <___vfprintf_internal_r+0x1f5c>
 8002c34:	d9003817 	ldw	r4,224(sp)
 8002c38:	90c04014 	ori	r3,r18,256
 8002c3c:	d8c02c15 	stw	r3,176(sp)
 8002c40:	20021516 	blt	r4,zero,8003498 <___vfprintf_internal_r+0x1fe4>
 8002c44:	dcc03817 	ldw	r19,224(sp)
 8002c48:	d8002905 	stb	zero,164(sp)
 8002c4c:	00801984 	movi	r2,102
 8002c50:	8881f926 	beq	r17,r2,8003438 <___vfprintf_internal_r+0x1f84>
 8002c54:	00801184 	movi	r2,70
 8002c58:	88821c26 	beq	r17,r2,80034cc <___vfprintf_internal_r+0x2018>
 8002c5c:	00801144 	movi	r2,69
 8002c60:	b081ef26 	beq	r22,r2,8003420 <___vfprintf_internal_r+0x1f6c>
 8002c64:	d8c02a17 	ldw	r3,168(sp)
 8002c68:	d8802104 	addi	r2,sp,132
 8002c6c:	d8800315 	stw	r2,12(sp)
 8002c70:	d9403617 	ldw	r5,216(sp)
 8002c74:	d8802504 	addi	r2,sp,148
 8002c78:	d9002d17 	ldw	r4,180(sp)
 8002c7c:	d8800215 	stw	r2,8(sp)
 8002c80:	d8802604 	addi	r2,sp,152
 8002c84:	d8c00015 	stw	r3,0(sp)
 8002c88:	d8800115 	stw	r2,4(sp)
 8002c8c:	01c00084 	movi	r7,2
 8002c90:	980d883a 	mov	r6,r19
 8002c94:	d8c03c15 	stw	r3,240(sp)
 8002c98:	da003d15 	stw	r8,244(sp)
 8002c9c:	8003be40 	call	8003be4 <_dtoa_r>
 8002ca0:	1021883a 	mov	r16,r2
 8002ca4:	008019c4 	movi	r2,103
 8002ca8:	d8c03c17 	ldw	r3,240(sp)
 8002cac:	da003d17 	ldw	r8,244(sp)
 8002cb0:	88817126 	beq	r17,r2,8003278 <___vfprintf_internal_r+0x1dc4>
 8002cb4:	008011c4 	movi	r2,71
 8002cb8:	88829126 	beq	r17,r2,8003700 <___vfprintf_internal_r+0x224c>
 8002cbc:	80f9883a 	add	fp,r16,r3
 8002cc0:	d9003617 	ldw	r4,216(sp)
 8002cc4:	000d883a 	mov	r6,zero
 8002cc8:	000f883a 	mov	r7,zero
 8002ccc:	980b883a 	mov	r5,r19
 8002cd0:	da003d15 	stw	r8,244(sp)
 8002cd4:	800cbcc0 	call	800cbcc <__eqdf2>
 8002cd8:	da003d17 	ldw	r8,244(sp)
 8002cdc:	10018d26 	beq	r2,zero,8003314 <___vfprintf_internal_r+0x1e60>
 8002ce0:	d8802117 	ldw	r2,132(sp)
 8002ce4:	1700062e 	bgeu	r2,fp,8002d00 <___vfprintf_internal_r+0x184c>
 8002ce8:	01000c04 	movi	r4,48
 8002cec:	10c00044 	addi	r3,r2,1
 8002cf0:	d8c02115 	stw	r3,132(sp)
 8002cf4:	11000005 	stb	r4,0(r2)
 8002cf8:	d8802117 	ldw	r2,132(sp)
 8002cfc:	173ffb36 	bltu	r2,fp,8002cec <__alt_data_end+0xfc002cec>
 8002d00:	1405c83a 	sub	r2,r2,r16
 8002d04:	d8803315 	stw	r2,204(sp)
 8002d08:	008011c4 	movi	r2,71
 8002d0c:	b0817626 	beq	r22,r2,80032e8 <___vfprintf_internal_r+0x1e34>
 8002d10:	00801944 	movi	r2,101
 8002d14:	1442800e 	bge	r2,r17,8003718 <___vfprintf_internal_r+0x2264>
 8002d18:	d8c02617 	ldw	r3,152(sp)
 8002d1c:	00801984 	movi	r2,102
 8002d20:	d8c03215 	stw	r3,200(sp)
 8002d24:	8881fe26 	beq	r17,r2,8003520 <___vfprintf_internal_r+0x206c>
 8002d28:	d8c03217 	ldw	r3,200(sp)
 8002d2c:	d9003317 	ldw	r4,204(sp)
 8002d30:	1901dd16 	blt	r3,r4,80034a8 <___vfprintf_internal_r+0x1ff4>
 8002d34:	9480004c 	andi	r18,r18,1
 8002d38:	90022b1e 	bne	r18,zero,80035e8 <___vfprintf_internal_r+0x2134>
 8002d3c:	1805883a 	mov	r2,r3
 8002d40:	18028316 	blt	r3,zero,8003750 <___vfprintf_internal_r+0x229c>
 8002d44:	d8c03217 	ldw	r3,200(sp)
 8002d48:	044019c4 	movi	r17,103
 8002d4c:	d8c02b15 	stw	r3,172(sp)
 8002d50:	df002907 	ldb	fp,164(sp)
 8002d54:	e001531e 	bne	fp,zero,80032a4 <___vfprintf_internal_r+0x1df0>
 8002d58:	df002783 	ldbu	fp,158(sp)
 8002d5c:	d8802915 	stw	r2,164(sp)
 8002d60:	dc802c17 	ldw	r18,176(sp)
 8002d64:	d8002a15 	stw	zero,168(sp)
 8002d68:	003baf06 	br	8001c28 <__alt_data_end+0xfc001c28>
 8002d6c:	d8c02e17 	ldw	r3,184(sp)
 8002d70:	d9002e17 	ldw	r4,184(sp)
 8002d74:	d9402e17 	ldw	r5,184(sp)
 8002d78:	18c00017 	ldw	r3,0(r3)
 8002d7c:	21000117 	ldw	r4,4(r4)
 8002d80:	29400204 	addi	r5,r5,8
 8002d84:	d8c03615 	stw	r3,216(sp)
 8002d88:	d9003815 	stw	r4,224(sp)
 8002d8c:	d9402e15 	stw	r5,184(sp)
 8002d90:	003b5006 	br	8001ad4 <__alt_data_end+0xfc001ad4>
 8002d94:	ac400007 	ldb	r17,0(r21)
 8002d98:	003a2806 	br	800163c <__alt_data_end+0xfc00163c>
 8002d9c:	9080100c 	andi	r2,r18,64
 8002da0:	1000a826 	beq	r2,zero,8003044 <___vfprintf_internal_r+0x1b90>
 8002da4:	d8c02e17 	ldw	r3,184(sp)
 8002da8:	002d883a 	mov	r22,zero
 8002dac:	1cc0000b 	ldhu	r19,0(r3)
 8002db0:	18c00104 	addi	r3,r3,4
 8002db4:	d8c02e15 	stw	r3,184(sp)
 8002db8:	003caf06 	br	8002078 <__alt_data_end+0xfc002078>
 8002dbc:	d9002e17 	ldw	r4,184(sp)
 8002dc0:	d9402a17 	ldw	r5,168(sp)
 8002dc4:	002d883a 	mov	r22,zero
 8002dc8:	20800104 	addi	r2,r4,4
 8002dcc:	24c00017 	ldw	r19,0(r4)
 8002dd0:	283ebb0e 	bge	r5,zero,80028c0 <__alt_data_end+0xfc0028c0>
 8002dd4:	003ef106 	br	800299c <__alt_data_end+0xfc00299c>
 8002dd8:	9080040c 	andi	r2,r18,16
 8002ddc:	1000921e 	bne	r2,zero,8003028 <___vfprintf_internal_r+0x1b74>
 8002de0:	9480100c 	andi	r18,r18,64
 8002de4:	90013926 	beq	r18,zero,80032cc <___vfprintf_internal_r+0x1e18>
 8002de8:	d9402e17 	ldw	r5,184(sp)
 8002dec:	d8c02f17 	ldw	r3,188(sp)
 8002df0:	28800017 	ldw	r2,0(r5)
 8002df4:	29400104 	addi	r5,r5,4
 8002df8:	d9402e15 	stw	r5,184(sp)
 8002dfc:	10c0000d 	sth	r3,0(r2)
 8002e00:	0039e406 	br	8001594 <__alt_data_end+0xfc001594>
 8002e04:	9080100c 	andi	r2,r18,64
 8002e08:	10008026 	beq	r2,zero,800300c <___vfprintf_internal_r+0x1b58>
 8002e0c:	d8802e17 	ldw	r2,184(sp)
 8002e10:	14c0000f 	ldh	r19,0(r2)
 8002e14:	10800104 	addi	r2,r2,4
 8002e18:	d8802e15 	stw	r2,184(sp)
 8002e1c:	982dd7fa 	srai	r22,r19,31
 8002e20:	b005883a 	mov	r2,r22
 8002e24:	003af706 	br	8001a04 <__alt_data_end+0xfc001a04>
 8002e28:	9080100c 	andi	r2,r18,64
 8002e2c:	d8002785 	stb	zero,158(sp)
 8002e30:	10008a1e 	bne	r2,zero,800305c <___vfprintf_internal_r+0x1ba8>
 8002e34:	d9002e17 	ldw	r4,184(sp)
 8002e38:	d9402a17 	ldw	r5,168(sp)
 8002e3c:	002d883a 	mov	r22,zero
 8002e40:	20800104 	addi	r2,r4,4
 8002e44:	24c00017 	ldw	r19,0(r4)
 8002e48:	283e4b0e 	bge	r5,zero,8002778 <__alt_data_end+0xfc002778>
 8002e4c:	9d86b03a 	or	r3,r19,r22
 8002e50:	d8802e15 	stw	r2,184(sp)
 8002e54:	183e4c1e 	bne	r3,zero,8002788 <__alt_data_end+0xfc002788>
 8002e58:	0039883a 	mov	fp,zero
 8002e5c:	0005883a 	mov	r2,zero
 8002e60:	003d4006 	br	8002364 <__alt_data_end+0xfc002364>
 8002e64:	01420074 	movhi	r5,2049
 8002e68:	29465184 	addi	r5,r5,6470
 8002e6c:	d9402c15 	stw	r5,176(sp)
 8002e70:	d9402c17 	ldw	r5,176(sp)
 8002e74:	1c47883a 	add	r3,r3,r17
 8002e78:	10800044 	addi	r2,r2,1
 8002e7c:	41400015 	stw	r5,0(r8)
 8002e80:	44400115 	stw	r17,4(r8)
 8002e84:	d8c02015 	stw	r3,128(sp)
 8002e88:	d8801f15 	stw	r2,124(sp)
 8002e8c:	010001c4 	movi	r4,7
 8002e90:	20bec816 	blt	r4,r2,80029b4 <__alt_data_end+0xfc0029b4>
 8002e94:	42000204 	addi	r8,r8,8
 8002e98:	003ecd06 	br	80029d0 <__alt_data_end+0xfc0029d0>
 8002e9c:	d9002a17 	ldw	r4,168(sp)
 8002ea0:	d8002785 	stb	zero,158(sp)
 8002ea4:	203d2d16 	blt	r4,zero,800235c <__alt_data_end+0xfc00235c>
 8002ea8:	00bfdfc4 	movi	r2,-129
 8002eac:	90a4703a 	and	r18,r18,r2
 8002eb0:	003a6106 	br	8001838 <__alt_data_end+0xfc001838>
 8002eb4:	01020074 	movhi	r4,2049
 8002eb8:	21065184 	addi	r4,r4,6470
 8002ebc:	d9002c15 	stw	r4,176(sp)
 8002ec0:	003bea06 	br	8001e6c <__alt_data_end+0xfc001e6c>
 8002ec4:	d9002d17 	ldw	r4,180(sp)
 8002ec8:	d9801e04 	addi	r6,sp,120
 8002ecc:	b80b883a 	mov	r5,r23
 8002ed0:	8008c940 	call	8008c94 <__sprint_r>
 8002ed4:	103a7b1e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 8002ed8:	d8c02017 	ldw	r3,128(sp)
 8002edc:	da000404 	addi	r8,sp,16
 8002ee0:	003d4106 	br	80023e8 <__alt_data_end+0xfc0023e8>
 8002ee4:	d8801f17 	ldw	r2,124(sp)
 8002ee8:	01420074 	movhi	r5,2049
 8002eec:	01000044 	movi	r4,1
 8002ef0:	18c00044 	addi	r3,r3,1
 8002ef4:	10800044 	addi	r2,r2,1
 8002ef8:	29465104 	addi	r5,r5,6468
 8002efc:	41000115 	stw	r4,4(r8)
 8002f00:	41400015 	stw	r5,0(r8)
 8002f04:	d8c02015 	stw	r3,128(sp)
 8002f08:	d8801f15 	stw	r2,124(sp)
 8002f0c:	010001c4 	movi	r4,7
 8002f10:	20805c16 	blt	r4,r2,8003084 <___vfprintf_internal_r+0x1bd0>
 8002f14:	42000204 	addi	r8,r8,8
 8002f18:	8800041e 	bne	r17,zero,8002f2c <___vfprintf_internal_r+0x1a78>
 8002f1c:	d8803317 	ldw	r2,204(sp)
 8002f20:	1000021e 	bne	r2,zero,8002f2c <___vfprintf_internal_r+0x1a78>
 8002f24:	9080004c 	andi	r2,r18,1
 8002f28:	103be726 	beq	r2,zero,8001ec8 <__alt_data_end+0xfc001ec8>
 8002f2c:	d9003717 	ldw	r4,220(sp)
 8002f30:	d8801f17 	ldw	r2,124(sp)
 8002f34:	d9403417 	ldw	r5,208(sp)
 8002f38:	20c7883a 	add	r3,r4,r3
 8002f3c:	10800044 	addi	r2,r2,1
 8002f40:	41000115 	stw	r4,4(r8)
 8002f44:	41400015 	stw	r5,0(r8)
 8002f48:	d8c02015 	stw	r3,128(sp)
 8002f4c:	d8801f15 	stw	r2,124(sp)
 8002f50:	010001c4 	movi	r4,7
 8002f54:	20812116 	blt	r4,r2,80033dc <___vfprintf_internal_r+0x1f28>
 8002f58:	42000204 	addi	r8,r8,8
 8002f5c:	0463c83a 	sub	r17,zero,r17
 8002f60:	0440730e 	bge	zero,r17,8003130 <___vfprintf_internal_r+0x1c7c>
 8002f64:	05800404 	movi	r22,16
 8002f68:	b440860e 	bge	r22,r17,8003184 <___vfprintf_internal_r+0x1cd0>
 8002f6c:	01420074 	movhi	r5,2049
 8002f70:	29465184 	addi	r5,r5,6470
 8002f74:	d9402c15 	stw	r5,176(sp)
 8002f78:	070001c4 	movi	fp,7
 8002f7c:	dcc02d17 	ldw	r19,180(sp)
 8002f80:	00000306 	br	8002f90 <___vfprintf_internal_r+0x1adc>
 8002f84:	42000204 	addi	r8,r8,8
 8002f88:	8c7ffc04 	addi	r17,r17,-16
 8002f8c:	b440800e 	bge	r22,r17,8003190 <___vfprintf_internal_r+0x1cdc>
 8002f90:	18c00404 	addi	r3,r3,16
 8002f94:	10800044 	addi	r2,r2,1
 8002f98:	45000015 	stw	r20,0(r8)
 8002f9c:	45800115 	stw	r22,4(r8)
 8002fa0:	d8c02015 	stw	r3,128(sp)
 8002fa4:	d8801f15 	stw	r2,124(sp)
 8002fa8:	e0bff60e 	bge	fp,r2,8002f84 <__alt_data_end+0xfc002f84>
 8002fac:	d9801e04 	addi	r6,sp,120
 8002fb0:	b80b883a 	mov	r5,r23
 8002fb4:	9809883a 	mov	r4,r19
 8002fb8:	8008c940 	call	8008c94 <__sprint_r>
 8002fbc:	103a411e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 8002fc0:	d8c02017 	ldw	r3,128(sp)
 8002fc4:	d8801f17 	ldw	r2,124(sp)
 8002fc8:	da000404 	addi	r8,sp,16
 8002fcc:	003fee06 	br	8002f88 <__alt_data_end+0xfc002f88>
 8002fd0:	00bfffc4 	movi	r2,-1
 8002fd4:	003a3f06 	br	80018d4 <__alt_data_end+0xfc0018d4>
 8002fd8:	008011c4 	movi	r2,71
 8002fdc:	1440b816 	blt	r2,r17,80032c0 <___vfprintf_internal_r+0x1e0c>
 8002fe0:	04020074 	movhi	r16,2049
 8002fe4:	84064304 	addi	r16,r16,6412
 8002fe8:	00c000c4 	movi	r3,3
 8002fec:	00bfdfc4 	movi	r2,-129
 8002ff0:	d8c02915 	stw	r3,164(sp)
 8002ff4:	90a4703a 	and	r18,r18,r2
 8002ff8:	df002783 	ldbu	fp,158(sp)
 8002ffc:	d8c02b15 	stw	r3,172(sp)
 8003000:	d8002a15 	stw	zero,168(sp)
 8003004:	d8003215 	stw	zero,200(sp)
 8003008:	003b0706 	br	8001c28 <__alt_data_end+0xfc001c28>
 800300c:	d8c02e17 	ldw	r3,184(sp)
 8003010:	1cc00017 	ldw	r19,0(r3)
 8003014:	18c00104 	addi	r3,r3,4
 8003018:	d8c02e15 	stw	r3,184(sp)
 800301c:	982dd7fa 	srai	r22,r19,31
 8003020:	b005883a 	mov	r2,r22
 8003024:	003a7706 	br	8001a04 <__alt_data_end+0xfc001a04>
 8003028:	d8c02e17 	ldw	r3,184(sp)
 800302c:	d9002f17 	ldw	r4,188(sp)
 8003030:	18800017 	ldw	r2,0(r3)
 8003034:	18c00104 	addi	r3,r3,4
 8003038:	d8c02e15 	stw	r3,184(sp)
 800303c:	11000015 	stw	r4,0(r2)
 8003040:	00395406 	br	8001594 <__alt_data_end+0xfc001594>
 8003044:	d9002e17 	ldw	r4,184(sp)
 8003048:	002d883a 	mov	r22,zero
 800304c:	24c00017 	ldw	r19,0(r4)
 8003050:	21000104 	addi	r4,r4,4
 8003054:	d9002e15 	stw	r4,184(sp)
 8003058:	003c0706 	br	8002078 <__alt_data_end+0xfc002078>
 800305c:	d9402e17 	ldw	r5,184(sp)
 8003060:	d8c02a17 	ldw	r3,168(sp)
 8003064:	002d883a 	mov	r22,zero
 8003068:	28800104 	addi	r2,r5,4
 800306c:	2cc0000b 	ldhu	r19,0(r5)
 8003070:	183dc10e 	bge	r3,zero,8002778 <__alt_data_end+0xfc002778>
 8003074:	003f7506 	br	8002e4c <__alt_data_end+0xfc002e4c>
 8003078:	04020074 	movhi	r16,2049
 800307c:	84064104 	addi	r16,r16,6404
 8003080:	003aa706 	br	8001b20 <__alt_data_end+0xfc001b20>
 8003084:	d9002d17 	ldw	r4,180(sp)
 8003088:	d9801e04 	addi	r6,sp,120
 800308c:	b80b883a 	mov	r5,r23
 8003090:	8008c940 	call	8008c94 <__sprint_r>
 8003094:	103a0b1e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 8003098:	dc402617 	ldw	r17,152(sp)
 800309c:	d8c02017 	ldw	r3,128(sp)
 80030a0:	da000404 	addi	r8,sp,16
 80030a4:	003f9c06 	br	8002f18 <__alt_data_end+0xfc002f18>
 80030a8:	ac400043 	ldbu	r17,1(r21)
 80030ac:	84000814 	ori	r16,r16,32
 80030b0:	ad400044 	addi	r21,r21,1
 80030b4:	8c403fcc 	andi	r17,r17,255
 80030b8:	8c40201c 	xori	r17,r17,128
 80030bc:	8c7fe004 	addi	r17,r17,-128
 80030c0:	00395e06 	br	800163c <__alt_data_end+0xfc00163c>
 80030c4:	d8c02e15 	stw	r3,184(sp)
 80030c8:	0039883a 	mov	fp,zero
 80030cc:	003e3506 	br	80029a4 <__alt_data_end+0xfc0029a4>
 80030d0:	d9002d17 	ldw	r4,180(sp)
 80030d4:	d9801e04 	addi	r6,sp,120
 80030d8:	b80b883a 	mov	r5,r23
 80030dc:	8008c940 	call	8008c94 <__sprint_r>
 80030e0:	1039f81e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 80030e4:	d8c02017 	ldw	r3,128(sp)
 80030e8:	da000404 	addi	r8,sp,16
 80030ec:	003cd006 	br	8002430 <__alt_data_end+0xfc002430>
 80030f0:	8009883a 	mov	r4,r16
 80030f4:	df003d15 	stw	fp,244(sp)
 80030f8:	800141c0 	call	800141c <strlen>
 80030fc:	d8802b15 	stw	r2,172(sp)
 8003100:	da003d17 	ldw	r8,244(sp)
 8003104:	103c200e 	bge	r2,zero,8002188 <__alt_data_end+0xfc002188>
 8003108:	0005883a 	mov	r2,zero
 800310c:	003c1e06 	br	8002188 <__alt_data_end+0xfc002188>
 8003110:	d9002d17 	ldw	r4,180(sp)
 8003114:	d9801e04 	addi	r6,sp,120
 8003118:	b80b883a 	mov	r5,r23
 800311c:	8008c940 	call	8008c94 <__sprint_r>
 8003120:	1039e81e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 8003124:	d8c02017 	ldw	r3,128(sp)
 8003128:	d8801f17 	ldw	r2,124(sp)
 800312c:	da000404 	addi	r8,sp,16
 8003130:	d9403317 	ldw	r5,204(sp)
 8003134:	10800044 	addi	r2,r2,1
 8003138:	44000015 	stw	r16,0(r8)
 800313c:	28c7883a 	add	r3,r5,r3
 8003140:	003b5b06 	br	8001eb0 <__alt_data_end+0xfc001eb0>
 8003144:	01020074 	movhi	r4,2049
 8003148:	21065584 	addi	r4,r4,6486
 800314c:	d9003515 	stw	r4,212(sp)
 8003150:	003af206 	br	8001d1c <__alt_data_end+0xfc001d1c>
 8003154:	013fffc4 	movi	r4,-1
 8003158:	003a0806 	br	800197c <__alt_data_end+0xfc00197c>
 800315c:	0023883a 	mov	r17,zero
 8003160:	003d9d06 	br	80027d8 <__alt_data_end+0xfc0027d8>
 8003164:	d9002d17 	ldw	r4,180(sp)
 8003168:	d9801e04 	addi	r6,sp,120
 800316c:	b80b883a 	mov	r5,r23
 8003170:	8008c940 	call	8008c94 <__sprint_r>
 8003174:	1039d31e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 8003178:	d8c02017 	ldw	r3,128(sp)
 800317c:	da000404 	addi	r8,sp,16
 8003180:	003d9406 	br	80027d4 <__alt_data_end+0xfc0027d4>
 8003184:	01020074 	movhi	r4,2049
 8003188:	21065184 	addi	r4,r4,6470
 800318c:	d9002c15 	stw	r4,176(sp)
 8003190:	d9002c17 	ldw	r4,176(sp)
 8003194:	1c47883a 	add	r3,r3,r17
 8003198:	10800044 	addi	r2,r2,1
 800319c:	41000015 	stw	r4,0(r8)
 80031a0:	44400115 	stw	r17,4(r8)
 80031a4:	d8c02015 	stw	r3,128(sp)
 80031a8:	d8801f15 	stw	r2,124(sp)
 80031ac:	010001c4 	movi	r4,7
 80031b0:	20bfd716 	blt	r4,r2,8003110 <__alt_data_end+0xfc003110>
 80031b4:	42000204 	addi	r8,r8,8
 80031b8:	003fdd06 	br	8003130 <__alt_data_end+0xfc003130>
 80031bc:	d9002d17 	ldw	r4,180(sp)
 80031c0:	d9801e04 	addi	r6,sp,120
 80031c4:	b80b883a 	mov	r5,r23
 80031c8:	8008c940 	call	8008c94 <__sprint_r>
 80031cc:	1039bd1e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 80031d0:	d8802617 	ldw	r2,152(sp)
 80031d4:	d8c02017 	ldw	r3,128(sp)
 80031d8:	da000404 	addi	r8,sp,16
 80031dc:	003e1006 	br	8002a20 <__alt_data_end+0xfc002a20>
 80031e0:	00800044 	movi	r2,1
 80031e4:	10803fcc 	andi	r2,r2,255
 80031e8:	00c00044 	movi	r3,1
 80031ec:	10fa0d26 	beq	r2,r3,8001a24 <__alt_data_end+0xfc001a24>
 80031f0:	00c00084 	movi	r3,2
 80031f4:	10fbaf26 	beq	r2,r3,80020b4 <__alt_data_end+0xfc0020b4>
 80031f8:	003a6d06 	br	8001bb0 <__alt_data_end+0xfc001bb0>
 80031fc:	01020074 	movhi	r4,2049
 8003200:	21065584 	addi	r4,r4,6486
 8003204:	d9003515 	stw	r4,212(sp)
 8003208:	003b5406 	br	8001f5c <__alt_data_end+0xfc001f5c>
 800320c:	d8802a17 	ldw	r2,168(sp)
 8003210:	00c00184 	movi	r3,6
 8003214:	1880012e 	bgeu	r3,r2,800321c <___vfprintf_internal_r+0x1d68>
 8003218:	1805883a 	mov	r2,r3
 800321c:	d8802b15 	stw	r2,172(sp)
 8003220:	1000ef16 	blt	r2,zero,80035e0 <___vfprintf_internal_r+0x212c>
 8003224:	04020074 	movhi	r16,2049
 8003228:	d8802915 	stw	r2,164(sp)
 800322c:	dcc02e15 	stw	r19,184(sp)
 8003230:	d8002a15 	stw	zero,168(sp)
 8003234:	d8003215 	stw	zero,200(sp)
 8003238:	84064f04 	addi	r16,r16,6460
 800323c:	0039883a 	mov	fp,zero
 8003240:	003a8006 	br	8001c44 <__alt_data_end+0xfc001c44>
 8003244:	0021883a 	mov	r16,zero
 8003248:	003e0706 	br	8002a68 <__alt_data_end+0xfc002a68>
 800324c:	d9002d17 	ldw	r4,180(sp)
 8003250:	d9801e04 	addi	r6,sp,120
 8003254:	b80b883a 	mov	r5,r23
 8003258:	8008c940 	call	8008c94 <__sprint_r>
 800325c:	1039991e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 8003260:	d8802617 	ldw	r2,152(sp)
 8003264:	d9403317 	ldw	r5,204(sp)
 8003268:	d8c02017 	ldw	r3,128(sp)
 800326c:	da000404 	addi	r8,sp,16
 8003270:	2885c83a 	sub	r2,r5,r2
 8003274:	003dfb06 	br	8002a64 <__alt_data_end+0xfc002a64>
 8003278:	9080004c 	andi	r2,r18,1
 800327c:	103e8f1e 	bne	r2,zero,8002cbc <__alt_data_end+0xfc002cbc>
 8003280:	d8802117 	ldw	r2,132(sp)
 8003284:	003e9e06 	br	8002d00 <__alt_data_end+0xfc002d00>
 8003288:	1025883a 	mov	r18,r2
 800328c:	0039883a 	mov	fp,zero
 8003290:	00800084 	movi	r2,2
 8003294:	003fd306 	br	80031e4 <__alt_data_end+0xfc0031e4>
 8003298:	07000b44 	movi	fp,45
 800329c:	df002785 	stb	fp,158(sp)
 80032a0:	003a1b06 	br	8001b10 <__alt_data_end+0xfc001b10>
 80032a4:	00c00b44 	movi	r3,45
 80032a8:	d8c02785 	stb	r3,158(sp)
 80032ac:	d8802915 	stw	r2,164(sp)
 80032b0:	dc802c17 	ldw	r18,176(sp)
 80032b4:	d8002a15 	stw	zero,168(sp)
 80032b8:	07000b44 	movi	fp,45
 80032bc:	003a5e06 	br	8001c38 <__alt_data_end+0xfc001c38>
 80032c0:	04020074 	movhi	r16,2049
 80032c4:	84064404 	addi	r16,r16,6416
 80032c8:	003f4706 	br	8002fe8 <__alt_data_end+0xfc002fe8>
 80032cc:	d9002e17 	ldw	r4,184(sp)
 80032d0:	d9402f17 	ldw	r5,188(sp)
 80032d4:	20800017 	ldw	r2,0(r4)
 80032d8:	21000104 	addi	r4,r4,4
 80032dc:	d9002e15 	stw	r4,184(sp)
 80032e0:	11400015 	stw	r5,0(r2)
 80032e4:	0038ab06 	br	8001594 <__alt_data_end+0xfc001594>
 80032e8:	dd802617 	ldw	r22,152(sp)
 80032ec:	00bfff44 	movi	r2,-3
 80032f0:	b0801c16 	blt	r22,r2,8003364 <___vfprintf_internal_r+0x1eb0>
 80032f4:	d9402a17 	ldw	r5,168(sp)
 80032f8:	2d801a16 	blt	r5,r22,8003364 <___vfprintf_internal_r+0x1eb0>
 80032fc:	dd803215 	stw	r22,200(sp)
 8003300:	003e8906 	br	8002d28 <__alt_data_end+0xfc002d28>
 8003304:	01020074 	movhi	r4,2049
 8003308:	21065184 	addi	r4,r4,6470
 800330c:	d9002c15 	stw	r4,176(sp)
 8003310:	003c9106 	br	8002558 <__alt_data_end+0xfc002558>
 8003314:	e005883a 	mov	r2,fp
 8003318:	003e7906 	br	8002d00 <__alt_data_end+0xfc002d00>
 800331c:	d9002a17 	ldw	r4,168(sp)
 8003320:	df002783 	ldbu	fp,158(sp)
 8003324:	dcc02e15 	stw	r19,184(sp)
 8003328:	d9002915 	stw	r4,164(sp)
 800332c:	d9002b15 	stw	r4,172(sp)
 8003330:	d8002a15 	stw	zero,168(sp)
 8003334:	d8003215 	stw	zero,200(sp)
 8003338:	003a3b06 	br	8001c28 <__alt_data_end+0xfc001c28>
 800333c:	9080004c 	andi	r2,r18,1
 8003340:	0039883a 	mov	fp,zero
 8003344:	10000426 	beq	r2,zero,8003358 <___vfprintf_internal_r+0x1ea4>
 8003348:	00800c04 	movi	r2,48
 800334c:	dc001dc4 	addi	r16,sp,119
 8003350:	d8801dc5 	stb	r2,119(sp)
 8003354:	003b6406 	br	80020e8 <__alt_data_end+0xfc0020e8>
 8003358:	d8002b15 	stw	zero,172(sp)
 800335c:	dc001e04 	addi	r16,sp,120
 8003360:	003a2b06 	br	8001c10 <__alt_data_end+0xfc001c10>
 8003364:	8c7fff84 	addi	r17,r17,-2
 8003368:	b5bfffc4 	addi	r22,r22,-1
 800336c:	dd802615 	stw	r22,152(sp)
 8003370:	dc4022c5 	stb	r17,139(sp)
 8003374:	b000bf16 	blt	r22,zero,8003674 <___vfprintf_internal_r+0x21c0>
 8003378:	00800ac4 	movi	r2,43
 800337c:	d8802305 	stb	r2,140(sp)
 8003380:	00800244 	movi	r2,9
 8003384:	15807016 	blt	r2,r22,8003548 <___vfprintf_internal_r+0x2094>
 8003388:	00800c04 	movi	r2,48
 800338c:	b5800c04 	addi	r22,r22,48
 8003390:	d8802345 	stb	r2,141(sp)
 8003394:	dd802385 	stb	r22,142(sp)
 8003398:	d88023c4 	addi	r2,sp,143
 800339c:	df0022c4 	addi	fp,sp,139
 80033a0:	d8c03317 	ldw	r3,204(sp)
 80033a4:	1739c83a 	sub	fp,r2,fp
 80033a8:	d9003317 	ldw	r4,204(sp)
 80033ac:	e0c7883a 	add	r3,fp,r3
 80033b0:	df003a15 	stw	fp,232(sp)
 80033b4:	d8c02b15 	stw	r3,172(sp)
 80033b8:	00800044 	movi	r2,1
 80033bc:	1100b30e 	bge	r2,r4,800368c <___vfprintf_internal_r+0x21d8>
 80033c0:	d8c02b17 	ldw	r3,172(sp)
 80033c4:	18c00044 	addi	r3,r3,1
 80033c8:	d8c02b15 	stw	r3,172(sp)
 80033cc:	1805883a 	mov	r2,r3
 80033d0:	1800ac16 	blt	r3,zero,8003684 <___vfprintf_internal_r+0x21d0>
 80033d4:	d8003215 	stw	zero,200(sp)
 80033d8:	003e5d06 	br	8002d50 <__alt_data_end+0xfc002d50>
 80033dc:	d9002d17 	ldw	r4,180(sp)
 80033e0:	d9801e04 	addi	r6,sp,120
 80033e4:	b80b883a 	mov	r5,r23
 80033e8:	8008c940 	call	8008c94 <__sprint_r>
 80033ec:	1039351e 	bne	r2,zero,80018c4 <__alt_data_end+0xfc0018c4>
 80033f0:	dc402617 	ldw	r17,152(sp)
 80033f4:	d8c02017 	ldw	r3,128(sp)
 80033f8:	d8801f17 	ldw	r2,124(sp)
 80033fc:	da000404 	addi	r8,sp,16
 8003400:	003ed606 	br	8002f5c <__alt_data_end+0xfc002f5c>
 8003404:	182b883a 	mov	r21,r3
 8003408:	d8002a15 	stw	zero,168(sp)
 800340c:	00388c06 	br	8001640 <__alt_data_end+0xfc001640>
 8003410:	d8802a17 	ldw	r2,168(sp)
 8003414:	103e071e 	bne	r2,zero,8002c34 <__alt_data_end+0xfc002c34>
 8003418:	dc002a15 	stw	r16,168(sp)
 800341c:	003e0506 	br	8002c34 <__alt_data_end+0xfc002c34>
 8003420:	d9002a17 	ldw	r4,168(sp)
 8003424:	20c00044 	addi	r3,r4,1
 8003428:	003e0f06 	br	8002c68 <__alt_data_end+0xfc002c68>
 800342c:	01400184 	movi	r5,6
 8003430:	d9402a15 	stw	r5,168(sp)
 8003434:	003dff06 	br	8002c34 <__alt_data_end+0xfc002c34>
 8003438:	d8802104 	addi	r2,sp,132
 800343c:	d8800315 	stw	r2,12(sp)
 8003440:	d8802504 	addi	r2,sp,148
 8003444:	d8800215 	stw	r2,8(sp)
 8003448:	d8802604 	addi	r2,sp,152
 800344c:	d8800115 	stw	r2,4(sp)
 8003450:	d8802a17 	ldw	r2,168(sp)
 8003454:	d9403617 	ldw	r5,216(sp)
 8003458:	d9002d17 	ldw	r4,180(sp)
 800345c:	d8800015 	stw	r2,0(sp)
 8003460:	01c000c4 	movi	r7,3
 8003464:	980d883a 	mov	r6,r19
 8003468:	da003d15 	stw	r8,244(sp)
 800346c:	8003be40 	call	8003be4 <_dtoa_r>
 8003470:	d8c02a17 	ldw	r3,168(sp)
 8003474:	da003d17 	ldw	r8,244(sp)
 8003478:	1021883a 	mov	r16,r2
 800347c:	10f9883a 	add	fp,r2,r3
 8003480:	81000007 	ldb	r4,0(r16)
 8003484:	00800c04 	movi	r2,48
 8003488:	20805e26 	beq	r4,r2,8003604 <___vfprintf_internal_r+0x2150>
 800348c:	d8c02617 	ldw	r3,152(sp)
 8003490:	e0f9883a 	add	fp,fp,r3
 8003494:	003e0a06 	br	8002cc0 <__alt_data_end+0xfc002cc0>
 8003498:	00c00b44 	movi	r3,45
 800349c:	24e0003c 	xorhi	r19,r4,32768
 80034a0:	d8c02905 	stb	r3,164(sp)
 80034a4:	003de906 	br	8002c4c <__alt_data_end+0xfc002c4c>
 80034a8:	d8c03217 	ldw	r3,200(sp)
 80034ac:	00c07a0e 	bge	zero,r3,8003698 <___vfprintf_internal_r+0x21e4>
 80034b0:	00800044 	movi	r2,1
 80034b4:	d9003317 	ldw	r4,204(sp)
 80034b8:	1105883a 	add	r2,r2,r4
 80034bc:	d8802b15 	stw	r2,172(sp)
 80034c0:	10004e16 	blt	r2,zero,80035fc <___vfprintf_internal_r+0x2148>
 80034c4:	044019c4 	movi	r17,103
 80034c8:	003e2106 	br	8002d50 <__alt_data_end+0xfc002d50>
 80034cc:	d9002a17 	ldw	r4,168(sp)
 80034d0:	d8802104 	addi	r2,sp,132
 80034d4:	d8800315 	stw	r2,12(sp)
 80034d8:	d9000015 	stw	r4,0(sp)
 80034dc:	d8802504 	addi	r2,sp,148
 80034e0:	d9403617 	ldw	r5,216(sp)
 80034e4:	d9002d17 	ldw	r4,180(sp)
 80034e8:	d8800215 	stw	r2,8(sp)
 80034ec:	d8802604 	addi	r2,sp,152
 80034f0:	d8800115 	stw	r2,4(sp)
 80034f4:	01c000c4 	movi	r7,3
 80034f8:	980d883a 	mov	r6,r19
 80034fc:	da003d15 	stw	r8,244(sp)
 8003500:	8003be40 	call	8003be4 <_dtoa_r>
 8003504:	d8c02a17 	ldw	r3,168(sp)
 8003508:	da003d17 	ldw	r8,244(sp)
 800350c:	1021883a 	mov	r16,r2
 8003510:	00801184 	movi	r2,70
 8003514:	80f9883a 	add	fp,r16,r3
 8003518:	88bfd926 	beq	r17,r2,8003480 <__alt_data_end+0xfc003480>
 800351c:	003de806 	br	8002cc0 <__alt_data_end+0xfc002cc0>
 8003520:	d9002a17 	ldw	r4,168(sp)
 8003524:	00c04d0e 	bge	zero,r3,800365c <___vfprintf_internal_r+0x21a8>
 8003528:	2000441e 	bne	r4,zero,800363c <___vfprintf_internal_r+0x2188>
 800352c:	9480004c 	andi	r18,r18,1
 8003530:	9000421e 	bne	r18,zero,800363c <___vfprintf_internal_r+0x2188>
 8003534:	1805883a 	mov	r2,r3
 8003538:	18006f16 	blt	r3,zero,80036f8 <___vfprintf_internal_r+0x2244>
 800353c:	d8c03217 	ldw	r3,200(sp)
 8003540:	d8c02b15 	stw	r3,172(sp)
 8003544:	003e0206 	br	8002d50 <__alt_data_end+0xfc002d50>
 8003548:	df0022c4 	addi	fp,sp,139
 800354c:	dc002a15 	stw	r16,168(sp)
 8003550:	4027883a 	mov	r19,r8
 8003554:	e021883a 	mov	r16,fp
 8003558:	b009883a 	mov	r4,r22
 800355c:	01400284 	movi	r5,10
 8003560:	800b8200 	call	800b820 <__modsi3>
 8003564:	10800c04 	addi	r2,r2,48
 8003568:	843fffc4 	addi	r16,r16,-1
 800356c:	b009883a 	mov	r4,r22
 8003570:	01400284 	movi	r5,10
 8003574:	80800005 	stb	r2,0(r16)
 8003578:	800b79c0 	call	800b79c <__divsi3>
 800357c:	102d883a 	mov	r22,r2
 8003580:	00800244 	movi	r2,9
 8003584:	15bff416 	blt	r2,r22,8003558 <__alt_data_end+0xfc003558>
 8003588:	9811883a 	mov	r8,r19
 800358c:	b0800c04 	addi	r2,r22,48
 8003590:	8027883a 	mov	r19,r16
 8003594:	997fffc4 	addi	r5,r19,-1
 8003598:	98bfffc5 	stb	r2,-1(r19)
 800359c:	dc002a17 	ldw	r16,168(sp)
 80035a0:	2f006d2e 	bgeu	r5,fp,8003758 <___vfprintf_internal_r+0x22a4>
 80035a4:	d9c02384 	addi	r7,sp,142
 80035a8:	3ccfc83a 	sub	r7,r7,r19
 80035ac:	d9002344 	addi	r4,sp,141
 80035b0:	e1cf883a 	add	r7,fp,r7
 80035b4:	00000106 	br	80035bc <___vfprintf_internal_r+0x2108>
 80035b8:	28800003 	ldbu	r2,0(r5)
 80035bc:	20800005 	stb	r2,0(r4)
 80035c0:	21000044 	addi	r4,r4,1
 80035c4:	29400044 	addi	r5,r5,1
 80035c8:	393ffb1e 	bne	r7,r4,80035b8 <__alt_data_end+0xfc0035b8>
 80035cc:	d8802304 	addi	r2,sp,140
 80035d0:	14c5c83a 	sub	r2,r2,r19
 80035d4:	d8c02344 	addi	r3,sp,141
 80035d8:	1885883a 	add	r2,r3,r2
 80035dc:	003f7006 	br	80033a0 <__alt_data_end+0xfc0033a0>
 80035e0:	0005883a 	mov	r2,zero
 80035e4:	003f0f06 	br	8003224 <__alt_data_end+0xfc003224>
 80035e8:	d8c03217 	ldw	r3,200(sp)
 80035ec:	18c00044 	addi	r3,r3,1
 80035f0:	d8c02b15 	stw	r3,172(sp)
 80035f4:	1805883a 	mov	r2,r3
 80035f8:	183fb20e 	bge	r3,zero,80034c4 <__alt_data_end+0xfc0034c4>
 80035fc:	0005883a 	mov	r2,zero
 8003600:	003fb006 	br	80034c4 <__alt_data_end+0xfc0034c4>
 8003604:	d9003617 	ldw	r4,216(sp)
 8003608:	000d883a 	mov	r6,zero
 800360c:	000f883a 	mov	r7,zero
 8003610:	980b883a 	mov	r5,r19
 8003614:	d8c03c15 	stw	r3,240(sp)
 8003618:	da003d15 	stw	r8,244(sp)
 800361c:	800cbcc0 	call	800cbcc <__eqdf2>
 8003620:	d8c03c17 	ldw	r3,240(sp)
 8003624:	da003d17 	ldw	r8,244(sp)
 8003628:	103f9826 	beq	r2,zero,800348c <__alt_data_end+0xfc00348c>
 800362c:	00800044 	movi	r2,1
 8003630:	10c7c83a 	sub	r3,r2,r3
 8003634:	d8c02615 	stw	r3,152(sp)
 8003638:	003f9506 	br	8003490 <__alt_data_end+0xfc003490>
 800363c:	d9002a17 	ldw	r4,168(sp)
 8003640:	d8c03217 	ldw	r3,200(sp)
 8003644:	20800044 	addi	r2,r4,1
 8003648:	1885883a 	add	r2,r3,r2
 800364c:	d8802b15 	stw	r2,172(sp)
 8003650:	103dbf0e 	bge	r2,zero,8002d50 <__alt_data_end+0xfc002d50>
 8003654:	0005883a 	mov	r2,zero
 8003658:	003dbd06 	br	8002d50 <__alt_data_end+0xfc002d50>
 800365c:	2000201e 	bne	r4,zero,80036e0 <___vfprintf_internal_r+0x222c>
 8003660:	9480004c 	andi	r18,r18,1
 8003664:	90001e1e 	bne	r18,zero,80036e0 <___vfprintf_internal_r+0x222c>
 8003668:	00800044 	movi	r2,1
 800366c:	d8802b15 	stw	r2,172(sp)
 8003670:	003db706 	br	8002d50 <__alt_data_end+0xfc002d50>
 8003674:	00800b44 	movi	r2,45
 8003678:	05adc83a 	sub	r22,zero,r22
 800367c:	d8802305 	stb	r2,140(sp)
 8003680:	003f3f06 	br	8003380 <__alt_data_end+0xfc003380>
 8003684:	0005883a 	mov	r2,zero
 8003688:	003f5206 	br	80033d4 <__alt_data_end+0xfc0033d4>
 800368c:	90a4703a 	and	r18,r18,r2
 8003690:	903f4e26 	beq	r18,zero,80033cc <__alt_data_end+0xfc0033cc>
 8003694:	003f4a06 	br	80033c0 <__alt_data_end+0xfc0033c0>
 8003698:	00800084 	movi	r2,2
 800369c:	10c5c83a 	sub	r2,r2,r3
 80036a0:	003f8406 	br	80034b4 <__alt_data_end+0xfc0034b4>
 80036a4:	d9402e17 	ldw	r5,184(sp)
 80036a8:	d9002e17 	ldw	r4,184(sp)
 80036ac:	ac400043 	ldbu	r17,1(r21)
 80036b0:	29400017 	ldw	r5,0(r5)
 80036b4:	20800104 	addi	r2,r4,4
 80036b8:	d8802e15 	stw	r2,184(sp)
 80036bc:	d9402a15 	stw	r5,168(sp)
 80036c0:	182b883a 	mov	r21,r3
 80036c4:	283e7b0e 	bge	r5,zero,80030b4 <__alt_data_end+0xfc0030b4>
 80036c8:	8c403fcc 	andi	r17,r17,255
 80036cc:	017fffc4 	movi	r5,-1
 80036d0:	8c40201c 	xori	r17,r17,128
 80036d4:	d9402a15 	stw	r5,168(sp)
 80036d8:	8c7fe004 	addi	r17,r17,-128
 80036dc:	0037d706 	br	800163c <__alt_data_end+0xfc00163c>
 80036e0:	d8c02a17 	ldw	r3,168(sp)
 80036e4:	18c00084 	addi	r3,r3,2
 80036e8:	d8c02b15 	stw	r3,172(sp)
 80036ec:	1805883a 	mov	r2,r3
 80036f0:	183d970e 	bge	r3,zero,8002d50 <__alt_data_end+0xfc002d50>
 80036f4:	003fd706 	br	8003654 <__alt_data_end+0xfc003654>
 80036f8:	0005883a 	mov	r2,zero
 80036fc:	003f8f06 	br	800353c <__alt_data_end+0xfc00353c>
 8003700:	9080004c 	andi	r2,r18,1
 8003704:	103f821e 	bne	r2,zero,8003510 <__alt_data_end+0xfc003510>
 8003708:	d8802117 	ldw	r2,132(sp)
 800370c:	1405c83a 	sub	r2,r2,r16
 8003710:	d8803315 	stw	r2,204(sp)
 8003714:	b47ef426 	beq	r22,r17,80032e8 <__alt_data_end+0xfc0032e8>
 8003718:	dd802617 	ldw	r22,152(sp)
 800371c:	003f1206 	br	8003368 <__alt_data_end+0xfc003368>
 8003720:	d8c02b03 	ldbu	r3,172(sp)
 8003724:	d8c02785 	stb	r3,158(sp)
 8003728:	0038df06 	br	8001aa8 <__alt_data_end+0xfc001aa8>
 800372c:	d8c02b03 	ldbu	r3,172(sp)
 8003730:	d8c02785 	stb	r3,158(sp)
 8003734:	0038aa06 	br	80019e0 <__alt_data_end+0xfc0019e0>
 8003738:	d8c02b03 	ldbu	r3,172(sp)
 800373c:	d8c02785 	stb	r3,158(sp)
 8003740:	003a4306 	br	8002050 <__alt_data_end+0xfc002050>
 8003744:	d8c02b03 	ldbu	r3,172(sp)
 8003748:	d8c02785 	stb	r3,158(sp)
 800374c:	003af506 	br	8002324 <__alt_data_end+0xfc002324>
 8003750:	0005883a 	mov	r2,zero
 8003754:	003d7b06 	br	8002d44 <__alt_data_end+0xfc002d44>
 8003758:	d8802344 	addi	r2,sp,141
 800375c:	003f1006 	br	80033a0 <__alt_data_end+0xfc0033a0>
 8003760:	d8c02b03 	ldbu	r3,172(sp)
 8003764:	d8c02785 	stb	r3,158(sp)
 8003768:	0038fd06 	br	8001b60 <__alt_data_end+0xfc001b60>
 800376c:	d8c02b03 	ldbu	r3,172(sp)
 8003770:	d8c02785 	stb	r3,158(sp)
 8003774:	003a9706 	br	80021d4 <__alt_data_end+0xfc0021d4>
 8003778:	d8c02b03 	ldbu	r3,172(sp)
 800377c:	d8c02785 	stb	r3,158(sp)
 8003780:	003a1806 	br	8001fe4 <__alt_data_end+0xfc001fe4>
 8003784:	d8c02b03 	ldbu	r3,172(sp)
 8003788:	d8c02785 	stb	r3,158(sp)
 800378c:	003abe06 	br	8002288 <__alt_data_end+0xfc002288>

08003790 <__vfprintf_internal>:
 8003790:	00820074 	movhi	r2,2049
 8003794:	10896304 	addi	r2,r2,9612
 8003798:	300f883a 	mov	r7,r6
 800379c:	280d883a 	mov	r6,r5
 80037a0:	200b883a 	mov	r5,r4
 80037a4:	11000017 	ldw	r4,0(r2)
 80037a8:	80014b41 	jmpi	80014b4 <___vfprintf_internal_r>

080037ac <__sbprintf>:
 80037ac:	2880030b 	ldhu	r2,12(r5)
 80037b0:	2ac01917 	ldw	r11,100(r5)
 80037b4:	2a80038b 	ldhu	r10,14(r5)
 80037b8:	2a400717 	ldw	r9,28(r5)
 80037bc:	2a000917 	ldw	r8,36(r5)
 80037c0:	defee204 	addi	sp,sp,-1144
 80037c4:	00c10004 	movi	r3,1024
 80037c8:	dc011a15 	stw	r16,1128(sp)
 80037cc:	10bfff4c 	andi	r2,r2,65533
 80037d0:	2821883a 	mov	r16,r5
 80037d4:	d8cb883a 	add	r5,sp,r3
 80037d8:	dc811c15 	stw	r18,1136(sp)
 80037dc:	dc411b15 	stw	r17,1132(sp)
 80037e0:	dfc11d15 	stw	ra,1140(sp)
 80037e4:	2025883a 	mov	r18,r4
 80037e8:	d881030d 	sth	r2,1036(sp)
 80037ec:	dac11915 	stw	r11,1124(sp)
 80037f0:	da81038d 	sth	r10,1038(sp)
 80037f4:	da410715 	stw	r9,1052(sp)
 80037f8:	da010915 	stw	r8,1060(sp)
 80037fc:	dec10015 	stw	sp,1024(sp)
 8003800:	dec10415 	stw	sp,1040(sp)
 8003804:	d8c10215 	stw	r3,1032(sp)
 8003808:	d8c10515 	stw	r3,1044(sp)
 800380c:	d8010615 	stw	zero,1048(sp)
 8003810:	80014b40 	call	80014b4 <___vfprintf_internal_r>
 8003814:	1023883a 	mov	r17,r2
 8003818:	10000416 	blt	r2,zero,800382c <__sbprintf+0x80>
 800381c:	d9410004 	addi	r5,sp,1024
 8003820:	9009883a 	mov	r4,r18
 8003824:	80054880 	call	8005488 <_fflush_r>
 8003828:	10000d1e 	bne	r2,zero,8003860 <__sbprintf+0xb4>
 800382c:	d881030b 	ldhu	r2,1036(sp)
 8003830:	1080100c 	andi	r2,r2,64
 8003834:	10000326 	beq	r2,zero,8003844 <__sbprintf+0x98>
 8003838:	8080030b 	ldhu	r2,12(r16)
 800383c:	10801014 	ori	r2,r2,64
 8003840:	8080030d 	sth	r2,12(r16)
 8003844:	8805883a 	mov	r2,r17
 8003848:	dfc11d17 	ldw	ra,1140(sp)
 800384c:	dc811c17 	ldw	r18,1136(sp)
 8003850:	dc411b17 	ldw	r17,1132(sp)
 8003854:	dc011a17 	ldw	r16,1128(sp)
 8003858:	dec11e04 	addi	sp,sp,1144
 800385c:	f800283a 	ret
 8003860:	047fffc4 	movi	r17,-1
 8003864:	003ff106 	br	800382c <__alt_data_end+0xfc00382c>

08003868 <__swsetup_r>:
 8003868:	00820074 	movhi	r2,2049
 800386c:	defffd04 	addi	sp,sp,-12
 8003870:	10896304 	addi	r2,r2,9612
 8003874:	dc400115 	stw	r17,4(sp)
 8003878:	2023883a 	mov	r17,r4
 800387c:	11000017 	ldw	r4,0(r2)
 8003880:	dc000015 	stw	r16,0(sp)
 8003884:	dfc00215 	stw	ra,8(sp)
 8003888:	2821883a 	mov	r16,r5
 800388c:	20000226 	beq	r4,zero,8003898 <__swsetup_r+0x30>
 8003890:	20800e17 	ldw	r2,56(r4)
 8003894:	10003126 	beq	r2,zero,800395c <__swsetup_r+0xf4>
 8003898:	8080030b 	ldhu	r2,12(r16)
 800389c:	10c0020c 	andi	r3,r2,8
 80038a0:	1009883a 	mov	r4,r2
 80038a4:	18000f26 	beq	r3,zero,80038e4 <__swsetup_r+0x7c>
 80038a8:	80c00417 	ldw	r3,16(r16)
 80038ac:	18001526 	beq	r3,zero,8003904 <__swsetup_r+0x9c>
 80038b0:	1100004c 	andi	r4,r2,1
 80038b4:	20001c1e 	bne	r4,zero,8003928 <__swsetup_r+0xc0>
 80038b8:	1080008c 	andi	r2,r2,2
 80038bc:	1000291e 	bne	r2,zero,8003964 <__swsetup_r+0xfc>
 80038c0:	80800517 	ldw	r2,20(r16)
 80038c4:	80800215 	stw	r2,8(r16)
 80038c8:	18001c26 	beq	r3,zero,800393c <__swsetup_r+0xd4>
 80038cc:	0005883a 	mov	r2,zero
 80038d0:	dfc00217 	ldw	ra,8(sp)
 80038d4:	dc400117 	ldw	r17,4(sp)
 80038d8:	dc000017 	ldw	r16,0(sp)
 80038dc:	dec00304 	addi	sp,sp,12
 80038e0:	f800283a 	ret
 80038e4:	2080040c 	andi	r2,r4,16
 80038e8:	10002e26 	beq	r2,zero,80039a4 <__swsetup_r+0x13c>
 80038ec:	2080010c 	andi	r2,r4,4
 80038f0:	10001e1e 	bne	r2,zero,800396c <__swsetup_r+0x104>
 80038f4:	80c00417 	ldw	r3,16(r16)
 80038f8:	20800214 	ori	r2,r4,8
 80038fc:	8080030d 	sth	r2,12(r16)
 8003900:	183feb1e 	bne	r3,zero,80038b0 <__alt_data_end+0xfc0038b0>
 8003904:	1100a00c 	andi	r4,r2,640
 8003908:	01408004 	movi	r5,512
 800390c:	217fe826 	beq	r4,r5,80038b0 <__alt_data_end+0xfc0038b0>
 8003910:	800b883a 	mov	r5,r16
 8003914:	8809883a 	mov	r4,r17
 8003918:	80064240 	call	8006424 <__smakebuf_r>
 800391c:	8080030b 	ldhu	r2,12(r16)
 8003920:	80c00417 	ldw	r3,16(r16)
 8003924:	003fe206 	br	80038b0 <__alt_data_end+0xfc0038b0>
 8003928:	80800517 	ldw	r2,20(r16)
 800392c:	80000215 	stw	zero,8(r16)
 8003930:	0085c83a 	sub	r2,zero,r2
 8003934:	80800615 	stw	r2,24(r16)
 8003938:	183fe41e 	bne	r3,zero,80038cc <__alt_data_end+0xfc0038cc>
 800393c:	80c0030b 	ldhu	r3,12(r16)
 8003940:	0005883a 	mov	r2,zero
 8003944:	1900200c 	andi	r4,r3,128
 8003948:	203fe126 	beq	r4,zero,80038d0 <__alt_data_end+0xfc0038d0>
 800394c:	18c01014 	ori	r3,r3,64
 8003950:	80c0030d 	sth	r3,12(r16)
 8003954:	00bfffc4 	movi	r2,-1
 8003958:	003fdd06 	br	80038d0 <__alt_data_end+0xfc0038d0>
 800395c:	80058740 	call	8005874 <__sinit>
 8003960:	003fcd06 	br	8003898 <__alt_data_end+0xfc003898>
 8003964:	0005883a 	mov	r2,zero
 8003968:	003fd606 	br	80038c4 <__alt_data_end+0xfc0038c4>
 800396c:	81400c17 	ldw	r5,48(r16)
 8003970:	28000626 	beq	r5,zero,800398c <__swsetup_r+0x124>
 8003974:	80801004 	addi	r2,r16,64
 8003978:	28800326 	beq	r5,r2,8003988 <__swsetup_r+0x120>
 800397c:	8809883a 	mov	r4,r17
 8003980:	80059e80 	call	80059e8 <_free_r>
 8003984:	8100030b 	ldhu	r4,12(r16)
 8003988:	80000c15 	stw	zero,48(r16)
 800398c:	80c00417 	ldw	r3,16(r16)
 8003990:	00bff6c4 	movi	r2,-37
 8003994:	1108703a 	and	r4,r2,r4
 8003998:	80000115 	stw	zero,4(r16)
 800399c:	80c00015 	stw	r3,0(r16)
 80039a0:	003fd506 	br	80038f8 <__alt_data_end+0xfc0038f8>
 80039a4:	00800244 	movi	r2,9
 80039a8:	88800015 	stw	r2,0(r17)
 80039ac:	20801014 	ori	r2,r4,64
 80039b0:	8080030d 	sth	r2,12(r16)
 80039b4:	00bfffc4 	movi	r2,-1
 80039b8:	003fc506 	br	80038d0 <__alt_data_end+0xfc0038d0>

080039bc <quorem>:
 80039bc:	defff204 	addi	sp,sp,-56
 80039c0:	ddc00b15 	stw	r23,44(sp)
 80039c4:	20800417 	ldw	r2,16(r4)
 80039c8:	2dc00417 	ldw	r23,16(r5)
 80039cc:	dfc00d15 	stw	ra,52(sp)
 80039d0:	df000c15 	stw	fp,48(sp)
 80039d4:	dd800a15 	stw	r22,40(sp)
 80039d8:	dd400915 	stw	r21,36(sp)
 80039dc:	dd000815 	stw	r20,32(sp)
 80039e0:	dcc00715 	stw	r19,28(sp)
 80039e4:	dc800615 	stw	r18,24(sp)
 80039e8:	dc400515 	stw	r17,20(sp)
 80039ec:	dc000415 	stw	r16,16(sp)
 80039f0:	15c07a16 	blt	r2,r23,8003bdc <quorem+0x220>
 80039f4:	bdffffc4 	addi	r23,r23,-1
 80039f8:	bde9883a 	add	r20,r23,r23
 80039fc:	28c00504 	addi	r3,r5,20
 8003a00:	a529883a 	add	r20,r20,r20
 8003a04:	1d39883a 	add	fp,r3,r20
 8003a08:	24c00504 	addi	r19,r4,20
 8003a0c:	d9400215 	stw	r5,8(sp)
 8003a10:	9d29883a 	add	r20,r19,r20
 8003a14:	e1400017 	ldw	r5,0(fp)
 8003a18:	d9000015 	stw	r4,0(sp)
 8003a1c:	a1000017 	ldw	r4,0(r20)
 8003a20:	29400044 	addi	r5,r5,1
 8003a24:	d8c00115 	stw	r3,4(sp)
 8003a28:	dd000315 	stw	r20,12(sp)
 8003a2c:	800b8940 	call	800b894 <__udivsi3>
 8003a30:	1025883a 	mov	r18,r2
 8003a34:	10003026 	beq	r2,zero,8003af8 <quorem+0x13c>
 8003a38:	dc400117 	ldw	r17,4(sp)
 8003a3c:	9829883a 	mov	r20,r19
 8003a40:	002d883a 	mov	r22,zero
 8003a44:	0021883a 	mov	r16,zero
 8003a48:	8d400017 	ldw	r21,0(r17)
 8003a4c:	900b883a 	mov	r5,r18
 8003a50:	8c400104 	addi	r17,r17,4
 8003a54:	a93fffcc 	andi	r4,r21,65535
 8003a58:	80012b40 	call	80012b4 <__mulsi3>
 8003a5c:	a808d43a 	srli	r4,r21,16
 8003a60:	900b883a 	mov	r5,r18
 8003a64:	15ad883a 	add	r22,r2,r22
 8003a68:	80012b40 	call	80012b4 <__mulsi3>
 8003a6c:	a1000017 	ldw	r4,0(r20)
 8003a70:	b00cd43a 	srli	r6,r22,16
 8003a74:	b0ffffcc 	andi	r3,r22,65535
 8003a78:	217fffcc 	andi	r5,r4,65535
 8003a7c:	2c21883a 	add	r16,r5,r16
 8003a80:	80c7c83a 	sub	r3,r16,r3
 8003a84:	2008d43a 	srli	r4,r4,16
 8003a88:	1185883a 	add	r2,r2,r6
 8003a8c:	1821d43a 	srai	r16,r3,16
 8003a90:	117fffcc 	andi	r5,r2,65535
 8003a94:	2149c83a 	sub	r4,r4,r5
 8003a98:	2421883a 	add	r16,r4,r16
 8003a9c:	8008943a 	slli	r4,r16,16
 8003aa0:	18ffffcc 	andi	r3,r3,65535
 8003aa4:	102cd43a 	srli	r22,r2,16
 8003aa8:	20c8b03a 	or	r4,r4,r3
 8003aac:	a1000015 	stw	r4,0(r20)
 8003ab0:	8021d43a 	srai	r16,r16,16
 8003ab4:	a5000104 	addi	r20,r20,4
 8003ab8:	e47fe32e 	bgeu	fp,r17,8003a48 <__alt_data_end+0xfc003a48>
 8003abc:	d8c00317 	ldw	r3,12(sp)
 8003ac0:	18800017 	ldw	r2,0(r3)
 8003ac4:	10000c1e 	bne	r2,zero,8003af8 <quorem+0x13c>
 8003ac8:	18bfff04 	addi	r2,r3,-4
 8003acc:	9880082e 	bgeu	r19,r2,8003af0 <quorem+0x134>
 8003ad0:	18ffff17 	ldw	r3,-4(r3)
 8003ad4:	18000326 	beq	r3,zero,8003ae4 <quorem+0x128>
 8003ad8:	00000506 	br	8003af0 <quorem+0x134>
 8003adc:	10c00017 	ldw	r3,0(r2)
 8003ae0:	1800031e 	bne	r3,zero,8003af0 <quorem+0x134>
 8003ae4:	10bfff04 	addi	r2,r2,-4
 8003ae8:	bdffffc4 	addi	r23,r23,-1
 8003aec:	98bffb36 	bltu	r19,r2,8003adc <__alt_data_end+0xfc003adc>
 8003af0:	d8c00017 	ldw	r3,0(sp)
 8003af4:	1dc00415 	stw	r23,16(r3)
 8003af8:	d9400217 	ldw	r5,8(sp)
 8003afc:	d9000017 	ldw	r4,0(sp)
 8003b00:	8007c200 	call	8007c20 <__mcmp>
 8003b04:	10002816 	blt	r2,zero,8003ba8 <quorem+0x1ec>
 8003b08:	dc400117 	ldw	r17,4(sp)
 8003b0c:	94800044 	addi	r18,r18,1
 8003b10:	980d883a 	mov	r6,r19
 8003b14:	0007883a 	mov	r3,zero
 8003b18:	31000017 	ldw	r4,0(r6)
 8003b1c:	89400017 	ldw	r5,0(r17)
 8003b20:	31800104 	addi	r6,r6,4
 8003b24:	20bfffcc 	andi	r2,r4,65535
 8003b28:	10c7883a 	add	r3,r2,r3
 8003b2c:	28bfffcc 	andi	r2,r5,65535
 8003b30:	1885c83a 	sub	r2,r3,r2
 8003b34:	280ad43a 	srli	r5,r5,16
 8003b38:	2008d43a 	srli	r4,r4,16
 8003b3c:	1007d43a 	srai	r3,r2,16
 8003b40:	10bfffcc 	andi	r2,r2,65535
 8003b44:	2149c83a 	sub	r4,r4,r5
 8003b48:	20c9883a 	add	r4,r4,r3
 8003b4c:	200a943a 	slli	r5,r4,16
 8003b50:	8c400104 	addi	r17,r17,4
 8003b54:	2007d43a 	srai	r3,r4,16
 8003b58:	2884b03a 	or	r2,r5,r2
 8003b5c:	30bfff15 	stw	r2,-4(r6)
 8003b60:	e47fed2e 	bgeu	fp,r17,8003b18 <__alt_data_end+0xfc003b18>
 8003b64:	bdc5883a 	add	r2,r23,r23
 8003b68:	1085883a 	add	r2,r2,r2
 8003b6c:	9887883a 	add	r3,r19,r2
 8003b70:	18800017 	ldw	r2,0(r3)
 8003b74:	10000c1e 	bne	r2,zero,8003ba8 <quorem+0x1ec>
 8003b78:	18bfff04 	addi	r2,r3,-4
 8003b7c:	9880082e 	bgeu	r19,r2,8003ba0 <quorem+0x1e4>
 8003b80:	18ffff17 	ldw	r3,-4(r3)
 8003b84:	18000326 	beq	r3,zero,8003b94 <quorem+0x1d8>
 8003b88:	00000506 	br	8003ba0 <quorem+0x1e4>
 8003b8c:	10c00017 	ldw	r3,0(r2)
 8003b90:	1800031e 	bne	r3,zero,8003ba0 <quorem+0x1e4>
 8003b94:	10bfff04 	addi	r2,r2,-4
 8003b98:	bdffffc4 	addi	r23,r23,-1
 8003b9c:	98bffb36 	bltu	r19,r2,8003b8c <__alt_data_end+0xfc003b8c>
 8003ba0:	d8c00017 	ldw	r3,0(sp)
 8003ba4:	1dc00415 	stw	r23,16(r3)
 8003ba8:	9005883a 	mov	r2,r18
 8003bac:	dfc00d17 	ldw	ra,52(sp)
 8003bb0:	df000c17 	ldw	fp,48(sp)
 8003bb4:	ddc00b17 	ldw	r23,44(sp)
 8003bb8:	dd800a17 	ldw	r22,40(sp)
 8003bbc:	dd400917 	ldw	r21,36(sp)
 8003bc0:	dd000817 	ldw	r20,32(sp)
 8003bc4:	dcc00717 	ldw	r19,28(sp)
 8003bc8:	dc800617 	ldw	r18,24(sp)
 8003bcc:	dc400517 	ldw	r17,20(sp)
 8003bd0:	dc000417 	ldw	r16,16(sp)
 8003bd4:	dec00e04 	addi	sp,sp,56
 8003bd8:	f800283a 	ret
 8003bdc:	0005883a 	mov	r2,zero
 8003be0:	003ff206 	br	8003bac <__alt_data_end+0xfc003bac>

08003be4 <_dtoa_r>:
 8003be4:	20801017 	ldw	r2,64(r4)
 8003be8:	deffde04 	addi	sp,sp,-136
 8003bec:	df002015 	stw	fp,128(sp)
 8003bf0:	dcc01b15 	stw	r19,108(sp)
 8003bf4:	dc801a15 	stw	r18,104(sp)
 8003bf8:	dc401915 	stw	r17,100(sp)
 8003bfc:	dc001815 	stw	r16,96(sp)
 8003c00:	dfc02115 	stw	ra,132(sp)
 8003c04:	ddc01f15 	stw	r23,124(sp)
 8003c08:	dd801e15 	stw	r22,120(sp)
 8003c0c:	dd401d15 	stw	r21,116(sp)
 8003c10:	dd001c15 	stw	r20,112(sp)
 8003c14:	d9c00315 	stw	r7,12(sp)
 8003c18:	2039883a 	mov	fp,r4
 8003c1c:	3023883a 	mov	r17,r6
 8003c20:	2825883a 	mov	r18,r5
 8003c24:	dc002417 	ldw	r16,144(sp)
 8003c28:	3027883a 	mov	r19,r6
 8003c2c:	10000826 	beq	r2,zero,8003c50 <_dtoa_r+0x6c>
 8003c30:	21801117 	ldw	r6,68(r4)
 8003c34:	00c00044 	movi	r3,1
 8003c38:	100b883a 	mov	r5,r2
 8003c3c:	1986983a 	sll	r3,r3,r6
 8003c40:	11800115 	stw	r6,4(r2)
 8003c44:	10c00215 	stw	r3,8(r2)
 8003c48:	80073440 	call	8007344 <_Bfree>
 8003c4c:	e0001015 	stw	zero,64(fp)
 8003c50:	88002e16 	blt	r17,zero,8003d0c <_dtoa_r+0x128>
 8003c54:	80000015 	stw	zero,0(r16)
 8003c58:	889ffc2c 	andhi	r2,r17,32752
 8003c5c:	00dffc34 	movhi	r3,32752
 8003c60:	10c01c26 	beq	r2,r3,8003cd4 <_dtoa_r+0xf0>
 8003c64:	000d883a 	mov	r6,zero
 8003c68:	000f883a 	mov	r7,zero
 8003c6c:	9009883a 	mov	r4,r18
 8003c70:	980b883a 	mov	r5,r19
 8003c74:	800cbcc0 	call	800cbcc <__eqdf2>
 8003c78:	10002b1e 	bne	r2,zero,8003d28 <_dtoa_r+0x144>
 8003c7c:	d9c02317 	ldw	r7,140(sp)
 8003c80:	00800044 	movi	r2,1
 8003c84:	38800015 	stw	r2,0(r7)
 8003c88:	d8802517 	ldw	r2,148(sp)
 8003c8c:	10019e26 	beq	r2,zero,8004308 <_dtoa_r+0x724>
 8003c90:	d8c02517 	ldw	r3,148(sp)
 8003c94:	00820074 	movhi	r2,2049
 8003c98:	10865144 	addi	r2,r2,6469
 8003c9c:	18800015 	stw	r2,0(r3)
 8003ca0:	10bfffc4 	addi	r2,r2,-1
 8003ca4:	dfc02117 	ldw	ra,132(sp)
 8003ca8:	df002017 	ldw	fp,128(sp)
 8003cac:	ddc01f17 	ldw	r23,124(sp)
 8003cb0:	dd801e17 	ldw	r22,120(sp)
 8003cb4:	dd401d17 	ldw	r21,116(sp)
 8003cb8:	dd001c17 	ldw	r20,112(sp)
 8003cbc:	dcc01b17 	ldw	r19,108(sp)
 8003cc0:	dc801a17 	ldw	r18,104(sp)
 8003cc4:	dc401917 	ldw	r17,100(sp)
 8003cc8:	dc001817 	ldw	r16,96(sp)
 8003ccc:	dec02204 	addi	sp,sp,136
 8003cd0:	f800283a 	ret
 8003cd4:	d8c02317 	ldw	r3,140(sp)
 8003cd8:	0089c3c4 	movi	r2,9999
 8003cdc:	18800015 	stw	r2,0(r3)
 8003ce0:	90017726 	beq	r18,zero,80042c0 <_dtoa_r+0x6dc>
 8003ce4:	00820074 	movhi	r2,2049
 8003ce8:	10865d04 	addi	r2,r2,6516
 8003cec:	d9002517 	ldw	r4,148(sp)
 8003cf0:	203fec26 	beq	r4,zero,8003ca4 <__alt_data_end+0xfc003ca4>
 8003cf4:	10c000c7 	ldb	r3,3(r2)
 8003cf8:	1801781e 	bne	r3,zero,80042dc <_dtoa_r+0x6f8>
 8003cfc:	10c000c4 	addi	r3,r2,3
 8003d00:	d9802517 	ldw	r6,148(sp)
 8003d04:	30c00015 	stw	r3,0(r6)
 8003d08:	003fe606 	br	8003ca4 <__alt_data_end+0xfc003ca4>
 8003d0c:	04e00034 	movhi	r19,32768
 8003d10:	9cffffc4 	addi	r19,r19,-1
 8003d14:	00800044 	movi	r2,1
 8003d18:	8ce6703a 	and	r19,r17,r19
 8003d1c:	80800015 	stw	r2,0(r16)
 8003d20:	9823883a 	mov	r17,r19
 8003d24:	003fcc06 	br	8003c58 <__alt_data_end+0xfc003c58>
 8003d28:	d8800204 	addi	r2,sp,8
 8003d2c:	d8800015 	stw	r2,0(sp)
 8003d30:	d9c00104 	addi	r7,sp,4
 8003d34:	900b883a 	mov	r5,r18
 8003d38:	980d883a 	mov	r6,r19
 8003d3c:	e009883a 	mov	r4,fp
 8003d40:	8820d53a 	srli	r16,r17,20
 8003d44:	8007fec0 	call	8007fec <__d2b>
 8003d48:	d8800915 	stw	r2,36(sp)
 8003d4c:	8001651e 	bne	r16,zero,80042e4 <_dtoa_r+0x700>
 8003d50:	dd800217 	ldw	r22,8(sp)
 8003d54:	dc000117 	ldw	r16,4(sp)
 8003d58:	00800804 	movi	r2,32
 8003d5c:	b421883a 	add	r16,r22,r16
 8003d60:	80c10c84 	addi	r3,r16,1074
 8003d64:	10c2d10e 	bge	r2,r3,80048ac <_dtoa_r+0xcc8>
 8003d68:	00801004 	movi	r2,64
 8003d6c:	81010484 	addi	r4,r16,1042
 8003d70:	10c7c83a 	sub	r3,r2,r3
 8003d74:	9108d83a 	srl	r4,r18,r4
 8003d78:	88e2983a 	sll	r17,r17,r3
 8003d7c:	2448b03a 	or	r4,r4,r17
 8003d80:	800e0e80 	call	800e0e8 <__floatunsidf>
 8003d84:	017f8434 	movhi	r5,65040
 8003d88:	01800044 	movi	r6,1
 8003d8c:	1009883a 	mov	r4,r2
 8003d90:	194b883a 	add	r5,r3,r5
 8003d94:	843fffc4 	addi	r16,r16,-1
 8003d98:	d9801115 	stw	r6,68(sp)
 8003d9c:	000d883a 	mov	r6,zero
 8003da0:	01cffe34 	movhi	r7,16376
 8003da4:	800d6900 	call	800d690 <__subdf3>
 8003da8:	0198dbf4 	movhi	r6,25455
 8003dac:	01cff4f4 	movhi	r7,16339
 8003db0:	3190d844 	addi	r6,r6,17249
 8003db4:	39e1e9c4 	addi	r7,r7,-30809
 8003db8:	1009883a 	mov	r4,r2
 8003dbc:	180b883a 	mov	r5,r3
 8003dc0:	800ce240 	call	800ce24 <__muldf3>
 8003dc4:	01a2d874 	movhi	r6,35681
 8003dc8:	01cff1f4 	movhi	r7,16327
 8003dcc:	31b22cc4 	addi	r6,r6,-14157
 8003dd0:	39e28a04 	addi	r7,r7,-30168
 8003dd4:	180b883a 	mov	r5,r3
 8003dd8:	1009883a 	mov	r4,r2
 8003ddc:	800b9500 	call	800b950 <__adddf3>
 8003de0:	8009883a 	mov	r4,r16
 8003de4:	1029883a 	mov	r20,r2
 8003de8:	1823883a 	mov	r17,r3
 8003dec:	800e00c0 	call	800e00c <__floatsidf>
 8003df0:	019427f4 	movhi	r6,20639
 8003df4:	01cff4f4 	movhi	r7,16339
 8003df8:	319e7ec4 	addi	r6,r6,31227
 8003dfc:	39d104c4 	addi	r7,r7,17427
 8003e00:	1009883a 	mov	r4,r2
 8003e04:	180b883a 	mov	r5,r3
 8003e08:	800ce240 	call	800ce24 <__muldf3>
 8003e0c:	100d883a 	mov	r6,r2
 8003e10:	180f883a 	mov	r7,r3
 8003e14:	a009883a 	mov	r4,r20
 8003e18:	880b883a 	mov	r5,r17
 8003e1c:	800b9500 	call	800b950 <__adddf3>
 8003e20:	1009883a 	mov	r4,r2
 8003e24:	180b883a 	mov	r5,r3
 8003e28:	1029883a 	mov	r20,r2
 8003e2c:	1823883a 	mov	r17,r3
 8003e30:	800df8c0 	call	800df8c <__fixdfsi>
 8003e34:	000d883a 	mov	r6,zero
 8003e38:	000f883a 	mov	r7,zero
 8003e3c:	a009883a 	mov	r4,r20
 8003e40:	880b883a 	mov	r5,r17
 8003e44:	d8800515 	stw	r2,20(sp)
 8003e48:	800cd300 	call	800cd30 <__ledf2>
 8003e4c:	10028716 	blt	r2,zero,800486c <_dtoa_r+0xc88>
 8003e50:	d8c00517 	ldw	r3,20(sp)
 8003e54:	00800584 	movi	r2,22
 8003e58:	10c27536 	bltu	r2,r3,8004830 <_dtoa_r+0xc4c>
 8003e5c:	180490fa 	slli	r2,r3,3
 8003e60:	00c20074 	movhi	r3,2049
 8003e64:	18c67904 	addi	r3,r3,6628
 8003e68:	1885883a 	add	r2,r3,r2
 8003e6c:	11000017 	ldw	r4,0(r2)
 8003e70:	11400117 	ldw	r5,4(r2)
 8003e74:	900d883a 	mov	r6,r18
 8003e78:	980f883a 	mov	r7,r19
 8003e7c:	800cc540 	call	800cc54 <__gedf2>
 8003e80:	00828d0e 	bge	zero,r2,80048b8 <_dtoa_r+0xcd4>
 8003e84:	d9000517 	ldw	r4,20(sp)
 8003e88:	d8000e15 	stw	zero,56(sp)
 8003e8c:	213fffc4 	addi	r4,r4,-1
 8003e90:	d9000515 	stw	r4,20(sp)
 8003e94:	b42dc83a 	sub	r22,r22,r16
 8003e98:	b5bfffc4 	addi	r22,r22,-1
 8003e9c:	b0026f16 	blt	r22,zero,800485c <_dtoa_r+0xc78>
 8003ea0:	d8000815 	stw	zero,32(sp)
 8003ea4:	d9c00517 	ldw	r7,20(sp)
 8003ea8:	38026416 	blt	r7,zero,800483c <_dtoa_r+0xc58>
 8003eac:	b1ed883a 	add	r22,r22,r7
 8003eb0:	d9c00d15 	stw	r7,52(sp)
 8003eb4:	d8000a15 	stw	zero,40(sp)
 8003eb8:	d9800317 	ldw	r6,12(sp)
 8003ebc:	00800244 	movi	r2,9
 8003ec0:	11811436 	bltu	r2,r6,8004314 <_dtoa_r+0x730>
 8003ec4:	00800144 	movi	r2,5
 8003ec8:	1184e10e 	bge	r2,r6,8005250 <_dtoa_r+0x166c>
 8003ecc:	31bfff04 	addi	r6,r6,-4
 8003ed0:	d9800315 	stw	r6,12(sp)
 8003ed4:	0023883a 	mov	r17,zero
 8003ed8:	d9800317 	ldw	r6,12(sp)
 8003edc:	008000c4 	movi	r2,3
 8003ee0:	30836726 	beq	r6,r2,8004c80 <_dtoa_r+0x109c>
 8003ee4:	1183410e 	bge	r2,r6,8004bec <_dtoa_r+0x1008>
 8003ee8:	d9c00317 	ldw	r7,12(sp)
 8003eec:	00800104 	movi	r2,4
 8003ef0:	38827c26 	beq	r7,r2,80048e4 <_dtoa_r+0xd00>
 8003ef4:	00800144 	movi	r2,5
 8003ef8:	3884c41e 	bne	r7,r2,800520c <_dtoa_r+0x1628>
 8003efc:	00800044 	movi	r2,1
 8003f00:	d8800b15 	stw	r2,44(sp)
 8003f04:	d8c00517 	ldw	r3,20(sp)
 8003f08:	d9002217 	ldw	r4,136(sp)
 8003f0c:	1907883a 	add	r3,r3,r4
 8003f10:	19800044 	addi	r6,r3,1
 8003f14:	d8c00c15 	stw	r3,48(sp)
 8003f18:	d9800615 	stw	r6,24(sp)
 8003f1c:	0183a40e 	bge	zero,r6,8004db0 <_dtoa_r+0x11cc>
 8003f20:	d9800617 	ldw	r6,24(sp)
 8003f24:	3021883a 	mov	r16,r6
 8003f28:	e0001115 	stw	zero,68(fp)
 8003f2c:	008005c4 	movi	r2,23
 8003f30:	1184c92e 	bgeu	r2,r6,8005258 <_dtoa_r+0x1674>
 8003f34:	00c00044 	movi	r3,1
 8003f38:	00800104 	movi	r2,4
 8003f3c:	1085883a 	add	r2,r2,r2
 8003f40:	11000504 	addi	r4,r2,20
 8003f44:	180b883a 	mov	r5,r3
 8003f48:	18c00044 	addi	r3,r3,1
 8003f4c:	313ffb2e 	bgeu	r6,r4,8003f3c <__alt_data_end+0xfc003f3c>
 8003f50:	e1401115 	stw	r5,68(fp)
 8003f54:	e009883a 	mov	r4,fp
 8003f58:	800729c0 	call	800729c <_Balloc>
 8003f5c:	d8800715 	stw	r2,28(sp)
 8003f60:	e0801015 	stw	r2,64(fp)
 8003f64:	00800384 	movi	r2,14
 8003f68:	1400f736 	bltu	r2,r16,8004348 <_dtoa_r+0x764>
 8003f6c:	8800f626 	beq	r17,zero,8004348 <_dtoa_r+0x764>
 8003f70:	d9c00517 	ldw	r7,20(sp)
 8003f74:	01c39a0e 	bge	zero,r7,8004de0 <_dtoa_r+0x11fc>
 8003f78:	388003cc 	andi	r2,r7,15
 8003f7c:	100490fa 	slli	r2,r2,3
 8003f80:	382bd13a 	srai	r21,r7,4
 8003f84:	00c20074 	movhi	r3,2049
 8003f88:	18c67904 	addi	r3,r3,6628
 8003f8c:	1885883a 	add	r2,r3,r2
 8003f90:	a8c0040c 	andi	r3,r21,16
 8003f94:	12400017 	ldw	r9,0(r2)
 8003f98:	12000117 	ldw	r8,4(r2)
 8003f9c:	18037926 	beq	r3,zero,8004d84 <_dtoa_r+0x11a0>
 8003fa0:	00820074 	movhi	r2,2049
 8003fa4:	10866f04 	addi	r2,r2,6588
 8003fa8:	11800817 	ldw	r6,32(r2)
 8003fac:	11c00917 	ldw	r7,36(r2)
 8003fb0:	9009883a 	mov	r4,r18
 8003fb4:	980b883a 	mov	r5,r19
 8003fb8:	da001715 	stw	r8,92(sp)
 8003fbc:	da401615 	stw	r9,88(sp)
 8003fc0:	800c1fc0 	call	800c1fc <__divdf3>
 8003fc4:	da001717 	ldw	r8,92(sp)
 8003fc8:	da401617 	ldw	r9,88(sp)
 8003fcc:	ad4003cc 	andi	r21,r21,15
 8003fd0:	040000c4 	movi	r16,3
 8003fd4:	1023883a 	mov	r17,r2
 8003fd8:	1829883a 	mov	r20,r3
 8003fdc:	a8001126 	beq	r21,zero,8004024 <_dtoa_r+0x440>
 8003fe0:	05c20074 	movhi	r23,2049
 8003fe4:	bdc66f04 	addi	r23,r23,6588
 8003fe8:	4805883a 	mov	r2,r9
 8003fec:	4007883a 	mov	r3,r8
 8003ff0:	a980004c 	andi	r6,r21,1
 8003ff4:	1009883a 	mov	r4,r2
 8003ff8:	a82bd07a 	srai	r21,r21,1
 8003ffc:	180b883a 	mov	r5,r3
 8004000:	30000426 	beq	r6,zero,8004014 <_dtoa_r+0x430>
 8004004:	b9800017 	ldw	r6,0(r23)
 8004008:	b9c00117 	ldw	r7,4(r23)
 800400c:	84000044 	addi	r16,r16,1
 8004010:	800ce240 	call	800ce24 <__muldf3>
 8004014:	bdc00204 	addi	r23,r23,8
 8004018:	a83ff51e 	bne	r21,zero,8003ff0 <__alt_data_end+0xfc003ff0>
 800401c:	1013883a 	mov	r9,r2
 8004020:	1811883a 	mov	r8,r3
 8004024:	480d883a 	mov	r6,r9
 8004028:	400f883a 	mov	r7,r8
 800402c:	8809883a 	mov	r4,r17
 8004030:	a00b883a 	mov	r5,r20
 8004034:	800c1fc0 	call	800c1fc <__divdf3>
 8004038:	d8800f15 	stw	r2,60(sp)
 800403c:	d8c01015 	stw	r3,64(sp)
 8004040:	d8c00e17 	ldw	r3,56(sp)
 8004044:	18000626 	beq	r3,zero,8004060 <_dtoa_r+0x47c>
 8004048:	d9000f17 	ldw	r4,60(sp)
 800404c:	d9401017 	ldw	r5,64(sp)
 8004050:	000d883a 	mov	r6,zero
 8004054:	01cffc34 	movhi	r7,16368
 8004058:	800cd300 	call	800cd30 <__ledf2>
 800405c:	10040b16 	blt	r2,zero,800508c <_dtoa_r+0x14a8>
 8004060:	8009883a 	mov	r4,r16
 8004064:	800e00c0 	call	800e00c <__floatsidf>
 8004068:	d9800f17 	ldw	r6,60(sp)
 800406c:	d9c01017 	ldw	r7,64(sp)
 8004070:	1009883a 	mov	r4,r2
 8004074:	180b883a 	mov	r5,r3
 8004078:	800ce240 	call	800ce24 <__muldf3>
 800407c:	000d883a 	mov	r6,zero
 8004080:	01d00734 	movhi	r7,16412
 8004084:	1009883a 	mov	r4,r2
 8004088:	180b883a 	mov	r5,r3
 800408c:	800b9500 	call	800b950 <__adddf3>
 8004090:	1021883a 	mov	r16,r2
 8004094:	d8800617 	ldw	r2,24(sp)
 8004098:	047f3034 	movhi	r17,64704
 800409c:	1c63883a 	add	r17,r3,r17
 80040a0:	10031826 	beq	r2,zero,8004d04 <_dtoa_r+0x1120>
 80040a4:	d8c00517 	ldw	r3,20(sp)
 80040a8:	db000617 	ldw	r12,24(sp)
 80040ac:	d8c01315 	stw	r3,76(sp)
 80040b0:	d9000b17 	ldw	r4,44(sp)
 80040b4:	20038f26 	beq	r4,zero,8004ef4 <_dtoa_r+0x1310>
 80040b8:	60bfffc4 	addi	r2,r12,-1
 80040bc:	100490fa 	slli	r2,r2,3
 80040c0:	00c20074 	movhi	r3,2049
 80040c4:	18c67904 	addi	r3,r3,6628
 80040c8:	1885883a 	add	r2,r3,r2
 80040cc:	11800017 	ldw	r6,0(r2)
 80040d0:	11c00117 	ldw	r7,4(r2)
 80040d4:	d8800717 	ldw	r2,28(sp)
 80040d8:	0009883a 	mov	r4,zero
 80040dc:	014ff834 	movhi	r5,16352
 80040e0:	db001615 	stw	r12,88(sp)
 80040e4:	15c00044 	addi	r23,r2,1
 80040e8:	800c1fc0 	call	800c1fc <__divdf3>
 80040ec:	800d883a 	mov	r6,r16
 80040f0:	880f883a 	mov	r7,r17
 80040f4:	1009883a 	mov	r4,r2
 80040f8:	180b883a 	mov	r5,r3
 80040fc:	800d6900 	call	800d690 <__subdf3>
 8004100:	d9401017 	ldw	r5,64(sp)
 8004104:	d9000f17 	ldw	r4,60(sp)
 8004108:	102b883a 	mov	r21,r2
 800410c:	d8c01215 	stw	r3,72(sp)
 8004110:	800df8c0 	call	800df8c <__fixdfsi>
 8004114:	1009883a 	mov	r4,r2
 8004118:	1029883a 	mov	r20,r2
 800411c:	800e00c0 	call	800e00c <__floatsidf>
 8004120:	d9000f17 	ldw	r4,60(sp)
 8004124:	d9401017 	ldw	r5,64(sp)
 8004128:	100d883a 	mov	r6,r2
 800412c:	180f883a 	mov	r7,r3
 8004130:	800d6900 	call	800d690 <__subdf3>
 8004134:	1823883a 	mov	r17,r3
 8004138:	d8c00717 	ldw	r3,28(sp)
 800413c:	d9401217 	ldw	r5,72(sp)
 8004140:	a2000c04 	addi	r8,r20,48
 8004144:	1021883a 	mov	r16,r2
 8004148:	1a000005 	stb	r8,0(r3)
 800414c:	800d883a 	mov	r6,r16
 8004150:	880f883a 	mov	r7,r17
 8004154:	a809883a 	mov	r4,r21
 8004158:	4029883a 	mov	r20,r8
 800415c:	800cc540 	call	800cc54 <__gedf2>
 8004160:	00841d16 	blt	zero,r2,80051d8 <_dtoa_r+0x15f4>
 8004164:	800d883a 	mov	r6,r16
 8004168:	880f883a 	mov	r7,r17
 800416c:	0009883a 	mov	r4,zero
 8004170:	014ffc34 	movhi	r5,16368
 8004174:	800d6900 	call	800d690 <__subdf3>
 8004178:	d9401217 	ldw	r5,72(sp)
 800417c:	100d883a 	mov	r6,r2
 8004180:	180f883a 	mov	r7,r3
 8004184:	a809883a 	mov	r4,r21
 8004188:	800cc540 	call	800cc54 <__gedf2>
 800418c:	db001617 	ldw	r12,88(sp)
 8004190:	00840e16 	blt	zero,r2,80051cc <_dtoa_r+0x15e8>
 8004194:	00800044 	movi	r2,1
 8004198:	13006b0e 	bge	r2,r12,8004348 <_dtoa_r+0x764>
 800419c:	d9000717 	ldw	r4,28(sp)
 80041a0:	dd800f15 	stw	r22,60(sp)
 80041a4:	dcc01015 	stw	r19,64(sp)
 80041a8:	2319883a 	add	r12,r4,r12
 80041ac:	dcc01217 	ldw	r19,72(sp)
 80041b0:	602d883a 	mov	r22,r12
 80041b4:	dc801215 	stw	r18,72(sp)
 80041b8:	b825883a 	mov	r18,r23
 80041bc:	00000906 	br	80041e4 <_dtoa_r+0x600>
 80041c0:	800d6900 	call	800d690 <__subdf3>
 80041c4:	a80d883a 	mov	r6,r21
 80041c8:	980f883a 	mov	r7,r19
 80041cc:	1009883a 	mov	r4,r2
 80041d0:	180b883a 	mov	r5,r3
 80041d4:	800cd300 	call	800cd30 <__ledf2>
 80041d8:	1003e816 	blt	r2,zero,800517c <_dtoa_r+0x1598>
 80041dc:	b825883a 	mov	r18,r23
 80041e0:	bd83e926 	beq	r23,r22,8005188 <_dtoa_r+0x15a4>
 80041e4:	a809883a 	mov	r4,r21
 80041e8:	980b883a 	mov	r5,r19
 80041ec:	000d883a 	mov	r6,zero
 80041f0:	01d00934 	movhi	r7,16420
 80041f4:	800ce240 	call	800ce24 <__muldf3>
 80041f8:	000d883a 	mov	r6,zero
 80041fc:	01d00934 	movhi	r7,16420
 8004200:	8009883a 	mov	r4,r16
 8004204:	880b883a 	mov	r5,r17
 8004208:	102b883a 	mov	r21,r2
 800420c:	1827883a 	mov	r19,r3
 8004210:	800ce240 	call	800ce24 <__muldf3>
 8004214:	180b883a 	mov	r5,r3
 8004218:	1009883a 	mov	r4,r2
 800421c:	1821883a 	mov	r16,r3
 8004220:	1023883a 	mov	r17,r2
 8004224:	800df8c0 	call	800df8c <__fixdfsi>
 8004228:	1009883a 	mov	r4,r2
 800422c:	1029883a 	mov	r20,r2
 8004230:	800e00c0 	call	800e00c <__floatsidf>
 8004234:	8809883a 	mov	r4,r17
 8004238:	800b883a 	mov	r5,r16
 800423c:	100d883a 	mov	r6,r2
 8004240:	180f883a 	mov	r7,r3
 8004244:	800d6900 	call	800d690 <__subdf3>
 8004248:	a5000c04 	addi	r20,r20,48
 800424c:	a80d883a 	mov	r6,r21
 8004250:	980f883a 	mov	r7,r19
 8004254:	1009883a 	mov	r4,r2
 8004258:	180b883a 	mov	r5,r3
 800425c:	95000005 	stb	r20,0(r18)
 8004260:	1021883a 	mov	r16,r2
 8004264:	1823883a 	mov	r17,r3
 8004268:	800cd300 	call	800cd30 <__ledf2>
 800426c:	bdc00044 	addi	r23,r23,1
 8004270:	800d883a 	mov	r6,r16
 8004274:	880f883a 	mov	r7,r17
 8004278:	0009883a 	mov	r4,zero
 800427c:	014ffc34 	movhi	r5,16368
 8004280:	103fcf0e 	bge	r2,zero,80041c0 <__alt_data_end+0xfc0041c0>
 8004284:	d8c01317 	ldw	r3,76(sp)
 8004288:	d8c00515 	stw	r3,20(sp)
 800428c:	d9400917 	ldw	r5,36(sp)
 8004290:	e009883a 	mov	r4,fp
 8004294:	80073440 	call	8007344 <_Bfree>
 8004298:	d9000517 	ldw	r4,20(sp)
 800429c:	d9802317 	ldw	r6,140(sp)
 80042a0:	d9c02517 	ldw	r7,148(sp)
 80042a4:	b8000005 	stb	zero,0(r23)
 80042a8:	20800044 	addi	r2,r4,1
 80042ac:	30800015 	stw	r2,0(r6)
 80042b0:	3802aa26 	beq	r7,zero,8004d5c <_dtoa_r+0x1178>
 80042b4:	3dc00015 	stw	r23,0(r7)
 80042b8:	d8800717 	ldw	r2,28(sp)
 80042bc:	003e7906 	br	8003ca4 <__alt_data_end+0xfc003ca4>
 80042c0:	00800434 	movhi	r2,16
 80042c4:	10bfffc4 	addi	r2,r2,-1
 80042c8:	88a2703a 	and	r17,r17,r2
 80042cc:	883e851e 	bne	r17,zero,8003ce4 <__alt_data_end+0xfc003ce4>
 80042d0:	00820074 	movhi	r2,2049
 80042d4:	10865a04 	addi	r2,r2,6504
 80042d8:	003e8406 	br	8003cec <__alt_data_end+0xfc003cec>
 80042dc:	10c00204 	addi	r3,r2,8
 80042e0:	003e8706 	br	8003d00 <__alt_data_end+0xfc003d00>
 80042e4:	01400434 	movhi	r5,16
 80042e8:	297fffc4 	addi	r5,r5,-1
 80042ec:	994a703a 	and	r5,r19,r5
 80042f0:	9009883a 	mov	r4,r18
 80042f4:	843f0044 	addi	r16,r16,-1023
 80042f8:	294ffc34 	orhi	r5,r5,16368
 80042fc:	dd800217 	ldw	r22,8(sp)
 8004300:	d8001115 	stw	zero,68(sp)
 8004304:	003ea506 	br	8003d9c <__alt_data_end+0xfc003d9c>
 8004308:	00820074 	movhi	r2,2049
 800430c:	10865104 	addi	r2,r2,6468
 8004310:	003e6406 	br	8003ca4 <__alt_data_end+0xfc003ca4>
 8004314:	e0001115 	stw	zero,68(fp)
 8004318:	000b883a 	mov	r5,zero
 800431c:	e009883a 	mov	r4,fp
 8004320:	800729c0 	call	800729c <_Balloc>
 8004324:	01bfffc4 	movi	r6,-1
 8004328:	01c00044 	movi	r7,1
 800432c:	d8800715 	stw	r2,28(sp)
 8004330:	d9800c15 	stw	r6,48(sp)
 8004334:	e0801015 	stw	r2,64(fp)
 8004338:	d8000315 	stw	zero,12(sp)
 800433c:	d9c00b15 	stw	r7,44(sp)
 8004340:	d9800615 	stw	r6,24(sp)
 8004344:	d8002215 	stw	zero,136(sp)
 8004348:	d8800117 	ldw	r2,4(sp)
 800434c:	10008916 	blt	r2,zero,8004574 <_dtoa_r+0x990>
 8004350:	d9000517 	ldw	r4,20(sp)
 8004354:	00c00384 	movi	r3,14
 8004358:	19008616 	blt	r3,r4,8004574 <_dtoa_r+0x990>
 800435c:	200490fa 	slli	r2,r4,3
 8004360:	00c20074 	movhi	r3,2049
 8004364:	d9802217 	ldw	r6,136(sp)
 8004368:	18c67904 	addi	r3,r3,6628
 800436c:	1885883a 	add	r2,r3,r2
 8004370:	14000017 	ldw	r16,0(r2)
 8004374:	14400117 	ldw	r17,4(r2)
 8004378:	30016316 	blt	r6,zero,8004908 <_dtoa_r+0xd24>
 800437c:	800d883a 	mov	r6,r16
 8004380:	880f883a 	mov	r7,r17
 8004384:	9009883a 	mov	r4,r18
 8004388:	980b883a 	mov	r5,r19
 800438c:	800c1fc0 	call	800c1fc <__divdf3>
 8004390:	180b883a 	mov	r5,r3
 8004394:	1009883a 	mov	r4,r2
 8004398:	800df8c0 	call	800df8c <__fixdfsi>
 800439c:	1009883a 	mov	r4,r2
 80043a0:	102b883a 	mov	r21,r2
 80043a4:	800e00c0 	call	800e00c <__floatsidf>
 80043a8:	800d883a 	mov	r6,r16
 80043ac:	880f883a 	mov	r7,r17
 80043b0:	1009883a 	mov	r4,r2
 80043b4:	180b883a 	mov	r5,r3
 80043b8:	800ce240 	call	800ce24 <__muldf3>
 80043bc:	100d883a 	mov	r6,r2
 80043c0:	180f883a 	mov	r7,r3
 80043c4:	9009883a 	mov	r4,r18
 80043c8:	980b883a 	mov	r5,r19
 80043cc:	800d6900 	call	800d690 <__subdf3>
 80043d0:	d9c00717 	ldw	r7,28(sp)
 80043d4:	1009883a 	mov	r4,r2
 80043d8:	a8800c04 	addi	r2,r21,48
 80043dc:	38800005 	stb	r2,0(r7)
 80043e0:	3dc00044 	addi	r23,r7,1
 80043e4:	d9c00617 	ldw	r7,24(sp)
 80043e8:	01800044 	movi	r6,1
 80043ec:	180b883a 	mov	r5,r3
 80043f0:	2005883a 	mov	r2,r4
 80043f4:	39803826 	beq	r7,r6,80044d8 <_dtoa_r+0x8f4>
 80043f8:	000d883a 	mov	r6,zero
 80043fc:	01d00934 	movhi	r7,16420
 8004400:	800ce240 	call	800ce24 <__muldf3>
 8004404:	000d883a 	mov	r6,zero
 8004408:	000f883a 	mov	r7,zero
 800440c:	1009883a 	mov	r4,r2
 8004410:	180b883a 	mov	r5,r3
 8004414:	1025883a 	mov	r18,r2
 8004418:	1827883a 	mov	r19,r3
 800441c:	800cbcc0 	call	800cbcc <__eqdf2>
 8004420:	103f9a26 	beq	r2,zero,800428c <__alt_data_end+0xfc00428c>
 8004424:	d9c00617 	ldw	r7,24(sp)
 8004428:	d8c00717 	ldw	r3,28(sp)
 800442c:	b829883a 	mov	r20,r23
 8004430:	38bfffc4 	addi	r2,r7,-1
 8004434:	18ad883a 	add	r22,r3,r2
 8004438:	00000a06 	br	8004464 <_dtoa_r+0x880>
 800443c:	800ce240 	call	800ce24 <__muldf3>
 8004440:	000d883a 	mov	r6,zero
 8004444:	000f883a 	mov	r7,zero
 8004448:	1009883a 	mov	r4,r2
 800444c:	180b883a 	mov	r5,r3
 8004450:	1025883a 	mov	r18,r2
 8004454:	1827883a 	mov	r19,r3
 8004458:	b829883a 	mov	r20,r23
 800445c:	800cbcc0 	call	800cbcc <__eqdf2>
 8004460:	103f8a26 	beq	r2,zero,800428c <__alt_data_end+0xfc00428c>
 8004464:	800d883a 	mov	r6,r16
 8004468:	880f883a 	mov	r7,r17
 800446c:	9009883a 	mov	r4,r18
 8004470:	980b883a 	mov	r5,r19
 8004474:	800c1fc0 	call	800c1fc <__divdf3>
 8004478:	180b883a 	mov	r5,r3
 800447c:	1009883a 	mov	r4,r2
 8004480:	800df8c0 	call	800df8c <__fixdfsi>
 8004484:	1009883a 	mov	r4,r2
 8004488:	102b883a 	mov	r21,r2
 800448c:	800e00c0 	call	800e00c <__floatsidf>
 8004490:	800d883a 	mov	r6,r16
 8004494:	880f883a 	mov	r7,r17
 8004498:	1009883a 	mov	r4,r2
 800449c:	180b883a 	mov	r5,r3
 80044a0:	800ce240 	call	800ce24 <__muldf3>
 80044a4:	100d883a 	mov	r6,r2
 80044a8:	180f883a 	mov	r7,r3
 80044ac:	9009883a 	mov	r4,r18
 80044b0:	980b883a 	mov	r5,r19
 80044b4:	800d6900 	call	800d690 <__subdf3>
 80044b8:	aa000c04 	addi	r8,r21,48
 80044bc:	a2000005 	stb	r8,0(r20)
 80044c0:	000d883a 	mov	r6,zero
 80044c4:	01d00934 	movhi	r7,16420
 80044c8:	1009883a 	mov	r4,r2
 80044cc:	180b883a 	mov	r5,r3
 80044d0:	a5c00044 	addi	r23,r20,1
 80044d4:	b53fd91e 	bne	r22,r20,800443c <__alt_data_end+0xfc00443c>
 80044d8:	100d883a 	mov	r6,r2
 80044dc:	180f883a 	mov	r7,r3
 80044e0:	1009883a 	mov	r4,r2
 80044e4:	180b883a 	mov	r5,r3
 80044e8:	800b9500 	call	800b950 <__adddf3>
 80044ec:	100d883a 	mov	r6,r2
 80044f0:	180f883a 	mov	r7,r3
 80044f4:	8009883a 	mov	r4,r16
 80044f8:	880b883a 	mov	r5,r17
 80044fc:	1027883a 	mov	r19,r2
 8004500:	1825883a 	mov	r18,r3
 8004504:	800cd300 	call	800cd30 <__ledf2>
 8004508:	10000816 	blt	r2,zero,800452c <_dtoa_r+0x948>
 800450c:	980d883a 	mov	r6,r19
 8004510:	900f883a 	mov	r7,r18
 8004514:	8009883a 	mov	r4,r16
 8004518:	880b883a 	mov	r5,r17
 800451c:	800cbcc0 	call	800cbcc <__eqdf2>
 8004520:	103f5a1e 	bne	r2,zero,800428c <__alt_data_end+0xfc00428c>
 8004524:	ad40004c 	andi	r21,r21,1
 8004528:	a83f5826 	beq	r21,zero,800428c <__alt_data_end+0xfc00428c>
 800452c:	bd3fffc3 	ldbu	r20,-1(r23)
 8004530:	b8bfffc4 	addi	r2,r23,-1
 8004534:	1007883a 	mov	r3,r2
 8004538:	01400e44 	movi	r5,57
 800453c:	d9800717 	ldw	r6,28(sp)
 8004540:	00000506 	br	8004558 <_dtoa_r+0x974>
 8004544:	18ffffc4 	addi	r3,r3,-1
 8004548:	11824726 	beq	r2,r6,8004e68 <_dtoa_r+0x1284>
 800454c:	1d000003 	ldbu	r20,0(r3)
 8004550:	102f883a 	mov	r23,r2
 8004554:	10bfffc4 	addi	r2,r2,-1
 8004558:	a1003fcc 	andi	r4,r20,255
 800455c:	2100201c 	xori	r4,r4,128
 8004560:	213fe004 	addi	r4,r4,-128
 8004564:	217ff726 	beq	r4,r5,8004544 <__alt_data_end+0xfc004544>
 8004568:	a2000044 	addi	r8,r20,1
 800456c:	12000005 	stb	r8,0(r2)
 8004570:	003f4606 	br	800428c <__alt_data_end+0xfc00428c>
 8004574:	d9000b17 	ldw	r4,44(sp)
 8004578:	2000c826 	beq	r4,zero,800489c <_dtoa_r+0xcb8>
 800457c:	d9800317 	ldw	r6,12(sp)
 8004580:	00c00044 	movi	r3,1
 8004584:	1980f90e 	bge	r3,r6,800496c <_dtoa_r+0xd88>
 8004588:	d8800617 	ldw	r2,24(sp)
 800458c:	d8c00a17 	ldw	r3,40(sp)
 8004590:	157fffc4 	addi	r21,r2,-1
 8004594:	1d41f316 	blt	r3,r21,8004d64 <_dtoa_r+0x1180>
 8004598:	1d6bc83a 	sub	r21,r3,r21
 800459c:	d9c00617 	ldw	r7,24(sp)
 80045a0:	3802aa16 	blt	r7,zero,800504c <_dtoa_r+0x1468>
 80045a4:	dd000817 	ldw	r20,32(sp)
 80045a8:	d8800617 	ldw	r2,24(sp)
 80045ac:	d8c00817 	ldw	r3,32(sp)
 80045b0:	01400044 	movi	r5,1
 80045b4:	e009883a 	mov	r4,fp
 80045b8:	1887883a 	add	r3,r3,r2
 80045bc:	d8c00815 	stw	r3,32(sp)
 80045c0:	b0ad883a 	add	r22,r22,r2
 80045c4:	80076d00 	call	80076d0 <__i2b>
 80045c8:	1023883a 	mov	r17,r2
 80045cc:	a0000826 	beq	r20,zero,80045f0 <_dtoa_r+0xa0c>
 80045d0:	0580070e 	bge	zero,r22,80045f0 <_dtoa_r+0xa0c>
 80045d4:	a005883a 	mov	r2,r20
 80045d8:	b500b916 	blt	r22,r20,80048c0 <_dtoa_r+0xcdc>
 80045dc:	d9000817 	ldw	r4,32(sp)
 80045e0:	a0a9c83a 	sub	r20,r20,r2
 80045e4:	b0adc83a 	sub	r22,r22,r2
 80045e8:	2089c83a 	sub	r4,r4,r2
 80045ec:	d9000815 	stw	r4,32(sp)
 80045f0:	d9800a17 	ldw	r6,40(sp)
 80045f4:	0181810e 	bge	zero,r6,8004bfc <_dtoa_r+0x1018>
 80045f8:	d9c00b17 	ldw	r7,44(sp)
 80045fc:	3800b326 	beq	r7,zero,80048cc <_dtoa_r+0xce8>
 8004600:	a800b226 	beq	r21,zero,80048cc <_dtoa_r+0xce8>
 8004604:	880b883a 	mov	r5,r17
 8004608:	a80d883a 	mov	r6,r21
 800460c:	e009883a 	mov	r4,fp
 8004610:	80079980 	call	8007998 <__pow5mult>
 8004614:	d9800917 	ldw	r6,36(sp)
 8004618:	100b883a 	mov	r5,r2
 800461c:	e009883a 	mov	r4,fp
 8004620:	1023883a 	mov	r17,r2
 8004624:	800770c0 	call	800770c <__multiply>
 8004628:	1021883a 	mov	r16,r2
 800462c:	d8800a17 	ldw	r2,40(sp)
 8004630:	d9400917 	ldw	r5,36(sp)
 8004634:	e009883a 	mov	r4,fp
 8004638:	1545c83a 	sub	r2,r2,r21
 800463c:	d8800a15 	stw	r2,40(sp)
 8004640:	80073440 	call	8007344 <_Bfree>
 8004644:	d8c00a17 	ldw	r3,40(sp)
 8004648:	18009f1e 	bne	r3,zero,80048c8 <_dtoa_r+0xce4>
 800464c:	05c00044 	movi	r23,1
 8004650:	e009883a 	mov	r4,fp
 8004654:	b80b883a 	mov	r5,r23
 8004658:	80076d00 	call	80076d0 <__i2b>
 800465c:	d9000d17 	ldw	r4,52(sp)
 8004660:	102b883a 	mov	r21,r2
 8004664:	2000ce26 	beq	r4,zero,80049a0 <_dtoa_r+0xdbc>
 8004668:	200d883a 	mov	r6,r4
 800466c:	100b883a 	mov	r5,r2
 8004670:	e009883a 	mov	r4,fp
 8004674:	80079980 	call	8007998 <__pow5mult>
 8004678:	d9800317 	ldw	r6,12(sp)
 800467c:	102b883a 	mov	r21,r2
 8004680:	b981810e 	bge	r23,r6,8004c88 <_dtoa_r+0x10a4>
 8004684:	0027883a 	mov	r19,zero
 8004688:	a8800417 	ldw	r2,16(r21)
 800468c:	05c00804 	movi	r23,32
 8004690:	10800104 	addi	r2,r2,4
 8004694:	1085883a 	add	r2,r2,r2
 8004698:	1085883a 	add	r2,r2,r2
 800469c:	a885883a 	add	r2,r21,r2
 80046a0:	11000017 	ldw	r4,0(r2)
 80046a4:	80075b80 	call	80075b8 <__hi0bits>
 80046a8:	b885c83a 	sub	r2,r23,r2
 80046ac:	1585883a 	add	r2,r2,r22
 80046b0:	108007cc 	andi	r2,r2,31
 80046b4:	1000b326 	beq	r2,zero,8004984 <_dtoa_r+0xda0>
 80046b8:	00c00804 	movi	r3,32
 80046bc:	1887c83a 	sub	r3,r3,r2
 80046c0:	01000104 	movi	r4,4
 80046c4:	20c2cd0e 	bge	r4,r3,80051fc <_dtoa_r+0x1618>
 80046c8:	00c00704 	movi	r3,28
 80046cc:	1885c83a 	sub	r2,r3,r2
 80046d0:	d8c00817 	ldw	r3,32(sp)
 80046d4:	a0a9883a 	add	r20,r20,r2
 80046d8:	b0ad883a 	add	r22,r22,r2
 80046dc:	1887883a 	add	r3,r3,r2
 80046e0:	d8c00815 	stw	r3,32(sp)
 80046e4:	d9800817 	ldw	r6,32(sp)
 80046e8:	0180040e 	bge	zero,r6,80046fc <_dtoa_r+0xb18>
 80046ec:	800b883a 	mov	r5,r16
 80046f0:	e009883a 	mov	r4,fp
 80046f4:	8007ad80 	call	8007ad8 <__lshift>
 80046f8:	1021883a 	mov	r16,r2
 80046fc:	0580050e 	bge	zero,r22,8004714 <_dtoa_r+0xb30>
 8004700:	a80b883a 	mov	r5,r21
 8004704:	b00d883a 	mov	r6,r22
 8004708:	e009883a 	mov	r4,fp
 800470c:	8007ad80 	call	8007ad8 <__lshift>
 8004710:	102b883a 	mov	r21,r2
 8004714:	d9c00e17 	ldw	r7,56(sp)
 8004718:	3801211e 	bne	r7,zero,8004ba0 <_dtoa_r+0xfbc>
 800471c:	d9800617 	ldw	r6,24(sp)
 8004720:	0181380e 	bge	zero,r6,8004c04 <_dtoa_r+0x1020>
 8004724:	d8c00b17 	ldw	r3,44(sp)
 8004728:	1800ab1e 	bne	r3,zero,80049d8 <_dtoa_r+0xdf4>
 800472c:	dc800717 	ldw	r18,28(sp)
 8004730:	dcc00617 	ldw	r19,24(sp)
 8004734:	9029883a 	mov	r20,r18
 8004738:	00000206 	br	8004744 <_dtoa_r+0xb60>
 800473c:	800736c0 	call	800736c <__multadd>
 8004740:	1021883a 	mov	r16,r2
 8004744:	a80b883a 	mov	r5,r21
 8004748:	8009883a 	mov	r4,r16
 800474c:	80039bc0 	call	80039bc <quorem>
 8004750:	10800c04 	addi	r2,r2,48
 8004754:	90800005 	stb	r2,0(r18)
 8004758:	94800044 	addi	r18,r18,1
 800475c:	9507c83a 	sub	r3,r18,r20
 8004760:	000f883a 	mov	r7,zero
 8004764:	01800284 	movi	r6,10
 8004768:	800b883a 	mov	r5,r16
 800476c:	e009883a 	mov	r4,fp
 8004770:	1cfff216 	blt	r3,r19,800473c <__alt_data_end+0xfc00473c>
 8004774:	1011883a 	mov	r8,r2
 8004778:	d8800617 	ldw	r2,24(sp)
 800477c:	0082370e 	bge	zero,r2,800505c <_dtoa_r+0x1478>
 8004780:	d9000717 	ldw	r4,28(sp)
 8004784:	0025883a 	mov	r18,zero
 8004788:	20af883a 	add	r23,r4,r2
 800478c:	01800044 	movi	r6,1
 8004790:	800b883a 	mov	r5,r16
 8004794:	e009883a 	mov	r4,fp
 8004798:	da001715 	stw	r8,92(sp)
 800479c:	8007ad80 	call	8007ad8 <__lshift>
 80047a0:	a80b883a 	mov	r5,r21
 80047a4:	1009883a 	mov	r4,r2
 80047a8:	d8800915 	stw	r2,36(sp)
 80047ac:	8007c200 	call	8007c20 <__mcmp>
 80047b0:	da001717 	ldw	r8,92(sp)
 80047b4:	0081800e 	bge	zero,r2,8004db8 <_dtoa_r+0x11d4>
 80047b8:	b93fffc3 	ldbu	r4,-1(r23)
 80047bc:	b8bfffc4 	addi	r2,r23,-1
 80047c0:	1007883a 	mov	r3,r2
 80047c4:	01800e44 	movi	r6,57
 80047c8:	d9c00717 	ldw	r7,28(sp)
 80047cc:	00000506 	br	80047e4 <_dtoa_r+0xc00>
 80047d0:	18ffffc4 	addi	r3,r3,-1
 80047d4:	11c12326 	beq	r2,r7,8004c64 <_dtoa_r+0x1080>
 80047d8:	19000003 	ldbu	r4,0(r3)
 80047dc:	102f883a 	mov	r23,r2
 80047e0:	10bfffc4 	addi	r2,r2,-1
 80047e4:	21403fcc 	andi	r5,r4,255
 80047e8:	2940201c 	xori	r5,r5,128
 80047ec:	297fe004 	addi	r5,r5,-128
 80047f0:	29bff726 	beq	r5,r6,80047d0 <__alt_data_end+0xfc0047d0>
 80047f4:	21000044 	addi	r4,r4,1
 80047f8:	11000005 	stb	r4,0(r2)
 80047fc:	a80b883a 	mov	r5,r21
 8004800:	e009883a 	mov	r4,fp
 8004804:	80073440 	call	8007344 <_Bfree>
 8004808:	883ea026 	beq	r17,zero,800428c <__alt_data_end+0xfc00428c>
 800480c:	90000426 	beq	r18,zero,8004820 <_dtoa_r+0xc3c>
 8004810:	94400326 	beq	r18,r17,8004820 <_dtoa_r+0xc3c>
 8004814:	900b883a 	mov	r5,r18
 8004818:	e009883a 	mov	r4,fp
 800481c:	80073440 	call	8007344 <_Bfree>
 8004820:	880b883a 	mov	r5,r17
 8004824:	e009883a 	mov	r4,fp
 8004828:	80073440 	call	8007344 <_Bfree>
 800482c:	003e9706 	br	800428c <__alt_data_end+0xfc00428c>
 8004830:	01800044 	movi	r6,1
 8004834:	d9800e15 	stw	r6,56(sp)
 8004838:	003d9606 	br	8003e94 <__alt_data_end+0xfc003e94>
 800483c:	d8800817 	ldw	r2,32(sp)
 8004840:	d8c00517 	ldw	r3,20(sp)
 8004844:	d8000d15 	stw	zero,52(sp)
 8004848:	10c5c83a 	sub	r2,r2,r3
 800484c:	00c9c83a 	sub	r4,zero,r3
 8004850:	d8800815 	stw	r2,32(sp)
 8004854:	d9000a15 	stw	r4,40(sp)
 8004858:	003d9706 	br	8003eb8 <__alt_data_end+0xfc003eb8>
 800485c:	05adc83a 	sub	r22,zero,r22
 8004860:	dd800815 	stw	r22,32(sp)
 8004864:	002d883a 	mov	r22,zero
 8004868:	003d8e06 	br	8003ea4 <__alt_data_end+0xfc003ea4>
 800486c:	d9000517 	ldw	r4,20(sp)
 8004870:	800e00c0 	call	800e00c <__floatsidf>
 8004874:	100d883a 	mov	r6,r2
 8004878:	180f883a 	mov	r7,r3
 800487c:	a009883a 	mov	r4,r20
 8004880:	880b883a 	mov	r5,r17
 8004884:	800cbcc0 	call	800cbcc <__eqdf2>
 8004888:	103d7126 	beq	r2,zero,8003e50 <__alt_data_end+0xfc003e50>
 800488c:	d9c00517 	ldw	r7,20(sp)
 8004890:	39ffffc4 	addi	r7,r7,-1
 8004894:	d9c00515 	stw	r7,20(sp)
 8004898:	003d6d06 	br	8003e50 <__alt_data_end+0xfc003e50>
 800489c:	dd400a17 	ldw	r21,40(sp)
 80048a0:	dd000817 	ldw	r20,32(sp)
 80048a4:	0023883a 	mov	r17,zero
 80048a8:	003f4806 	br	80045cc <__alt_data_end+0xfc0045cc>
 80048ac:	10e3c83a 	sub	r17,r2,r3
 80048b0:	9448983a 	sll	r4,r18,r17
 80048b4:	003d3206 	br	8003d80 <__alt_data_end+0xfc003d80>
 80048b8:	d8000e15 	stw	zero,56(sp)
 80048bc:	003d7506 	br	8003e94 <__alt_data_end+0xfc003e94>
 80048c0:	b005883a 	mov	r2,r22
 80048c4:	003f4506 	br	80045dc <__alt_data_end+0xfc0045dc>
 80048c8:	dc000915 	stw	r16,36(sp)
 80048cc:	d9800a17 	ldw	r6,40(sp)
 80048d0:	d9400917 	ldw	r5,36(sp)
 80048d4:	e009883a 	mov	r4,fp
 80048d8:	80079980 	call	8007998 <__pow5mult>
 80048dc:	1021883a 	mov	r16,r2
 80048e0:	003f5a06 	br	800464c <__alt_data_end+0xfc00464c>
 80048e4:	01c00044 	movi	r7,1
 80048e8:	d9c00b15 	stw	r7,44(sp)
 80048ec:	d8802217 	ldw	r2,136(sp)
 80048f0:	0081280e 	bge	zero,r2,8004d94 <_dtoa_r+0x11b0>
 80048f4:	100d883a 	mov	r6,r2
 80048f8:	1021883a 	mov	r16,r2
 80048fc:	d8800c15 	stw	r2,48(sp)
 8004900:	d8800615 	stw	r2,24(sp)
 8004904:	003d8806 	br	8003f28 <__alt_data_end+0xfc003f28>
 8004908:	d8800617 	ldw	r2,24(sp)
 800490c:	00be9b16 	blt	zero,r2,800437c <__alt_data_end+0xfc00437c>
 8004910:	10010f1e 	bne	r2,zero,8004d50 <_dtoa_r+0x116c>
 8004914:	880b883a 	mov	r5,r17
 8004918:	000d883a 	mov	r6,zero
 800491c:	01d00534 	movhi	r7,16404
 8004920:	8009883a 	mov	r4,r16
 8004924:	800ce240 	call	800ce24 <__muldf3>
 8004928:	900d883a 	mov	r6,r18
 800492c:	980f883a 	mov	r7,r19
 8004930:	1009883a 	mov	r4,r2
 8004934:	180b883a 	mov	r5,r3
 8004938:	800cc540 	call	800cc54 <__gedf2>
 800493c:	002b883a 	mov	r21,zero
 8004940:	0023883a 	mov	r17,zero
 8004944:	1000bf16 	blt	r2,zero,8004c44 <_dtoa_r+0x1060>
 8004948:	d9802217 	ldw	r6,136(sp)
 800494c:	ddc00717 	ldw	r23,28(sp)
 8004950:	018c303a 	nor	r6,zero,r6
 8004954:	d9800515 	stw	r6,20(sp)
 8004958:	a80b883a 	mov	r5,r21
 800495c:	e009883a 	mov	r4,fp
 8004960:	80073440 	call	8007344 <_Bfree>
 8004964:	883e4926 	beq	r17,zero,800428c <__alt_data_end+0xfc00428c>
 8004968:	003fad06 	br	8004820 <__alt_data_end+0xfc004820>
 800496c:	d9c01117 	ldw	r7,68(sp)
 8004970:	3801bc26 	beq	r7,zero,8005064 <_dtoa_r+0x1480>
 8004974:	10810cc4 	addi	r2,r2,1075
 8004978:	dd400a17 	ldw	r21,40(sp)
 800497c:	dd000817 	ldw	r20,32(sp)
 8004980:	003f0a06 	br	80045ac <__alt_data_end+0xfc0045ac>
 8004984:	00800704 	movi	r2,28
 8004988:	d9000817 	ldw	r4,32(sp)
 800498c:	a0a9883a 	add	r20,r20,r2
 8004990:	b0ad883a 	add	r22,r22,r2
 8004994:	2089883a 	add	r4,r4,r2
 8004998:	d9000815 	stw	r4,32(sp)
 800499c:	003f5106 	br	80046e4 <__alt_data_end+0xfc0046e4>
 80049a0:	d8c00317 	ldw	r3,12(sp)
 80049a4:	b8c1fc0e 	bge	r23,r3,8005198 <_dtoa_r+0x15b4>
 80049a8:	0027883a 	mov	r19,zero
 80049ac:	b805883a 	mov	r2,r23
 80049b0:	003f3e06 	br	80046ac <__alt_data_end+0xfc0046ac>
 80049b4:	880b883a 	mov	r5,r17
 80049b8:	e009883a 	mov	r4,fp
 80049bc:	000f883a 	mov	r7,zero
 80049c0:	01800284 	movi	r6,10
 80049c4:	800736c0 	call	800736c <__multadd>
 80049c8:	d9000c17 	ldw	r4,48(sp)
 80049cc:	1023883a 	mov	r17,r2
 80049d0:	0102040e 	bge	zero,r4,80051e4 <_dtoa_r+0x1600>
 80049d4:	d9000615 	stw	r4,24(sp)
 80049d8:	0500050e 	bge	zero,r20,80049f0 <_dtoa_r+0xe0c>
 80049dc:	880b883a 	mov	r5,r17
 80049e0:	a00d883a 	mov	r6,r20
 80049e4:	e009883a 	mov	r4,fp
 80049e8:	8007ad80 	call	8007ad8 <__lshift>
 80049ec:	1023883a 	mov	r17,r2
 80049f0:	9801241e 	bne	r19,zero,8004e84 <_dtoa_r+0x12a0>
 80049f4:	8829883a 	mov	r20,r17
 80049f8:	d9000617 	ldw	r4,24(sp)
 80049fc:	dcc00717 	ldw	r19,28(sp)
 8004a00:	9480004c 	andi	r18,r18,1
 8004a04:	20bfffc4 	addi	r2,r4,-1
 8004a08:	9885883a 	add	r2,r19,r2
 8004a0c:	d8800415 	stw	r2,16(sp)
 8004a10:	dc800615 	stw	r18,24(sp)
 8004a14:	a80b883a 	mov	r5,r21
 8004a18:	8009883a 	mov	r4,r16
 8004a1c:	80039bc0 	call	80039bc <quorem>
 8004a20:	880b883a 	mov	r5,r17
 8004a24:	8009883a 	mov	r4,r16
 8004a28:	102f883a 	mov	r23,r2
 8004a2c:	8007c200 	call	8007c20 <__mcmp>
 8004a30:	a80b883a 	mov	r5,r21
 8004a34:	a00d883a 	mov	r6,r20
 8004a38:	e009883a 	mov	r4,fp
 8004a3c:	102d883a 	mov	r22,r2
 8004a40:	8007c800 	call	8007c80 <__mdiff>
 8004a44:	1007883a 	mov	r3,r2
 8004a48:	10800317 	ldw	r2,12(r2)
 8004a4c:	bc800c04 	addi	r18,r23,48
 8004a50:	180b883a 	mov	r5,r3
 8004a54:	10004e1e 	bne	r2,zero,8004b90 <_dtoa_r+0xfac>
 8004a58:	8009883a 	mov	r4,r16
 8004a5c:	d8c01615 	stw	r3,88(sp)
 8004a60:	8007c200 	call	8007c20 <__mcmp>
 8004a64:	d8c01617 	ldw	r3,88(sp)
 8004a68:	e009883a 	mov	r4,fp
 8004a6c:	d8801615 	stw	r2,88(sp)
 8004a70:	180b883a 	mov	r5,r3
 8004a74:	80073440 	call	8007344 <_Bfree>
 8004a78:	d8801617 	ldw	r2,88(sp)
 8004a7c:	1000041e 	bne	r2,zero,8004a90 <_dtoa_r+0xeac>
 8004a80:	d9800317 	ldw	r6,12(sp)
 8004a84:	3000021e 	bne	r6,zero,8004a90 <_dtoa_r+0xeac>
 8004a88:	d8c00617 	ldw	r3,24(sp)
 8004a8c:	18003726 	beq	r3,zero,8004b6c <_dtoa_r+0xf88>
 8004a90:	b0002016 	blt	r22,zero,8004b14 <_dtoa_r+0xf30>
 8004a94:	b000041e 	bne	r22,zero,8004aa8 <_dtoa_r+0xec4>
 8004a98:	d9000317 	ldw	r4,12(sp)
 8004a9c:	2000021e 	bne	r4,zero,8004aa8 <_dtoa_r+0xec4>
 8004aa0:	d8c00617 	ldw	r3,24(sp)
 8004aa4:	18001b26 	beq	r3,zero,8004b14 <_dtoa_r+0xf30>
 8004aa8:	00810716 	blt	zero,r2,8004ec8 <_dtoa_r+0x12e4>
 8004aac:	d8c00417 	ldw	r3,16(sp)
 8004ab0:	9d800044 	addi	r22,r19,1
 8004ab4:	9c800005 	stb	r18,0(r19)
 8004ab8:	b02f883a 	mov	r23,r22
 8004abc:	98c10626 	beq	r19,r3,8004ed8 <_dtoa_r+0x12f4>
 8004ac0:	800b883a 	mov	r5,r16
 8004ac4:	000f883a 	mov	r7,zero
 8004ac8:	01800284 	movi	r6,10
 8004acc:	e009883a 	mov	r4,fp
 8004ad0:	800736c0 	call	800736c <__multadd>
 8004ad4:	1021883a 	mov	r16,r2
 8004ad8:	000f883a 	mov	r7,zero
 8004adc:	01800284 	movi	r6,10
 8004ae0:	880b883a 	mov	r5,r17
 8004ae4:	e009883a 	mov	r4,fp
 8004ae8:	8d002526 	beq	r17,r20,8004b80 <_dtoa_r+0xf9c>
 8004aec:	800736c0 	call	800736c <__multadd>
 8004af0:	a00b883a 	mov	r5,r20
 8004af4:	000f883a 	mov	r7,zero
 8004af8:	01800284 	movi	r6,10
 8004afc:	e009883a 	mov	r4,fp
 8004b00:	1023883a 	mov	r17,r2
 8004b04:	800736c0 	call	800736c <__multadd>
 8004b08:	1029883a 	mov	r20,r2
 8004b0c:	b027883a 	mov	r19,r22
 8004b10:	003fc006 	br	8004a14 <__alt_data_end+0xfc004a14>
 8004b14:	9011883a 	mov	r8,r18
 8004b18:	00800e0e 	bge	zero,r2,8004b54 <_dtoa_r+0xf70>
 8004b1c:	800b883a 	mov	r5,r16
 8004b20:	01800044 	movi	r6,1
 8004b24:	e009883a 	mov	r4,fp
 8004b28:	da001715 	stw	r8,92(sp)
 8004b2c:	8007ad80 	call	8007ad8 <__lshift>
 8004b30:	a80b883a 	mov	r5,r21
 8004b34:	1009883a 	mov	r4,r2
 8004b38:	1021883a 	mov	r16,r2
 8004b3c:	8007c200 	call	8007c20 <__mcmp>
 8004b40:	da001717 	ldw	r8,92(sp)
 8004b44:	0081960e 	bge	zero,r2,80051a0 <_dtoa_r+0x15bc>
 8004b48:	00800e44 	movi	r2,57
 8004b4c:	40817026 	beq	r8,r2,8005110 <_dtoa_r+0x152c>
 8004b50:	ba000c44 	addi	r8,r23,49
 8004b54:	8825883a 	mov	r18,r17
 8004b58:	9dc00044 	addi	r23,r19,1
 8004b5c:	9a000005 	stb	r8,0(r19)
 8004b60:	a023883a 	mov	r17,r20
 8004b64:	dc000915 	stw	r16,36(sp)
 8004b68:	003f2406 	br	80047fc <__alt_data_end+0xfc0047fc>
 8004b6c:	00800e44 	movi	r2,57
 8004b70:	9011883a 	mov	r8,r18
 8004b74:	90816626 	beq	r18,r2,8005110 <_dtoa_r+0x152c>
 8004b78:	05bff516 	blt	zero,r22,8004b50 <__alt_data_end+0xfc004b50>
 8004b7c:	003ff506 	br	8004b54 <__alt_data_end+0xfc004b54>
 8004b80:	800736c0 	call	800736c <__multadd>
 8004b84:	1023883a 	mov	r17,r2
 8004b88:	1029883a 	mov	r20,r2
 8004b8c:	003fdf06 	br	8004b0c <__alt_data_end+0xfc004b0c>
 8004b90:	e009883a 	mov	r4,fp
 8004b94:	80073440 	call	8007344 <_Bfree>
 8004b98:	00800044 	movi	r2,1
 8004b9c:	003fbc06 	br	8004a90 <__alt_data_end+0xfc004a90>
 8004ba0:	a80b883a 	mov	r5,r21
 8004ba4:	8009883a 	mov	r4,r16
 8004ba8:	8007c200 	call	8007c20 <__mcmp>
 8004bac:	103edb0e 	bge	r2,zero,800471c <__alt_data_end+0xfc00471c>
 8004bb0:	800b883a 	mov	r5,r16
 8004bb4:	000f883a 	mov	r7,zero
 8004bb8:	01800284 	movi	r6,10
 8004bbc:	e009883a 	mov	r4,fp
 8004bc0:	800736c0 	call	800736c <__multadd>
 8004bc4:	1021883a 	mov	r16,r2
 8004bc8:	d8800517 	ldw	r2,20(sp)
 8004bcc:	d8c00b17 	ldw	r3,44(sp)
 8004bd0:	10bfffc4 	addi	r2,r2,-1
 8004bd4:	d8800515 	stw	r2,20(sp)
 8004bd8:	183f761e 	bne	r3,zero,80049b4 <__alt_data_end+0xfc0049b4>
 8004bdc:	d9000c17 	ldw	r4,48(sp)
 8004be0:	0101730e 	bge	zero,r4,80051b0 <_dtoa_r+0x15cc>
 8004be4:	d9000615 	stw	r4,24(sp)
 8004be8:	003ed006 	br	800472c <__alt_data_end+0xfc00472c>
 8004bec:	00800084 	movi	r2,2
 8004bf0:	3081861e 	bne	r6,r2,800520c <_dtoa_r+0x1628>
 8004bf4:	d8000b15 	stw	zero,44(sp)
 8004bf8:	003f3c06 	br	80048ec <__alt_data_end+0xfc0048ec>
 8004bfc:	dc000917 	ldw	r16,36(sp)
 8004c00:	003e9206 	br	800464c <__alt_data_end+0xfc00464c>
 8004c04:	d9c00317 	ldw	r7,12(sp)
 8004c08:	00800084 	movi	r2,2
 8004c0c:	11fec50e 	bge	r2,r7,8004724 <__alt_data_end+0xfc004724>
 8004c10:	d9000617 	ldw	r4,24(sp)
 8004c14:	20013c1e 	bne	r4,zero,8005108 <_dtoa_r+0x1524>
 8004c18:	a80b883a 	mov	r5,r21
 8004c1c:	000f883a 	mov	r7,zero
 8004c20:	01800144 	movi	r6,5
 8004c24:	e009883a 	mov	r4,fp
 8004c28:	800736c0 	call	800736c <__multadd>
 8004c2c:	100b883a 	mov	r5,r2
 8004c30:	8009883a 	mov	r4,r16
 8004c34:	102b883a 	mov	r21,r2
 8004c38:	8007c200 	call	8007c20 <__mcmp>
 8004c3c:	dc000915 	stw	r16,36(sp)
 8004c40:	00bf410e 	bge	zero,r2,8004948 <__alt_data_end+0xfc004948>
 8004c44:	d9c00717 	ldw	r7,28(sp)
 8004c48:	00800c44 	movi	r2,49
 8004c4c:	38800005 	stb	r2,0(r7)
 8004c50:	d8800517 	ldw	r2,20(sp)
 8004c54:	3dc00044 	addi	r23,r7,1
 8004c58:	10800044 	addi	r2,r2,1
 8004c5c:	d8800515 	stw	r2,20(sp)
 8004c60:	003f3d06 	br	8004958 <__alt_data_end+0xfc004958>
 8004c64:	d9800517 	ldw	r6,20(sp)
 8004c68:	d9c00717 	ldw	r7,28(sp)
 8004c6c:	00800c44 	movi	r2,49
 8004c70:	31800044 	addi	r6,r6,1
 8004c74:	d9800515 	stw	r6,20(sp)
 8004c78:	38800005 	stb	r2,0(r7)
 8004c7c:	003edf06 	br	80047fc <__alt_data_end+0xfc0047fc>
 8004c80:	d8000b15 	stw	zero,44(sp)
 8004c84:	003c9f06 	br	8003f04 <__alt_data_end+0xfc003f04>
 8004c88:	903e7e1e 	bne	r18,zero,8004684 <__alt_data_end+0xfc004684>
 8004c8c:	00800434 	movhi	r2,16
 8004c90:	10bfffc4 	addi	r2,r2,-1
 8004c94:	9884703a 	and	r2,r19,r2
 8004c98:	1000ea1e 	bne	r2,zero,8005044 <_dtoa_r+0x1460>
 8004c9c:	9cdffc2c 	andhi	r19,r19,32752
 8004ca0:	9800e826 	beq	r19,zero,8005044 <_dtoa_r+0x1460>
 8004ca4:	d9c00817 	ldw	r7,32(sp)
 8004ca8:	b5800044 	addi	r22,r22,1
 8004cac:	04c00044 	movi	r19,1
 8004cb0:	39c00044 	addi	r7,r7,1
 8004cb4:	d9c00815 	stw	r7,32(sp)
 8004cb8:	d8800d17 	ldw	r2,52(sp)
 8004cbc:	103e721e 	bne	r2,zero,8004688 <__alt_data_end+0xfc004688>
 8004cc0:	00800044 	movi	r2,1
 8004cc4:	003e7906 	br	80046ac <__alt_data_end+0xfc0046ac>
 8004cc8:	8009883a 	mov	r4,r16
 8004ccc:	800e00c0 	call	800e00c <__floatsidf>
 8004cd0:	d9800f17 	ldw	r6,60(sp)
 8004cd4:	d9c01017 	ldw	r7,64(sp)
 8004cd8:	1009883a 	mov	r4,r2
 8004cdc:	180b883a 	mov	r5,r3
 8004ce0:	800ce240 	call	800ce24 <__muldf3>
 8004ce4:	000d883a 	mov	r6,zero
 8004ce8:	01d00734 	movhi	r7,16412
 8004cec:	1009883a 	mov	r4,r2
 8004cf0:	180b883a 	mov	r5,r3
 8004cf4:	800b9500 	call	800b950 <__adddf3>
 8004cf8:	047f3034 	movhi	r17,64704
 8004cfc:	1021883a 	mov	r16,r2
 8004d00:	1c63883a 	add	r17,r3,r17
 8004d04:	d9000f17 	ldw	r4,60(sp)
 8004d08:	d9401017 	ldw	r5,64(sp)
 8004d0c:	000d883a 	mov	r6,zero
 8004d10:	01d00534 	movhi	r7,16404
 8004d14:	800d6900 	call	800d690 <__subdf3>
 8004d18:	800d883a 	mov	r6,r16
 8004d1c:	880f883a 	mov	r7,r17
 8004d20:	1009883a 	mov	r4,r2
 8004d24:	180b883a 	mov	r5,r3
 8004d28:	102b883a 	mov	r21,r2
 8004d2c:	1829883a 	mov	r20,r3
 8004d30:	800cc540 	call	800cc54 <__gedf2>
 8004d34:	00806c16 	blt	zero,r2,8004ee8 <_dtoa_r+0x1304>
 8004d38:	89e0003c 	xorhi	r7,r17,32768
 8004d3c:	800d883a 	mov	r6,r16
 8004d40:	a809883a 	mov	r4,r21
 8004d44:	a00b883a 	mov	r5,r20
 8004d48:	800cd300 	call	800cd30 <__ledf2>
 8004d4c:	103d7e0e 	bge	r2,zero,8004348 <__alt_data_end+0xfc004348>
 8004d50:	002b883a 	mov	r21,zero
 8004d54:	0023883a 	mov	r17,zero
 8004d58:	003efb06 	br	8004948 <__alt_data_end+0xfc004948>
 8004d5c:	d8800717 	ldw	r2,28(sp)
 8004d60:	003bd006 	br	8003ca4 <__alt_data_end+0xfc003ca4>
 8004d64:	d9000a17 	ldw	r4,40(sp)
 8004d68:	d9800d17 	ldw	r6,52(sp)
 8004d6c:	dd400a15 	stw	r21,40(sp)
 8004d70:	a905c83a 	sub	r2,r21,r4
 8004d74:	308d883a 	add	r6,r6,r2
 8004d78:	d9800d15 	stw	r6,52(sp)
 8004d7c:	002b883a 	mov	r21,zero
 8004d80:	003e0606 	br	800459c <__alt_data_end+0xfc00459c>
 8004d84:	9023883a 	mov	r17,r18
 8004d88:	9829883a 	mov	r20,r19
 8004d8c:	04000084 	movi	r16,2
 8004d90:	003c9206 	br	8003fdc <__alt_data_end+0xfc003fdc>
 8004d94:	04000044 	movi	r16,1
 8004d98:	dc000c15 	stw	r16,48(sp)
 8004d9c:	dc000615 	stw	r16,24(sp)
 8004da0:	dc002215 	stw	r16,136(sp)
 8004da4:	e0001115 	stw	zero,68(fp)
 8004da8:	000b883a 	mov	r5,zero
 8004dac:	003c6906 	br	8003f54 <__alt_data_end+0xfc003f54>
 8004db0:	3021883a 	mov	r16,r6
 8004db4:	003ffb06 	br	8004da4 <__alt_data_end+0xfc004da4>
 8004db8:	1000021e 	bne	r2,zero,8004dc4 <_dtoa_r+0x11e0>
 8004dbc:	4200004c 	andi	r8,r8,1
 8004dc0:	403e7d1e 	bne	r8,zero,80047b8 <__alt_data_end+0xfc0047b8>
 8004dc4:	01000c04 	movi	r4,48
 8004dc8:	00000106 	br	8004dd0 <_dtoa_r+0x11ec>
 8004dcc:	102f883a 	mov	r23,r2
 8004dd0:	b8bfffc4 	addi	r2,r23,-1
 8004dd4:	10c00007 	ldb	r3,0(r2)
 8004dd8:	193ffc26 	beq	r3,r4,8004dcc <__alt_data_end+0xfc004dcc>
 8004ddc:	003e8706 	br	80047fc <__alt_data_end+0xfc0047fc>
 8004de0:	d8800517 	ldw	r2,20(sp)
 8004de4:	00a3c83a 	sub	r17,zero,r2
 8004de8:	8800a426 	beq	r17,zero,800507c <_dtoa_r+0x1498>
 8004dec:	888003cc 	andi	r2,r17,15
 8004df0:	100490fa 	slli	r2,r2,3
 8004df4:	00c20074 	movhi	r3,2049
 8004df8:	18c67904 	addi	r3,r3,6628
 8004dfc:	1885883a 	add	r2,r3,r2
 8004e00:	11800017 	ldw	r6,0(r2)
 8004e04:	11c00117 	ldw	r7,4(r2)
 8004e08:	9009883a 	mov	r4,r18
 8004e0c:	980b883a 	mov	r5,r19
 8004e10:	8823d13a 	srai	r17,r17,4
 8004e14:	800ce240 	call	800ce24 <__muldf3>
 8004e18:	d8800f15 	stw	r2,60(sp)
 8004e1c:	d8c01015 	stw	r3,64(sp)
 8004e20:	8800e826 	beq	r17,zero,80051c4 <_dtoa_r+0x15e0>
 8004e24:	05020074 	movhi	r20,2049
 8004e28:	a5066f04 	addi	r20,r20,6588
 8004e2c:	04000084 	movi	r16,2
 8004e30:	8980004c 	andi	r6,r17,1
 8004e34:	1009883a 	mov	r4,r2
 8004e38:	8823d07a 	srai	r17,r17,1
 8004e3c:	180b883a 	mov	r5,r3
 8004e40:	30000426 	beq	r6,zero,8004e54 <_dtoa_r+0x1270>
 8004e44:	a1800017 	ldw	r6,0(r20)
 8004e48:	a1c00117 	ldw	r7,4(r20)
 8004e4c:	84000044 	addi	r16,r16,1
 8004e50:	800ce240 	call	800ce24 <__muldf3>
 8004e54:	a5000204 	addi	r20,r20,8
 8004e58:	883ff51e 	bne	r17,zero,8004e30 <__alt_data_end+0xfc004e30>
 8004e5c:	d8800f15 	stw	r2,60(sp)
 8004e60:	d8c01015 	stw	r3,64(sp)
 8004e64:	003c7606 	br	8004040 <__alt_data_end+0xfc004040>
 8004e68:	00c00c04 	movi	r3,48
 8004e6c:	10c00005 	stb	r3,0(r2)
 8004e70:	d8c00517 	ldw	r3,20(sp)
 8004e74:	bd3fffc3 	ldbu	r20,-1(r23)
 8004e78:	18c00044 	addi	r3,r3,1
 8004e7c:	d8c00515 	stw	r3,20(sp)
 8004e80:	003db906 	br	8004568 <__alt_data_end+0xfc004568>
 8004e84:	89400117 	ldw	r5,4(r17)
 8004e88:	e009883a 	mov	r4,fp
 8004e8c:	800729c0 	call	800729c <_Balloc>
 8004e90:	89800417 	ldw	r6,16(r17)
 8004e94:	89400304 	addi	r5,r17,12
 8004e98:	11000304 	addi	r4,r2,12
 8004e9c:	31800084 	addi	r6,r6,2
 8004ea0:	318d883a 	add	r6,r6,r6
 8004ea4:	318d883a 	add	r6,r6,r6
 8004ea8:	1027883a 	mov	r19,r2
 8004eac:	8006ed00 	call	8006ed0 <memcpy>
 8004eb0:	01800044 	movi	r6,1
 8004eb4:	980b883a 	mov	r5,r19
 8004eb8:	e009883a 	mov	r4,fp
 8004ebc:	8007ad80 	call	8007ad8 <__lshift>
 8004ec0:	1029883a 	mov	r20,r2
 8004ec4:	003ecc06 	br	80049f8 <__alt_data_end+0xfc0049f8>
 8004ec8:	00800e44 	movi	r2,57
 8004ecc:	90809026 	beq	r18,r2,8005110 <_dtoa_r+0x152c>
 8004ed0:	92000044 	addi	r8,r18,1
 8004ed4:	003f1f06 	br	8004b54 <__alt_data_end+0xfc004b54>
 8004ed8:	9011883a 	mov	r8,r18
 8004edc:	8825883a 	mov	r18,r17
 8004ee0:	a023883a 	mov	r17,r20
 8004ee4:	003e2906 	br	800478c <__alt_data_end+0xfc00478c>
 8004ee8:	002b883a 	mov	r21,zero
 8004eec:	0023883a 	mov	r17,zero
 8004ef0:	003f5406 	br	8004c44 <__alt_data_end+0xfc004c44>
 8004ef4:	61bfffc4 	addi	r6,r12,-1
 8004ef8:	300490fa 	slli	r2,r6,3
 8004efc:	00c20074 	movhi	r3,2049
 8004f00:	18c67904 	addi	r3,r3,6628
 8004f04:	1885883a 	add	r2,r3,r2
 8004f08:	11000017 	ldw	r4,0(r2)
 8004f0c:	11400117 	ldw	r5,4(r2)
 8004f10:	d8800717 	ldw	r2,28(sp)
 8004f14:	880f883a 	mov	r7,r17
 8004f18:	d9801215 	stw	r6,72(sp)
 8004f1c:	800d883a 	mov	r6,r16
 8004f20:	db001615 	stw	r12,88(sp)
 8004f24:	15c00044 	addi	r23,r2,1
 8004f28:	800ce240 	call	800ce24 <__muldf3>
 8004f2c:	d9401017 	ldw	r5,64(sp)
 8004f30:	d9000f17 	ldw	r4,60(sp)
 8004f34:	d8c01515 	stw	r3,84(sp)
 8004f38:	d8801415 	stw	r2,80(sp)
 8004f3c:	800df8c0 	call	800df8c <__fixdfsi>
 8004f40:	1009883a 	mov	r4,r2
 8004f44:	1021883a 	mov	r16,r2
 8004f48:	800e00c0 	call	800e00c <__floatsidf>
 8004f4c:	d9000f17 	ldw	r4,60(sp)
 8004f50:	d9401017 	ldw	r5,64(sp)
 8004f54:	100d883a 	mov	r6,r2
 8004f58:	180f883a 	mov	r7,r3
 8004f5c:	800d6900 	call	800d690 <__subdf3>
 8004f60:	1829883a 	mov	r20,r3
 8004f64:	d8c00717 	ldw	r3,28(sp)
 8004f68:	84000c04 	addi	r16,r16,48
 8004f6c:	1023883a 	mov	r17,r2
 8004f70:	1c000005 	stb	r16,0(r3)
 8004f74:	db001617 	ldw	r12,88(sp)
 8004f78:	00800044 	movi	r2,1
 8004f7c:	60802226 	beq	r12,r2,8005008 <_dtoa_r+0x1424>
 8004f80:	d9c00717 	ldw	r7,28(sp)
 8004f84:	8805883a 	mov	r2,r17
 8004f88:	b82b883a 	mov	r21,r23
 8004f8c:	3b19883a 	add	r12,r7,r12
 8004f90:	6023883a 	mov	r17,r12
 8004f94:	a007883a 	mov	r3,r20
 8004f98:	dc800f15 	stw	r18,60(sp)
 8004f9c:	000d883a 	mov	r6,zero
 8004fa0:	01d00934 	movhi	r7,16420
 8004fa4:	1009883a 	mov	r4,r2
 8004fa8:	180b883a 	mov	r5,r3
 8004fac:	800ce240 	call	800ce24 <__muldf3>
 8004fb0:	180b883a 	mov	r5,r3
 8004fb4:	1009883a 	mov	r4,r2
 8004fb8:	1829883a 	mov	r20,r3
 8004fbc:	1025883a 	mov	r18,r2
 8004fc0:	800df8c0 	call	800df8c <__fixdfsi>
 8004fc4:	1009883a 	mov	r4,r2
 8004fc8:	1021883a 	mov	r16,r2
 8004fcc:	800e00c0 	call	800e00c <__floatsidf>
 8004fd0:	100d883a 	mov	r6,r2
 8004fd4:	180f883a 	mov	r7,r3
 8004fd8:	9009883a 	mov	r4,r18
 8004fdc:	a00b883a 	mov	r5,r20
 8004fe0:	84000c04 	addi	r16,r16,48
 8004fe4:	800d6900 	call	800d690 <__subdf3>
 8004fe8:	ad400044 	addi	r21,r21,1
 8004fec:	ac3fffc5 	stb	r16,-1(r21)
 8004ff0:	ac7fea1e 	bne	r21,r17,8004f9c <__alt_data_end+0xfc004f9c>
 8004ff4:	1023883a 	mov	r17,r2
 8004ff8:	d8801217 	ldw	r2,72(sp)
 8004ffc:	dc800f17 	ldw	r18,60(sp)
 8005000:	1829883a 	mov	r20,r3
 8005004:	b8af883a 	add	r23,r23,r2
 8005008:	d9001417 	ldw	r4,80(sp)
 800500c:	d9401517 	ldw	r5,84(sp)
 8005010:	000d883a 	mov	r6,zero
 8005014:	01cff834 	movhi	r7,16352
 8005018:	800b9500 	call	800b950 <__adddf3>
 800501c:	880d883a 	mov	r6,r17
 8005020:	a00f883a 	mov	r7,r20
 8005024:	1009883a 	mov	r4,r2
 8005028:	180b883a 	mov	r5,r3
 800502c:	800cd300 	call	800cd30 <__ledf2>
 8005030:	10003e0e 	bge	r2,zero,800512c <_dtoa_r+0x1548>
 8005034:	d9001317 	ldw	r4,76(sp)
 8005038:	bd3fffc3 	ldbu	r20,-1(r23)
 800503c:	d9000515 	stw	r4,20(sp)
 8005040:	003d3b06 	br	8004530 <__alt_data_end+0xfc004530>
 8005044:	0027883a 	mov	r19,zero
 8005048:	003f1b06 	br	8004cb8 <__alt_data_end+0xfc004cb8>
 800504c:	d8800817 	ldw	r2,32(sp)
 8005050:	11e9c83a 	sub	r20,r2,r7
 8005054:	0005883a 	mov	r2,zero
 8005058:	003d5406 	br	80045ac <__alt_data_end+0xfc0045ac>
 800505c:	00800044 	movi	r2,1
 8005060:	003dc706 	br	8004780 <__alt_data_end+0xfc004780>
 8005064:	d8c00217 	ldw	r3,8(sp)
 8005068:	00800d84 	movi	r2,54
 800506c:	dd400a17 	ldw	r21,40(sp)
 8005070:	10c5c83a 	sub	r2,r2,r3
 8005074:	dd000817 	ldw	r20,32(sp)
 8005078:	003d4c06 	br	80045ac <__alt_data_end+0xfc0045ac>
 800507c:	dc800f15 	stw	r18,60(sp)
 8005080:	dcc01015 	stw	r19,64(sp)
 8005084:	04000084 	movi	r16,2
 8005088:	003bed06 	br	8004040 <__alt_data_end+0xfc004040>
 800508c:	d9000617 	ldw	r4,24(sp)
 8005090:	203f0d26 	beq	r4,zero,8004cc8 <__alt_data_end+0xfc004cc8>
 8005094:	d9800c17 	ldw	r6,48(sp)
 8005098:	01bcab0e 	bge	zero,r6,8004348 <__alt_data_end+0xfc004348>
 800509c:	d9401017 	ldw	r5,64(sp)
 80050a0:	d9000f17 	ldw	r4,60(sp)
 80050a4:	000d883a 	mov	r6,zero
 80050a8:	01d00934 	movhi	r7,16420
 80050ac:	800ce240 	call	800ce24 <__muldf3>
 80050b0:	81000044 	addi	r4,r16,1
 80050b4:	d8800f15 	stw	r2,60(sp)
 80050b8:	d8c01015 	stw	r3,64(sp)
 80050bc:	800e00c0 	call	800e00c <__floatsidf>
 80050c0:	d9800f17 	ldw	r6,60(sp)
 80050c4:	d9c01017 	ldw	r7,64(sp)
 80050c8:	1009883a 	mov	r4,r2
 80050cc:	180b883a 	mov	r5,r3
 80050d0:	800ce240 	call	800ce24 <__muldf3>
 80050d4:	01d00734 	movhi	r7,16412
 80050d8:	000d883a 	mov	r6,zero
 80050dc:	1009883a 	mov	r4,r2
 80050e0:	180b883a 	mov	r5,r3
 80050e4:	800b9500 	call	800b950 <__adddf3>
 80050e8:	d9c00517 	ldw	r7,20(sp)
 80050ec:	047f3034 	movhi	r17,64704
 80050f0:	1021883a 	mov	r16,r2
 80050f4:	39ffffc4 	addi	r7,r7,-1
 80050f8:	d9c01315 	stw	r7,76(sp)
 80050fc:	1c63883a 	add	r17,r3,r17
 8005100:	db000c17 	ldw	r12,48(sp)
 8005104:	003bea06 	br	80040b0 <__alt_data_end+0xfc0040b0>
 8005108:	dc000915 	stw	r16,36(sp)
 800510c:	003e0e06 	br	8004948 <__alt_data_end+0xfc004948>
 8005110:	01000e44 	movi	r4,57
 8005114:	8825883a 	mov	r18,r17
 8005118:	9dc00044 	addi	r23,r19,1
 800511c:	99000005 	stb	r4,0(r19)
 8005120:	a023883a 	mov	r17,r20
 8005124:	dc000915 	stw	r16,36(sp)
 8005128:	003da406 	br	80047bc <__alt_data_end+0xfc0047bc>
 800512c:	d9801417 	ldw	r6,80(sp)
 8005130:	d9c01517 	ldw	r7,84(sp)
 8005134:	0009883a 	mov	r4,zero
 8005138:	014ff834 	movhi	r5,16352
 800513c:	800d6900 	call	800d690 <__subdf3>
 8005140:	880d883a 	mov	r6,r17
 8005144:	a00f883a 	mov	r7,r20
 8005148:	1009883a 	mov	r4,r2
 800514c:	180b883a 	mov	r5,r3
 8005150:	800cc540 	call	800cc54 <__gedf2>
 8005154:	00bc7c0e 	bge	zero,r2,8004348 <__alt_data_end+0xfc004348>
 8005158:	01000c04 	movi	r4,48
 800515c:	00000106 	br	8005164 <_dtoa_r+0x1580>
 8005160:	102f883a 	mov	r23,r2
 8005164:	b8bfffc4 	addi	r2,r23,-1
 8005168:	10c00007 	ldb	r3,0(r2)
 800516c:	193ffc26 	beq	r3,r4,8005160 <__alt_data_end+0xfc005160>
 8005170:	d9801317 	ldw	r6,76(sp)
 8005174:	d9800515 	stw	r6,20(sp)
 8005178:	003c4406 	br	800428c <__alt_data_end+0xfc00428c>
 800517c:	d9801317 	ldw	r6,76(sp)
 8005180:	d9800515 	stw	r6,20(sp)
 8005184:	003cea06 	br	8004530 <__alt_data_end+0xfc004530>
 8005188:	dd800f17 	ldw	r22,60(sp)
 800518c:	dcc01017 	ldw	r19,64(sp)
 8005190:	dc801217 	ldw	r18,72(sp)
 8005194:	003c6c06 	br	8004348 <__alt_data_end+0xfc004348>
 8005198:	903e031e 	bne	r18,zero,80049a8 <__alt_data_end+0xfc0049a8>
 800519c:	003ebb06 	br	8004c8c <__alt_data_end+0xfc004c8c>
 80051a0:	103e6c1e 	bne	r2,zero,8004b54 <__alt_data_end+0xfc004b54>
 80051a4:	4080004c 	andi	r2,r8,1
 80051a8:	103e6a26 	beq	r2,zero,8004b54 <__alt_data_end+0xfc004b54>
 80051ac:	003e6606 	br	8004b48 <__alt_data_end+0xfc004b48>
 80051b0:	d8c00317 	ldw	r3,12(sp)
 80051b4:	00800084 	movi	r2,2
 80051b8:	10c02916 	blt	r2,r3,8005260 <_dtoa_r+0x167c>
 80051bc:	d9000c17 	ldw	r4,48(sp)
 80051c0:	003e8806 	br	8004be4 <__alt_data_end+0xfc004be4>
 80051c4:	04000084 	movi	r16,2
 80051c8:	003b9d06 	br	8004040 <__alt_data_end+0xfc004040>
 80051cc:	d9001317 	ldw	r4,76(sp)
 80051d0:	d9000515 	stw	r4,20(sp)
 80051d4:	003cd606 	br	8004530 <__alt_data_end+0xfc004530>
 80051d8:	d8801317 	ldw	r2,76(sp)
 80051dc:	d8800515 	stw	r2,20(sp)
 80051e0:	003c2a06 	br	800428c <__alt_data_end+0xfc00428c>
 80051e4:	d9800317 	ldw	r6,12(sp)
 80051e8:	00800084 	movi	r2,2
 80051ec:	11801516 	blt	r2,r6,8005244 <_dtoa_r+0x1660>
 80051f0:	d9c00c17 	ldw	r7,48(sp)
 80051f4:	d9c00615 	stw	r7,24(sp)
 80051f8:	003df706 	br	80049d8 <__alt_data_end+0xfc0049d8>
 80051fc:	193d3926 	beq	r3,r4,80046e4 <__alt_data_end+0xfc0046e4>
 8005200:	00c00f04 	movi	r3,60
 8005204:	1885c83a 	sub	r2,r3,r2
 8005208:	003ddf06 	br	8004988 <__alt_data_end+0xfc004988>
 800520c:	e009883a 	mov	r4,fp
 8005210:	e0001115 	stw	zero,68(fp)
 8005214:	000b883a 	mov	r5,zero
 8005218:	800729c0 	call	800729c <_Balloc>
 800521c:	d8800715 	stw	r2,28(sp)
 8005220:	d8c00717 	ldw	r3,28(sp)
 8005224:	00bfffc4 	movi	r2,-1
 8005228:	01000044 	movi	r4,1
 800522c:	d8800c15 	stw	r2,48(sp)
 8005230:	e0c01015 	stw	r3,64(fp)
 8005234:	d9000b15 	stw	r4,44(sp)
 8005238:	d8800615 	stw	r2,24(sp)
 800523c:	d8002215 	stw	zero,136(sp)
 8005240:	003c4106 	br	8004348 <__alt_data_end+0xfc004348>
 8005244:	d8c00c17 	ldw	r3,48(sp)
 8005248:	d8c00615 	stw	r3,24(sp)
 800524c:	003e7006 	br	8004c10 <__alt_data_end+0xfc004c10>
 8005250:	04400044 	movi	r17,1
 8005254:	003b2006 	br	8003ed8 <__alt_data_end+0xfc003ed8>
 8005258:	000b883a 	mov	r5,zero
 800525c:	003b3d06 	br	8003f54 <__alt_data_end+0xfc003f54>
 8005260:	d8800c17 	ldw	r2,48(sp)
 8005264:	d8800615 	stw	r2,24(sp)
 8005268:	003e6906 	br	8004c10 <__alt_data_end+0xfc004c10>

0800526c <__sflush_r>:
 800526c:	2880030b 	ldhu	r2,12(r5)
 8005270:	defffb04 	addi	sp,sp,-20
 8005274:	dcc00315 	stw	r19,12(sp)
 8005278:	dc400115 	stw	r17,4(sp)
 800527c:	dfc00415 	stw	ra,16(sp)
 8005280:	dc800215 	stw	r18,8(sp)
 8005284:	dc000015 	stw	r16,0(sp)
 8005288:	10c0020c 	andi	r3,r2,8
 800528c:	2823883a 	mov	r17,r5
 8005290:	2027883a 	mov	r19,r4
 8005294:	1800311e 	bne	r3,zero,800535c <__sflush_r+0xf0>
 8005298:	28c00117 	ldw	r3,4(r5)
 800529c:	10820014 	ori	r2,r2,2048
 80052a0:	2880030d 	sth	r2,12(r5)
 80052a4:	00c04b0e 	bge	zero,r3,80053d4 <__sflush_r+0x168>
 80052a8:	8a000a17 	ldw	r8,40(r17)
 80052ac:	40002326 	beq	r8,zero,800533c <__sflush_r+0xd0>
 80052b0:	9c000017 	ldw	r16,0(r19)
 80052b4:	10c4000c 	andi	r3,r2,4096
 80052b8:	98000015 	stw	zero,0(r19)
 80052bc:	18004826 	beq	r3,zero,80053e0 <__sflush_r+0x174>
 80052c0:	89801417 	ldw	r6,80(r17)
 80052c4:	10c0010c 	andi	r3,r2,4
 80052c8:	18000626 	beq	r3,zero,80052e4 <__sflush_r+0x78>
 80052cc:	88c00117 	ldw	r3,4(r17)
 80052d0:	88800c17 	ldw	r2,48(r17)
 80052d4:	30cdc83a 	sub	r6,r6,r3
 80052d8:	10000226 	beq	r2,zero,80052e4 <__sflush_r+0x78>
 80052dc:	88800f17 	ldw	r2,60(r17)
 80052e0:	308dc83a 	sub	r6,r6,r2
 80052e4:	89400717 	ldw	r5,28(r17)
 80052e8:	000f883a 	mov	r7,zero
 80052ec:	9809883a 	mov	r4,r19
 80052f0:	403ee83a 	callr	r8
 80052f4:	00ffffc4 	movi	r3,-1
 80052f8:	10c04426 	beq	r2,r3,800540c <__sflush_r+0x1a0>
 80052fc:	88c0030b 	ldhu	r3,12(r17)
 8005300:	89000417 	ldw	r4,16(r17)
 8005304:	88000115 	stw	zero,4(r17)
 8005308:	197dffcc 	andi	r5,r3,63487
 800530c:	8940030d 	sth	r5,12(r17)
 8005310:	89000015 	stw	r4,0(r17)
 8005314:	18c4000c 	andi	r3,r3,4096
 8005318:	18002c1e 	bne	r3,zero,80053cc <__sflush_r+0x160>
 800531c:	89400c17 	ldw	r5,48(r17)
 8005320:	9c000015 	stw	r16,0(r19)
 8005324:	28000526 	beq	r5,zero,800533c <__sflush_r+0xd0>
 8005328:	88801004 	addi	r2,r17,64
 800532c:	28800226 	beq	r5,r2,8005338 <__sflush_r+0xcc>
 8005330:	9809883a 	mov	r4,r19
 8005334:	80059e80 	call	80059e8 <_free_r>
 8005338:	88000c15 	stw	zero,48(r17)
 800533c:	0005883a 	mov	r2,zero
 8005340:	dfc00417 	ldw	ra,16(sp)
 8005344:	dcc00317 	ldw	r19,12(sp)
 8005348:	dc800217 	ldw	r18,8(sp)
 800534c:	dc400117 	ldw	r17,4(sp)
 8005350:	dc000017 	ldw	r16,0(sp)
 8005354:	dec00504 	addi	sp,sp,20
 8005358:	f800283a 	ret
 800535c:	2c800417 	ldw	r18,16(r5)
 8005360:	903ff626 	beq	r18,zero,800533c <__alt_data_end+0xfc00533c>
 8005364:	2c000017 	ldw	r16,0(r5)
 8005368:	108000cc 	andi	r2,r2,3
 800536c:	2c800015 	stw	r18,0(r5)
 8005370:	84a1c83a 	sub	r16,r16,r18
 8005374:	1000131e 	bne	r2,zero,80053c4 <__sflush_r+0x158>
 8005378:	28800517 	ldw	r2,20(r5)
 800537c:	88800215 	stw	r2,8(r17)
 8005380:	04000316 	blt	zero,r16,8005390 <__sflush_r+0x124>
 8005384:	003fed06 	br	800533c <__alt_data_end+0xfc00533c>
 8005388:	90a5883a 	add	r18,r18,r2
 800538c:	043feb0e 	bge	zero,r16,800533c <__alt_data_end+0xfc00533c>
 8005390:	88800917 	ldw	r2,36(r17)
 8005394:	89400717 	ldw	r5,28(r17)
 8005398:	800f883a 	mov	r7,r16
 800539c:	900d883a 	mov	r6,r18
 80053a0:	9809883a 	mov	r4,r19
 80053a4:	103ee83a 	callr	r2
 80053a8:	80a1c83a 	sub	r16,r16,r2
 80053ac:	00bff616 	blt	zero,r2,8005388 <__alt_data_end+0xfc005388>
 80053b0:	88c0030b 	ldhu	r3,12(r17)
 80053b4:	00bfffc4 	movi	r2,-1
 80053b8:	18c01014 	ori	r3,r3,64
 80053bc:	88c0030d 	sth	r3,12(r17)
 80053c0:	003fdf06 	br	8005340 <__alt_data_end+0xfc005340>
 80053c4:	0005883a 	mov	r2,zero
 80053c8:	003fec06 	br	800537c <__alt_data_end+0xfc00537c>
 80053cc:	88801415 	stw	r2,80(r17)
 80053d0:	003fd206 	br	800531c <__alt_data_end+0xfc00531c>
 80053d4:	28c00f17 	ldw	r3,60(r5)
 80053d8:	00ffb316 	blt	zero,r3,80052a8 <__alt_data_end+0xfc0052a8>
 80053dc:	003fd706 	br	800533c <__alt_data_end+0xfc00533c>
 80053e0:	89400717 	ldw	r5,28(r17)
 80053e4:	000d883a 	mov	r6,zero
 80053e8:	01c00044 	movi	r7,1
 80053ec:	9809883a 	mov	r4,r19
 80053f0:	403ee83a 	callr	r8
 80053f4:	100d883a 	mov	r6,r2
 80053f8:	00bfffc4 	movi	r2,-1
 80053fc:	30801426 	beq	r6,r2,8005450 <__sflush_r+0x1e4>
 8005400:	8880030b 	ldhu	r2,12(r17)
 8005404:	8a000a17 	ldw	r8,40(r17)
 8005408:	003fae06 	br	80052c4 <__alt_data_end+0xfc0052c4>
 800540c:	98c00017 	ldw	r3,0(r19)
 8005410:	183fba26 	beq	r3,zero,80052fc <__alt_data_end+0xfc0052fc>
 8005414:	01000744 	movi	r4,29
 8005418:	19000626 	beq	r3,r4,8005434 <__sflush_r+0x1c8>
 800541c:	01000584 	movi	r4,22
 8005420:	19000426 	beq	r3,r4,8005434 <__sflush_r+0x1c8>
 8005424:	88c0030b 	ldhu	r3,12(r17)
 8005428:	18c01014 	ori	r3,r3,64
 800542c:	88c0030d 	sth	r3,12(r17)
 8005430:	003fc306 	br	8005340 <__alt_data_end+0xfc005340>
 8005434:	8880030b 	ldhu	r2,12(r17)
 8005438:	88c00417 	ldw	r3,16(r17)
 800543c:	88000115 	stw	zero,4(r17)
 8005440:	10bdffcc 	andi	r2,r2,63487
 8005444:	8880030d 	sth	r2,12(r17)
 8005448:	88c00015 	stw	r3,0(r17)
 800544c:	003fb306 	br	800531c <__alt_data_end+0xfc00531c>
 8005450:	98800017 	ldw	r2,0(r19)
 8005454:	103fea26 	beq	r2,zero,8005400 <__alt_data_end+0xfc005400>
 8005458:	00c00744 	movi	r3,29
 800545c:	10c00226 	beq	r2,r3,8005468 <__sflush_r+0x1fc>
 8005460:	00c00584 	movi	r3,22
 8005464:	10c0031e 	bne	r2,r3,8005474 <__sflush_r+0x208>
 8005468:	9c000015 	stw	r16,0(r19)
 800546c:	0005883a 	mov	r2,zero
 8005470:	003fb306 	br	8005340 <__alt_data_end+0xfc005340>
 8005474:	88c0030b 	ldhu	r3,12(r17)
 8005478:	3005883a 	mov	r2,r6
 800547c:	18c01014 	ori	r3,r3,64
 8005480:	88c0030d 	sth	r3,12(r17)
 8005484:	003fae06 	br	8005340 <__alt_data_end+0xfc005340>

08005488 <_fflush_r>:
 8005488:	defffd04 	addi	sp,sp,-12
 800548c:	dc000115 	stw	r16,4(sp)
 8005490:	dfc00215 	stw	ra,8(sp)
 8005494:	2021883a 	mov	r16,r4
 8005498:	20000226 	beq	r4,zero,80054a4 <_fflush_r+0x1c>
 800549c:	20800e17 	ldw	r2,56(r4)
 80054a0:	10000c26 	beq	r2,zero,80054d4 <_fflush_r+0x4c>
 80054a4:	2880030f 	ldh	r2,12(r5)
 80054a8:	1000051e 	bne	r2,zero,80054c0 <_fflush_r+0x38>
 80054ac:	0005883a 	mov	r2,zero
 80054b0:	dfc00217 	ldw	ra,8(sp)
 80054b4:	dc000117 	ldw	r16,4(sp)
 80054b8:	dec00304 	addi	sp,sp,12
 80054bc:	f800283a 	ret
 80054c0:	8009883a 	mov	r4,r16
 80054c4:	dfc00217 	ldw	ra,8(sp)
 80054c8:	dc000117 	ldw	r16,4(sp)
 80054cc:	dec00304 	addi	sp,sp,12
 80054d0:	800526c1 	jmpi	800526c <__sflush_r>
 80054d4:	d9400015 	stw	r5,0(sp)
 80054d8:	80058740 	call	8005874 <__sinit>
 80054dc:	d9400017 	ldw	r5,0(sp)
 80054e0:	003ff006 	br	80054a4 <__alt_data_end+0xfc0054a4>

080054e4 <fflush>:
 80054e4:	20000526 	beq	r4,zero,80054fc <fflush+0x18>
 80054e8:	00820074 	movhi	r2,2049
 80054ec:	10896304 	addi	r2,r2,9612
 80054f0:	200b883a 	mov	r5,r4
 80054f4:	11000017 	ldw	r4,0(r2)
 80054f8:	80054881 	jmpi	8005488 <_fflush_r>
 80054fc:	00820074 	movhi	r2,2049
 8005500:	10896204 	addi	r2,r2,9608
 8005504:	11000017 	ldw	r4,0(r2)
 8005508:	01420034 	movhi	r5,2048
 800550c:	29552204 	addi	r5,r5,21640
 8005510:	80062841 	jmpi	8006284 <_fwalk_reent>

08005514 <__fp_unlock>:
 8005514:	0005883a 	mov	r2,zero
 8005518:	f800283a 	ret

0800551c <_cleanup_r>:
 800551c:	01420074 	movhi	r5,2049
 8005520:	29690804 	addi	r5,r5,-23520
 8005524:	80062841 	jmpi	8006284 <_fwalk_reent>

08005528 <__sinit.part.1>:
 8005528:	defff704 	addi	sp,sp,-36
 800552c:	00c20034 	movhi	r3,2048
 8005530:	dfc00815 	stw	ra,32(sp)
 8005534:	ddc00715 	stw	r23,28(sp)
 8005538:	dd800615 	stw	r22,24(sp)
 800553c:	dd400515 	stw	r21,20(sp)
 8005540:	dd000415 	stw	r20,16(sp)
 8005544:	dcc00315 	stw	r19,12(sp)
 8005548:	dc800215 	stw	r18,8(sp)
 800554c:	dc400115 	stw	r17,4(sp)
 8005550:	dc000015 	stw	r16,0(sp)
 8005554:	18d54704 	addi	r3,r3,21788
 8005558:	24000117 	ldw	r16,4(r4)
 800555c:	20c00f15 	stw	r3,60(r4)
 8005560:	2080bb04 	addi	r2,r4,748
 8005564:	00c000c4 	movi	r3,3
 8005568:	20c0b915 	stw	r3,740(r4)
 800556c:	2080ba15 	stw	r2,744(r4)
 8005570:	2000b815 	stw	zero,736(r4)
 8005574:	05c00204 	movi	r23,8
 8005578:	00800104 	movi	r2,4
 800557c:	2025883a 	mov	r18,r4
 8005580:	b80d883a 	mov	r6,r23
 8005584:	81001704 	addi	r4,r16,92
 8005588:	000b883a 	mov	r5,zero
 800558c:	80000015 	stw	zero,0(r16)
 8005590:	80000115 	stw	zero,4(r16)
 8005594:	80000215 	stw	zero,8(r16)
 8005598:	8080030d 	sth	r2,12(r16)
 800559c:	80001915 	stw	zero,100(r16)
 80055a0:	8000038d 	sth	zero,14(r16)
 80055a4:	80000415 	stw	zero,16(r16)
 80055a8:	80000515 	stw	zero,20(r16)
 80055ac:	80000615 	stw	zero,24(r16)
 80055b0:	80071740 	call	8007174 <memset>
 80055b4:	05820074 	movhi	r22,2049
 80055b8:	94400217 	ldw	r17,8(r18)
 80055bc:	05420074 	movhi	r21,2049
 80055c0:	05020074 	movhi	r20,2049
 80055c4:	04c20074 	movhi	r19,2049
 80055c8:	b5a26004 	addi	r22,r22,-30336
 80055cc:	ad627704 	addi	r21,r21,-30244
 80055d0:	a5229604 	addi	r20,r20,-30120
 80055d4:	9ce2ad04 	addi	r19,r19,-30028
 80055d8:	85800815 	stw	r22,32(r16)
 80055dc:	85400915 	stw	r21,36(r16)
 80055e0:	85000a15 	stw	r20,40(r16)
 80055e4:	84c00b15 	stw	r19,44(r16)
 80055e8:	84000715 	stw	r16,28(r16)
 80055ec:	00800284 	movi	r2,10
 80055f0:	8880030d 	sth	r2,12(r17)
 80055f4:	00800044 	movi	r2,1
 80055f8:	b80d883a 	mov	r6,r23
 80055fc:	89001704 	addi	r4,r17,92
 8005600:	000b883a 	mov	r5,zero
 8005604:	88000015 	stw	zero,0(r17)
 8005608:	88000115 	stw	zero,4(r17)
 800560c:	88000215 	stw	zero,8(r17)
 8005610:	88001915 	stw	zero,100(r17)
 8005614:	8880038d 	sth	r2,14(r17)
 8005618:	88000415 	stw	zero,16(r17)
 800561c:	88000515 	stw	zero,20(r17)
 8005620:	88000615 	stw	zero,24(r17)
 8005624:	80071740 	call	8007174 <memset>
 8005628:	94000317 	ldw	r16,12(r18)
 800562c:	00800484 	movi	r2,18
 8005630:	8c400715 	stw	r17,28(r17)
 8005634:	8d800815 	stw	r22,32(r17)
 8005638:	8d400915 	stw	r21,36(r17)
 800563c:	8d000a15 	stw	r20,40(r17)
 8005640:	8cc00b15 	stw	r19,44(r17)
 8005644:	8080030d 	sth	r2,12(r16)
 8005648:	00800084 	movi	r2,2
 800564c:	80000015 	stw	zero,0(r16)
 8005650:	80000115 	stw	zero,4(r16)
 8005654:	80000215 	stw	zero,8(r16)
 8005658:	80001915 	stw	zero,100(r16)
 800565c:	8080038d 	sth	r2,14(r16)
 8005660:	80000415 	stw	zero,16(r16)
 8005664:	80000515 	stw	zero,20(r16)
 8005668:	80000615 	stw	zero,24(r16)
 800566c:	b80d883a 	mov	r6,r23
 8005670:	000b883a 	mov	r5,zero
 8005674:	81001704 	addi	r4,r16,92
 8005678:	80071740 	call	8007174 <memset>
 800567c:	00800044 	movi	r2,1
 8005680:	84000715 	stw	r16,28(r16)
 8005684:	85800815 	stw	r22,32(r16)
 8005688:	85400915 	stw	r21,36(r16)
 800568c:	85000a15 	stw	r20,40(r16)
 8005690:	84c00b15 	stw	r19,44(r16)
 8005694:	90800e15 	stw	r2,56(r18)
 8005698:	dfc00817 	ldw	ra,32(sp)
 800569c:	ddc00717 	ldw	r23,28(sp)
 80056a0:	dd800617 	ldw	r22,24(sp)
 80056a4:	dd400517 	ldw	r21,20(sp)
 80056a8:	dd000417 	ldw	r20,16(sp)
 80056ac:	dcc00317 	ldw	r19,12(sp)
 80056b0:	dc800217 	ldw	r18,8(sp)
 80056b4:	dc400117 	ldw	r17,4(sp)
 80056b8:	dc000017 	ldw	r16,0(sp)
 80056bc:	dec00904 	addi	sp,sp,36
 80056c0:	f800283a 	ret

080056c4 <__fp_lock>:
 80056c4:	0005883a 	mov	r2,zero
 80056c8:	f800283a 	ret

080056cc <__sfmoreglue>:
 80056cc:	defffc04 	addi	sp,sp,-16
 80056d0:	dc800215 	stw	r18,8(sp)
 80056d4:	2825883a 	mov	r18,r5
 80056d8:	dc000015 	stw	r16,0(sp)
 80056dc:	01401a04 	movi	r5,104
 80056e0:	2021883a 	mov	r16,r4
 80056e4:	913fffc4 	addi	r4,r18,-1
 80056e8:	dfc00315 	stw	ra,12(sp)
 80056ec:	dc400115 	stw	r17,4(sp)
 80056f0:	80012b40 	call	80012b4 <__mulsi3>
 80056f4:	8009883a 	mov	r4,r16
 80056f8:	11401d04 	addi	r5,r2,116
 80056fc:	1023883a 	mov	r17,r2
 8005700:	80065e00 	call	80065e0 <_malloc_r>
 8005704:	1021883a 	mov	r16,r2
 8005708:	10000726 	beq	r2,zero,8005728 <__sfmoreglue+0x5c>
 800570c:	11000304 	addi	r4,r2,12
 8005710:	10000015 	stw	zero,0(r2)
 8005714:	14800115 	stw	r18,4(r2)
 8005718:	11000215 	stw	r4,8(r2)
 800571c:	89801a04 	addi	r6,r17,104
 8005720:	000b883a 	mov	r5,zero
 8005724:	80071740 	call	8007174 <memset>
 8005728:	8005883a 	mov	r2,r16
 800572c:	dfc00317 	ldw	ra,12(sp)
 8005730:	dc800217 	ldw	r18,8(sp)
 8005734:	dc400117 	ldw	r17,4(sp)
 8005738:	dc000017 	ldw	r16,0(sp)
 800573c:	dec00404 	addi	sp,sp,16
 8005740:	f800283a 	ret

08005744 <__sfp>:
 8005744:	defffb04 	addi	sp,sp,-20
 8005748:	dc000015 	stw	r16,0(sp)
 800574c:	04020074 	movhi	r16,2049
 8005750:	84096204 	addi	r16,r16,9608
 8005754:	dcc00315 	stw	r19,12(sp)
 8005758:	2027883a 	mov	r19,r4
 800575c:	81000017 	ldw	r4,0(r16)
 8005760:	dfc00415 	stw	ra,16(sp)
 8005764:	dc800215 	stw	r18,8(sp)
 8005768:	20800e17 	ldw	r2,56(r4)
 800576c:	dc400115 	stw	r17,4(sp)
 8005770:	1000021e 	bne	r2,zero,800577c <__sfp+0x38>
 8005774:	80055280 	call	8005528 <__sinit.part.1>
 8005778:	81000017 	ldw	r4,0(r16)
 800577c:	2480b804 	addi	r18,r4,736
 8005780:	047fffc4 	movi	r17,-1
 8005784:	91000117 	ldw	r4,4(r18)
 8005788:	94000217 	ldw	r16,8(r18)
 800578c:	213fffc4 	addi	r4,r4,-1
 8005790:	20000a16 	blt	r4,zero,80057bc <__sfp+0x78>
 8005794:	8080030f 	ldh	r2,12(r16)
 8005798:	10000c26 	beq	r2,zero,80057cc <__sfp+0x88>
 800579c:	80c01d04 	addi	r3,r16,116
 80057a0:	00000206 	br	80057ac <__sfp+0x68>
 80057a4:	18bfe60f 	ldh	r2,-104(r3)
 80057a8:	10000826 	beq	r2,zero,80057cc <__sfp+0x88>
 80057ac:	213fffc4 	addi	r4,r4,-1
 80057b0:	1c3ffd04 	addi	r16,r3,-12
 80057b4:	18c01a04 	addi	r3,r3,104
 80057b8:	247ffa1e 	bne	r4,r17,80057a4 <__alt_data_end+0xfc0057a4>
 80057bc:	90800017 	ldw	r2,0(r18)
 80057c0:	10001d26 	beq	r2,zero,8005838 <__sfp+0xf4>
 80057c4:	1025883a 	mov	r18,r2
 80057c8:	003fee06 	br	8005784 <__alt_data_end+0xfc005784>
 80057cc:	00bfffc4 	movi	r2,-1
 80057d0:	8080038d 	sth	r2,14(r16)
 80057d4:	00800044 	movi	r2,1
 80057d8:	8080030d 	sth	r2,12(r16)
 80057dc:	80001915 	stw	zero,100(r16)
 80057e0:	80000015 	stw	zero,0(r16)
 80057e4:	80000215 	stw	zero,8(r16)
 80057e8:	80000115 	stw	zero,4(r16)
 80057ec:	80000415 	stw	zero,16(r16)
 80057f0:	80000515 	stw	zero,20(r16)
 80057f4:	80000615 	stw	zero,24(r16)
 80057f8:	01800204 	movi	r6,8
 80057fc:	000b883a 	mov	r5,zero
 8005800:	81001704 	addi	r4,r16,92
 8005804:	80071740 	call	8007174 <memset>
 8005808:	8005883a 	mov	r2,r16
 800580c:	80000c15 	stw	zero,48(r16)
 8005810:	80000d15 	stw	zero,52(r16)
 8005814:	80001115 	stw	zero,68(r16)
 8005818:	80001215 	stw	zero,72(r16)
 800581c:	dfc00417 	ldw	ra,16(sp)
 8005820:	dcc00317 	ldw	r19,12(sp)
 8005824:	dc800217 	ldw	r18,8(sp)
 8005828:	dc400117 	ldw	r17,4(sp)
 800582c:	dc000017 	ldw	r16,0(sp)
 8005830:	dec00504 	addi	sp,sp,20
 8005834:	f800283a 	ret
 8005838:	01400104 	movi	r5,4
 800583c:	9809883a 	mov	r4,r19
 8005840:	80056cc0 	call	80056cc <__sfmoreglue>
 8005844:	90800015 	stw	r2,0(r18)
 8005848:	103fde1e 	bne	r2,zero,80057c4 <__alt_data_end+0xfc0057c4>
 800584c:	00800304 	movi	r2,12
 8005850:	98800015 	stw	r2,0(r19)
 8005854:	0005883a 	mov	r2,zero
 8005858:	003ff006 	br	800581c <__alt_data_end+0xfc00581c>

0800585c <_cleanup>:
 800585c:	00820074 	movhi	r2,2049
 8005860:	10896204 	addi	r2,r2,9608
 8005864:	11000017 	ldw	r4,0(r2)
 8005868:	01420074 	movhi	r5,2049
 800586c:	29690804 	addi	r5,r5,-23520
 8005870:	80062841 	jmpi	8006284 <_fwalk_reent>

08005874 <__sinit>:
 8005874:	20800e17 	ldw	r2,56(r4)
 8005878:	10000126 	beq	r2,zero,8005880 <__sinit+0xc>
 800587c:	f800283a 	ret
 8005880:	80055281 	jmpi	8005528 <__sinit.part.1>

08005884 <__sfp_lock_acquire>:
 8005884:	f800283a 	ret

08005888 <__sfp_lock_release>:
 8005888:	f800283a 	ret

0800588c <__sinit_lock_acquire>:
 800588c:	f800283a 	ret

08005890 <__sinit_lock_release>:
 8005890:	f800283a 	ret

08005894 <__fp_lock_all>:
 8005894:	00820074 	movhi	r2,2049
 8005898:	10896304 	addi	r2,r2,9612
 800589c:	11000017 	ldw	r4,0(r2)
 80058a0:	01420034 	movhi	r5,2048
 80058a4:	2955b104 	addi	r5,r5,22212
 80058a8:	80061c01 	jmpi	80061c0 <_fwalk>

080058ac <__fp_unlock_all>:
 80058ac:	00820074 	movhi	r2,2049
 80058b0:	10896304 	addi	r2,r2,9612
 80058b4:	11000017 	ldw	r4,0(r2)
 80058b8:	01420034 	movhi	r5,2048
 80058bc:	29554504 	addi	r5,r5,21780
 80058c0:	80061c01 	jmpi	80061c0 <_fwalk>

080058c4 <_malloc_trim_r>:
 80058c4:	defffb04 	addi	sp,sp,-20
 80058c8:	dcc00315 	stw	r19,12(sp)
 80058cc:	04c20074 	movhi	r19,2049
 80058d0:	dc800215 	stw	r18,8(sp)
 80058d4:	dc400115 	stw	r17,4(sp)
 80058d8:	dc000015 	stw	r16,0(sp)
 80058dc:	dfc00415 	stw	ra,16(sp)
 80058e0:	2821883a 	mov	r16,r5
 80058e4:	9cc7e804 	addi	r19,r19,8096
 80058e8:	2025883a 	mov	r18,r4
 80058ec:	800e7100 	call	800e710 <__malloc_lock>
 80058f0:	98800217 	ldw	r2,8(r19)
 80058f4:	14400117 	ldw	r17,4(r2)
 80058f8:	00bfff04 	movi	r2,-4
 80058fc:	88a2703a 	and	r17,r17,r2
 8005900:	8c21c83a 	sub	r16,r17,r16
 8005904:	8403fbc4 	addi	r16,r16,4079
 8005908:	8020d33a 	srli	r16,r16,12
 800590c:	0083ffc4 	movi	r2,4095
 8005910:	843fffc4 	addi	r16,r16,-1
 8005914:	8020933a 	slli	r16,r16,12
 8005918:	1400060e 	bge	r2,r16,8005934 <_malloc_trim_r+0x70>
 800591c:	000b883a 	mov	r5,zero
 8005920:	9009883a 	mov	r4,r18
 8005924:	800892c0 	call	800892c <_sbrk_r>
 8005928:	98c00217 	ldw	r3,8(r19)
 800592c:	1c47883a 	add	r3,r3,r17
 8005930:	10c00a26 	beq	r2,r3,800595c <_malloc_trim_r+0x98>
 8005934:	9009883a 	mov	r4,r18
 8005938:	800e7340 	call	800e734 <__malloc_unlock>
 800593c:	0005883a 	mov	r2,zero
 8005940:	dfc00417 	ldw	ra,16(sp)
 8005944:	dcc00317 	ldw	r19,12(sp)
 8005948:	dc800217 	ldw	r18,8(sp)
 800594c:	dc400117 	ldw	r17,4(sp)
 8005950:	dc000017 	ldw	r16,0(sp)
 8005954:	dec00504 	addi	sp,sp,20
 8005958:	f800283a 	ret
 800595c:	040bc83a 	sub	r5,zero,r16
 8005960:	9009883a 	mov	r4,r18
 8005964:	800892c0 	call	800892c <_sbrk_r>
 8005968:	00ffffc4 	movi	r3,-1
 800596c:	10c00d26 	beq	r2,r3,80059a4 <_malloc_trim_r+0xe0>
 8005970:	00c20074 	movhi	r3,2049
 8005974:	18cc2f04 	addi	r3,r3,12476
 8005978:	18800017 	ldw	r2,0(r3)
 800597c:	99000217 	ldw	r4,8(r19)
 8005980:	8c23c83a 	sub	r17,r17,r16
 8005984:	8c400054 	ori	r17,r17,1
 8005988:	1421c83a 	sub	r16,r2,r16
 800598c:	24400115 	stw	r17,4(r4)
 8005990:	9009883a 	mov	r4,r18
 8005994:	1c000015 	stw	r16,0(r3)
 8005998:	800e7340 	call	800e734 <__malloc_unlock>
 800599c:	00800044 	movi	r2,1
 80059a0:	003fe706 	br	8005940 <__alt_data_end+0xfc005940>
 80059a4:	000b883a 	mov	r5,zero
 80059a8:	9009883a 	mov	r4,r18
 80059ac:	800892c0 	call	800892c <_sbrk_r>
 80059b0:	99000217 	ldw	r4,8(r19)
 80059b4:	014003c4 	movi	r5,15
 80059b8:	1107c83a 	sub	r3,r2,r4
 80059bc:	28ffdd0e 	bge	r5,r3,8005934 <__alt_data_end+0xfc005934>
 80059c0:	01420074 	movhi	r5,2049
 80059c4:	29496504 	addi	r5,r5,9620
 80059c8:	29400017 	ldw	r5,0(r5)
 80059cc:	18c00054 	ori	r3,r3,1
 80059d0:	20c00115 	stw	r3,4(r4)
 80059d4:	00c20074 	movhi	r3,2049
 80059d8:	1145c83a 	sub	r2,r2,r5
 80059dc:	18cc2f04 	addi	r3,r3,12476
 80059e0:	18800015 	stw	r2,0(r3)
 80059e4:	003fd306 	br	8005934 <__alt_data_end+0xfc005934>

080059e8 <_free_r>:
 80059e8:	28004126 	beq	r5,zero,8005af0 <_free_r+0x108>
 80059ec:	defffd04 	addi	sp,sp,-12
 80059f0:	dc400115 	stw	r17,4(sp)
 80059f4:	dc000015 	stw	r16,0(sp)
 80059f8:	2023883a 	mov	r17,r4
 80059fc:	2821883a 	mov	r16,r5
 8005a00:	dfc00215 	stw	ra,8(sp)
 8005a04:	800e7100 	call	800e710 <__malloc_lock>
 8005a08:	81ffff17 	ldw	r7,-4(r16)
 8005a0c:	00bfff84 	movi	r2,-2
 8005a10:	01020074 	movhi	r4,2049
 8005a14:	81bffe04 	addi	r6,r16,-8
 8005a18:	3884703a 	and	r2,r7,r2
 8005a1c:	2107e804 	addi	r4,r4,8096
 8005a20:	308b883a 	add	r5,r6,r2
 8005a24:	2a400117 	ldw	r9,4(r5)
 8005a28:	22000217 	ldw	r8,8(r4)
 8005a2c:	00ffff04 	movi	r3,-4
 8005a30:	48c6703a 	and	r3,r9,r3
 8005a34:	2a005726 	beq	r5,r8,8005b94 <_free_r+0x1ac>
 8005a38:	28c00115 	stw	r3,4(r5)
 8005a3c:	39c0004c 	andi	r7,r7,1
 8005a40:	3800091e 	bne	r7,zero,8005a68 <_free_r+0x80>
 8005a44:	823ffe17 	ldw	r8,-8(r16)
 8005a48:	22400204 	addi	r9,r4,8
 8005a4c:	320dc83a 	sub	r6,r6,r8
 8005a50:	31c00217 	ldw	r7,8(r6)
 8005a54:	1205883a 	add	r2,r2,r8
 8005a58:	3a406526 	beq	r7,r9,8005bf0 <_free_r+0x208>
 8005a5c:	32000317 	ldw	r8,12(r6)
 8005a60:	3a000315 	stw	r8,12(r7)
 8005a64:	41c00215 	stw	r7,8(r8)
 8005a68:	28cf883a 	add	r7,r5,r3
 8005a6c:	39c00117 	ldw	r7,4(r7)
 8005a70:	39c0004c 	andi	r7,r7,1
 8005a74:	38003a26 	beq	r7,zero,8005b60 <_free_r+0x178>
 8005a78:	10c00054 	ori	r3,r2,1
 8005a7c:	30c00115 	stw	r3,4(r6)
 8005a80:	3087883a 	add	r3,r6,r2
 8005a84:	18800015 	stw	r2,0(r3)
 8005a88:	00c07fc4 	movi	r3,511
 8005a8c:	18801936 	bltu	r3,r2,8005af4 <_free_r+0x10c>
 8005a90:	1004d0fa 	srli	r2,r2,3
 8005a94:	01c00044 	movi	r7,1
 8005a98:	21400117 	ldw	r5,4(r4)
 8005a9c:	10c00044 	addi	r3,r2,1
 8005aa0:	18c7883a 	add	r3,r3,r3
 8005aa4:	1005d0ba 	srai	r2,r2,2
 8005aa8:	18c7883a 	add	r3,r3,r3
 8005aac:	18c7883a 	add	r3,r3,r3
 8005ab0:	1907883a 	add	r3,r3,r4
 8005ab4:	3884983a 	sll	r2,r7,r2
 8005ab8:	19c00017 	ldw	r7,0(r3)
 8005abc:	1a3ffe04 	addi	r8,r3,-8
 8005ac0:	1144b03a 	or	r2,r2,r5
 8005ac4:	32000315 	stw	r8,12(r6)
 8005ac8:	31c00215 	stw	r7,8(r6)
 8005acc:	20800115 	stw	r2,4(r4)
 8005ad0:	19800015 	stw	r6,0(r3)
 8005ad4:	39800315 	stw	r6,12(r7)
 8005ad8:	8809883a 	mov	r4,r17
 8005adc:	dfc00217 	ldw	ra,8(sp)
 8005ae0:	dc400117 	ldw	r17,4(sp)
 8005ae4:	dc000017 	ldw	r16,0(sp)
 8005ae8:	dec00304 	addi	sp,sp,12
 8005aec:	800e7341 	jmpi	800e734 <__malloc_unlock>
 8005af0:	f800283a 	ret
 8005af4:	100ad27a 	srli	r5,r2,9
 8005af8:	00c00104 	movi	r3,4
 8005afc:	19404a36 	bltu	r3,r5,8005c28 <_free_r+0x240>
 8005b00:	100ad1ba 	srli	r5,r2,6
 8005b04:	28c00e44 	addi	r3,r5,57
 8005b08:	18c7883a 	add	r3,r3,r3
 8005b0c:	29400e04 	addi	r5,r5,56
 8005b10:	18c7883a 	add	r3,r3,r3
 8005b14:	18c7883a 	add	r3,r3,r3
 8005b18:	1909883a 	add	r4,r3,r4
 8005b1c:	20c00017 	ldw	r3,0(r4)
 8005b20:	01c20074 	movhi	r7,2049
 8005b24:	213ffe04 	addi	r4,r4,-8
 8005b28:	39c7e804 	addi	r7,r7,8096
 8005b2c:	20c04426 	beq	r4,r3,8005c40 <_free_r+0x258>
 8005b30:	01ffff04 	movi	r7,-4
 8005b34:	19400117 	ldw	r5,4(r3)
 8005b38:	29ca703a 	and	r5,r5,r7
 8005b3c:	1140022e 	bgeu	r2,r5,8005b48 <_free_r+0x160>
 8005b40:	18c00217 	ldw	r3,8(r3)
 8005b44:	20fffb1e 	bne	r4,r3,8005b34 <__alt_data_end+0xfc005b34>
 8005b48:	19000317 	ldw	r4,12(r3)
 8005b4c:	31000315 	stw	r4,12(r6)
 8005b50:	30c00215 	stw	r3,8(r6)
 8005b54:	21800215 	stw	r6,8(r4)
 8005b58:	19800315 	stw	r6,12(r3)
 8005b5c:	003fde06 	br	8005ad8 <__alt_data_end+0xfc005ad8>
 8005b60:	29c00217 	ldw	r7,8(r5)
 8005b64:	10c5883a 	add	r2,r2,r3
 8005b68:	00c20074 	movhi	r3,2049
 8005b6c:	18c7ea04 	addi	r3,r3,8104
 8005b70:	38c03b26 	beq	r7,r3,8005c60 <_free_r+0x278>
 8005b74:	2a000317 	ldw	r8,12(r5)
 8005b78:	11400054 	ori	r5,r2,1
 8005b7c:	3087883a 	add	r3,r6,r2
 8005b80:	3a000315 	stw	r8,12(r7)
 8005b84:	41c00215 	stw	r7,8(r8)
 8005b88:	31400115 	stw	r5,4(r6)
 8005b8c:	18800015 	stw	r2,0(r3)
 8005b90:	003fbd06 	br	8005a88 <__alt_data_end+0xfc005a88>
 8005b94:	39c0004c 	andi	r7,r7,1
 8005b98:	10c5883a 	add	r2,r2,r3
 8005b9c:	3800071e 	bne	r7,zero,8005bbc <_free_r+0x1d4>
 8005ba0:	81fffe17 	ldw	r7,-8(r16)
 8005ba4:	31cdc83a 	sub	r6,r6,r7
 8005ba8:	30c00317 	ldw	r3,12(r6)
 8005bac:	31400217 	ldw	r5,8(r6)
 8005bb0:	11c5883a 	add	r2,r2,r7
 8005bb4:	28c00315 	stw	r3,12(r5)
 8005bb8:	19400215 	stw	r5,8(r3)
 8005bbc:	10c00054 	ori	r3,r2,1
 8005bc0:	30c00115 	stw	r3,4(r6)
 8005bc4:	00c20074 	movhi	r3,2049
 8005bc8:	18c96604 	addi	r3,r3,9624
 8005bcc:	18c00017 	ldw	r3,0(r3)
 8005bd0:	21800215 	stw	r6,8(r4)
 8005bd4:	10ffc036 	bltu	r2,r3,8005ad8 <__alt_data_end+0xfc005ad8>
 8005bd8:	00820074 	movhi	r2,2049
 8005bdc:	108c2804 	addi	r2,r2,12448
 8005be0:	11400017 	ldw	r5,0(r2)
 8005be4:	8809883a 	mov	r4,r17
 8005be8:	80058c40 	call	80058c4 <_malloc_trim_r>
 8005bec:	003fba06 	br	8005ad8 <__alt_data_end+0xfc005ad8>
 8005bf0:	28c9883a 	add	r4,r5,r3
 8005bf4:	21000117 	ldw	r4,4(r4)
 8005bf8:	2100004c 	andi	r4,r4,1
 8005bfc:	2000391e 	bne	r4,zero,8005ce4 <_free_r+0x2fc>
 8005c00:	29c00217 	ldw	r7,8(r5)
 8005c04:	29000317 	ldw	r4,12(r5)
 8005c08:	1885883a 	add	r2,r3,r2
 8005c0c:	10c00054 	ori	r3,r2,1
 8005c10:	39000315 	stw	r4,12(r7)
 8005c14:	21c00215 	stw	r7,8(r4)
 8005c18:	30c00115 	stw	r3,4(r6)
 8005c1c:	308d883a 	add	r6,r6,r2
 8005c20:	30800015 	stw	r2,0(r6)
 8005c24:	003fac06 	br	8005ad8 <__alt_data_end+0xfc005ad8>
 8005c28:	00c00504 	movi	r3,20
 8005c2c:	19401536 	bltu	r3,r5,8005c84 <_free_r+0x29c>
 8005c30:	28c01704 	addi	r3,r5,92
 8005c34:	18c7883a 	add	r3,r3,r3
 8005c38:	294016c4 	addi	r5,r5,91
 8005c3c:	003fb406 	br	8005b10 <__alt_data_end+0xfc005b10>
 8005c40:	280bd0ba 	srai	r5,r5,2
 8005c44:	00c00044 	movi	r3,1
 8005c48:	38800117 	ldw	r2,4(r7)
 8005c4c:	194a983a 	sll	r5,r3,r5
 8005c50:	2007883a 	mov	r3,r4
 8005c54:	2884b03a 	or	r2,r5,r2
 8005c58:	38800115 	stw	r2,4(r7)
 8005c5c:	003fbb06 	br	8005b4c <__alt_data_end+0xfc005b4c>
 8005c60:	21800515 	stw	r6,20(r4)
 8005c64:	21800415 	stw	r6,16(r4)
 8005c68:	10c00054 	ori	r3,r2,1
 8005c6c:	31c00315 	stw	r7,12(r6)
 8005c70:	31c00215 	stw	r7,8(r6)
 8005c74:	30c00115 	stw	r3,4(r6)
 8005c78:	308d883a 	add	r6,r6,r2
 8005c7c:	30800015 	stw	r2,0(r6)
 8005c80:	003f9506 	br	8005ad8 <__alt_data_end+0xfc005ad8>
 8005c84:	00c01504 	movi	r3,84
 8005c88:	19400536 	bltu	r3,r5,8005ca0 <_free_r+0x2b8>
 8005c8c:	100ad33a 	srli	r5,r2,12
 8005c90:	28c01bc4 	addi	r3,r5,111
 8005c94:	18c7883a 	add	r3,r3,r3
 8005c98:	29401b84 	addi	r5,r5,110
 8005c9c:	003f9c06 	br	8005b10 <__alt_data_end+0xfc005b10>
 8005ca0:	00c05504 	movi	r3,340
 8005ca4:	19400536 	bltu	r3,r5,8005cbc <_free_r+0x2d4>
 8005ca8:	100ad3fa 	srli	r5,r2,15
 8005cac:	28c01e04 	addi	r3,r5,120
 8005cb0:	18c7883a 	add	r3,r3,r3
 8005cb4:	29401dc4 	addi	r5,r5,119
 8005cb8:	003f9506 	br	8005b10 <__alt_data_end+0xfc005b10>
 8005cbc:	00c15504 	movi	r3,1364
 8005cc0:	19400536 	bltu	r3,r5,8005cd8 <_free_r+0x2f0>
 8005cc4:	100ad4ba 	srli	r5,r2,18
 8005cc8:	28c01f44 	addi	r3,r5,125
 8005ccc:	18c7883a 	add	r3,r3,r3
 8005cd0:	29401f04 	addi	r5,r5,124
 8005cd4:	003f8e06 	br	8005b10 <__alt_data_end+0xfc005b10>
 8005cd8:	00c03f84 	movi	r3,254
 8005cdc:	01401f84 	movi	r5,126
 8005ce0:	003f8b06 	br	8005b10 <__alt_data_end+0xfc005b10>
 8005ce4:	10c00054 	ori	r3,r2,1
 8005ce8:	30c00115 	stw	r3,4(r6)
 8005cec:	308d883a 	add	r6,r6,r2
 8005cf0:	30800015 	stw	r2,0(r6)
 8005cf4:	003f7806 	br	8005ad8 <__alt_data_end+0xfc005ad8>

08005cf8 <__sfvwrite_r>:
 8005cf8:	30800217 	ldw	r2,8(r6)
 8005cfc:	10006726 	beq	r2,zero,8005e9c <__sfvwrite_r+0x1a4>
 8005d00:	28c0030b 	ldhu	r3,12(r5)
 8005d04:	defff404 	addi	sp,sp,-48
 8005d08:	dd400715 	stw	r21,28(sp)
 8005d0c:	dd000615 	stw	r20,24(sp)
 8005d10:	dc000215 	stw	r16,8(sp)
 8005d14:	dfc00b15 	stw	ra,44(sp)
 8005d18:	df000a15 	stw	fp,40(sp)
 8005d1c:	ddc00915 	stw	r23,36(sp)
 8005d20:	dd800815 	stw	r22,32(sp)
 8005d24:	dcc00515 	stw	r19,20(sp)
 8005d28:	dc800415 	stw	r18,16(sp)
 8005d2c:	dc400315 	stw	r17,12(sp)
 8005d30:	1880020c 	andi	r2,r3,8
 8005d34:	2821883a 	mov	r16,r5
 8005d38:	202b883a 	mov	r21,r4
 8005d3c:	3029883a 	mov	r20,r6
 8005d40:	10002726 	beq	r2,zero,8005de0 <__sfvwrite_r+0xe8>
 8005d44:	28800417 	ldw	r2,16(r5)
 8005d48:	10002526 	beq	r2,zero,8005de0 <__sfvwrite_r+0xe8>
 8005d4c:	1880008c 	andi	r2,r3,2
 8005d50:	a4400017 	ldw	r17,0(r20)
 8005d54:	10002a26 	beq	r2,zero,8005e00 <__sfvwrite_r+0x108>
 8005d58:	05a00034 	movhi	r22,32768
 8005d5c:	0027883a 	mov	r19,zero
 8005d60:	0025883a 	mov	r18,zero
 8005d64:	b5bf0004 	addi	r22,r22,-1024
 8005d68:	980d883a 	mov	r6,r19
 8005d6c:	a809883a 	mov	r4,r21
 8005d70:	90004626 	beq	r18,zero,8005e8c <__sfvwrite_r+0x194>
 8005d74:	900f883a 	mov	r7,r18
 8005d78:	b480022e 	bgeu	r22,r18,8005d84 <__sfvwrite_r+0x8c>
 8005d7c:	01e00034 	movhi	r7,32768
 8005d80:	39ff0004 	addi	r7,r7,-1024
 8005d84:	80800917 	ldw	r2,36(r16)
 8005d88:	81400717 	ldw	r5,28(r16)
 8005d8c:	103ee83a 	callr	r2
 8005d90:	00805a0e 	bge	zero,r2,8005efc <__sfvwrite_r+0x204>
 8005d94:	a0c00217 	ldw	r3,8(r20)
 8005d98:	98a7883a 	add	r19,r19,r2
 8005d9c:	90a5c83a 	sub	r18,r18,r2
 8005da0:	1885c83a 	sub	r2,r3,r2
 8005da4:	a0800215 	stw	r2,8(r20)
 8005da8:	103fef1e 	bne	r2,zero,8005d68 <__alt_data_end+0xfc005d68>
 8005dac:	0005883a 	mov	r2,zero
 8005db0:	dfc00b17 	ldw	ra,44(sp)
 8005db4:	df000a17 	ldw	fp,40(sp)
 8005db8:	ddc00917 	ldw	r23,36(sp)
 8005dbc:	dd800817 	ldw	r22,32(sp)
 8005dc0:	dd400717 	ldw	r21,28(sp)
 8005dc4:	dd000617 	ldw	r20,24(sp)
 8005dc8:	dcc00517 	ldw	r19,20(sp)
 8005dcc:	dc800417 	ldw	r18,16(sp)
 8005dd0:	dc400317 	ldw	r17,12(sp)
 8005dd4:	dc000217 	ldw	r16,8(sp)
 8005dd8:	dec00c04 	addi	sp,sp,48
 8005ddc:	f800283a 	ret
 8005de0:	800b883a 	mov	r5,r16
 8005de4:	a809883a 	mov	r4,r21
 8005de8:	80038680 	call	8003868 <__swsetup_r>
 8005dec:	1000ee1e 	bne	r2,zero,80061a8 <__sfvwrite_r+0x4b0>
 8005df0:	80c0030b 	ldhu	r3,12(r16)
 8005df4:	a4400017 	ldw	r17,0(r20)
 8005df8:	1880008c 	andi	r2,r3,2
 8005dfc:	103fd61e 	bne	r2,zero,8005d58 <__alt_data_end+0xfc005d58>
 8005e00:	1880004c 	andi	r2,r3,1
 8005e04:	1000421e 	bne	r2,zero,8005f10 <__sfvwrite_r+0x218>
 8005e08:	0039883a 	mov	fp,zero
 8005e0c:	0025883a 	mov	r18,zero
 8005e10:	90001a26 	beq	r18,zero,8005e7c <__sfvwrite_r+0x184>
 8005e14:	1880800c 	andi	r2,r3,512
 8005e18:	84c00217 	ldw	r19,8(r16)
 8005e1c:	10002126 	beq	r2,zero,8005ea4 <__sfvwrite_r+0x1ac>
 8005e20:	982f883a 	mov	r23,r19
 8005e24:	94c09636 	bltu	r18,r19,8006080 <__sfvwrite_r+0x388>
 8005e28:	1881200c 	andi	r2,r3,1152
 8005e2c:	1000a11e 	bne	r2,zero,80060b4 <__sfvwrite_r+0x3bc>
 8005e30:	81000017 	ldw	r4,0(r16)
 8005e34:	b80d883a 	mov	r6,r23
 8005e38:	e00b883a 	mov	r5,fp
 8005e3c:	80070180 	call	8007018 <memmove>
 8005e40:	80c00217 	ldw	r3,8(r16)
 8005e44:	81000017 	ldw	r4,0(r16)
 8005e48:	9005883a 	mov	r2,r18
 8005e4c:	1ce7c83a 	sub	r19,r3,r19
 8005e50:	25cf883a 	add	r7,r4,r23
 8005e54:	84c00215 	stw	r19,8(r16)
 8005e58:	81c00015 	stw	r7,0(r16)
 8005e5c:	a0c00217 	ldw	r3,8(r20)
 8005e60:	e0b9883a 	add	fp,fp,r2
 8005e64:	90a5c83a 	sub	r18,r18,r2
 8005e68:	18a7c83a 	sub	r19,r3,r2
 8005e6c:	a4c00215 	stw	r19,8(r20)
 8005e70:	983fce26 	beq	r19,zero,8005dac <__alt_data_end+0xfc005dac>
 8005e74:	80c0030b 	ldhu	r3,12(r16)
 8005e78:	903fe61e 	bne	r18,zero,8005e14 <__alt_data_end+0xfc005e14>
 8005e7c:	8f000017 	ldw	fp,0(r17)
 8005e80:	8c800117 	ldw	r18,4(r17)
 8005e84:	8c400204 	addi	r17,r17,8
 8005e88:	003fe106 	br	8005e10 <__alt_data_end+0xfc005e10>
 8005e8c:	8cc00017 	ldw	r19,0(r17)
 8005e90:	8c800117 	ldw	r18,4(r17)
 8005e94:	8c400204 	addi	r17,r17,8
 8005e98:	003fb306 	br	8005d68 <__alt_data_end+0xfc005d68>
 8005e9c:	0005883a 	mov	r2,zero
 8005ea0:	f800283a 	ret
 8005ea4:	81000017 	ldw	r4,0(r16)
 8005ea8:	80800417 	ldw	r2,16(r16)
 8005eac:	11005a36 	bltu	r2,r4,8006018 <__sfvwrite_r+0x320>
 8005eb0:	85c00517 	ldw	r23,20(r16)
 8005eb4:	95c05836 	bltu	r18,r23,8006018 <__sfvwrite_r+0x320>
 8005eb8:	00a00034 	movhi	r2,32768
 8005ebc:	10bfffc4 	addi	r2,r2,-1
 8005ec0:	9009883a 	mov	r4,r18
 8005ec4:	1480012e 	bgeu	r2,r18,8005ecc <__sfvwrite_r+0x1d4>
 8005ec8:	1009883a 	mov	r4,r2
 8005ecc:	b80b883a 	mov	r5,r23
 8005ed0:	800b79c0 	call	800b79c <__divsi3>
 8005ed4:	b80b883a 	mov	r5,r23
 8005ed8:	1009883a 	mov	r4,r2
 8005edc:	80012b40 	call	80012b4 <__mulsi3>
 8005ee0:	81400717 	ldw	r5,28(r16)
 8005ee4:	80c00917 	ldw	r3,36(r16)
 8005ee8:	100f883a 	mov	r7,r2
 8005eec:	e00d883a 	mov	r6,fp
 8005ef0:	a809883a 	mov	r4,r21
 8005ef4:	183ee83a 	callr	r3
 8005ef8:	00bfd816 	blt	zero,r2,8005e5c <__alt_data_end+0xfc005e5c>
 8005efc:	8080030b 	ldhu	r2,12(r16)
 8005f00:	10801014 	ori	r2,r2,64
 8005f04:	8080030d 	sth	r2,12(r16)
 8005f08:	00bfffc4 	movi	r2,-1
 8005f0c:	003fa806 	br	8005db0 <__alt_data_end+0xfc005db0>
 8005f10:	0027883a 	mov	r19,zero
 8005f14:	0011883a 	mov	r8,zero
 8005f18:	0039883a 	mov	fp,zero
 8005f1c:	0025883a 	mov	r18,zero
 8005f20:	90001f26 	beq	r18,zero,8005fa0 <__sfvwrite_r+0x2a8>
 8005f24:	40005a26 	beq	r8,zero,8006090 <__sfvwrite_r+0x398>
 8005f28:	982d883a 	mov	r22,r19
 8005f2c:	94c0012e 	bgeu	r18,r19,8005f34 <__sfvwrite_r+0x23c>
 8005f30:	902d883a 	mov	r22,r18
 8005f34:	81000017 	ldw	r4,0(r16)
 8005f38:	80800417 	ldw	r2,16(r16)
 8005f3c:	b02f883a 	mov	r23,r22
 8005f40:	81c00517 	ldw	r7,20(r16)
 8005f44:	1100032e 	bgeu	r2,r4,8005f54 <__sfvwrite_r+0x25c>
 8005f48:	80c00217 	ldw	r3,8(r16)
 8005f4c:	38c7883a 	add	r3,r7,r3
 8005f50:	1d801816 	blt	r3,r22,8005fb4 <__sfvwrite_r+0x2bc>
 8005f54:	b1c03e16 	blt	r22,r7,8006050 <__sfvwrite_r+0x358>
 8005f58:	80800917 	ldw	r2,36(r16)
 8005f5c:	81400717 	ldw	r5,28(r16)
 8005f60:	e00d883a 	mov	r6,fp
 8005f64:	da000115 	stw	r8,4(sp)
 8005f68:	a809883a 	mov	r4,r21
 8005f6c:	103ee83a 	callr	r2
 8005f70:	102f883a 	mov	r23,r2
 8005f74:	da000117 	ldw	r8,4(sp)
 8005f78:	00bfe00e 	bge	zero,r2,8005efc <__alt_data_end+0xfc005efc>
 8005f7c:	9de7c83a 	sub	r19,r19,r23
 8005f80:	98001f26 	beq	r19,zero,8006000 <__sfvwrite_r+0x308>
 8005f84:	a0800217 	ldw	r2,8(r20)
 8005f88:	e5f9883a 	add	fp,fp,r23
 8005f8c:	95e5c83a 	sub	r18,r18,r23
 8005f90:	15efc83a 	sub	r23,r2,r23
 8005f94:	a5c00215 	stw	r23,8(r20)
 8005f98:	b83f8426 	beq	r23,zero,8005dac <__alt_data_end+0xfc005dac>
 8005f9c:	903fe11e 	bne	r18,zero,8005f24 <__alt_data_end+0xfc005f24>
 8005fa0:	8f000017 	ldw	fp,0(r17)
 8005fa4:	8c800117 	ldw	r18,4(r17)
 8005fa8:	0011883a 	mov	r8,zero
 8005fac:	8c400204 	addi	r17,r17,8
 8005fb0:	003fdb06 	br	8005f20 <__alt_data_end+0xfc005f20>
 8005fb4:	180d883a 	mov	r6,r3
 8005fb8:	e00b883a 	mov	r5,fp
 8005fbc:	da000115 	stw	r8,4(sp)
 8005fc0:	d8c00015 	stw	r3,0(sp)
 8005fc4:	80070180 	call	8007018 <memmove>
 8005fc8:	d8c00017 	ldw	r3,0(sp)
 8005fcc:	80800017 	ldw	r2,0(r16)
 8005fd0:	800b883a 	mov	r5,r16
 8005fd4:	a809883a 	mov	r4,r21
 8005fd8:	10c5883a 	add	r2,r2,r3
 8005fdc:	80800015 	stw	r2,0(r16)
 8005fe0:	d8c00015 	stw	r3,0(sp)
 8005fe4:	80054880 	call	8005488 <_fflush_r>
 8005fe8:	d8c00017 	ldw	r3,0(sp)
 8005fec:	da000117 	ldw	r8,4(sp)
 8005ff0:	103fc21e 	bne	r2,zero,8005efc <__alt_data_end+0xfc005efc>
 8005ff4:	182f883a 	mov	r23,r3
 8005ff8:	9de7c83a 	sub	r19,r19,r23
 8005ffc:	983fe11e 	bne	r19,zero,8005f84 <__alt_data_end+0xfc005f84>
 8006000:	800b883a 	mov	r5,r16
 8006004:	a809883a 	mov	r4,r21
 8006008:	80054880 	call	8005488 <_fflush_r>
 800600c:	103fbb1e 	bne	r2,zero,8005efc <__alt_data_end+0xfc005efc>
 8006010:	0011883a 	mov	r8,zero
 8006014:	003fdb06 	br	8005f84 <__alt_data_end+0xfc005f84>
 8006018:	94c0012e 	bgeu	r18,r19,8006020 <__sfvwrite_r+0x328>
 800601c:	9027883a 	mov	r19,r18
 8006020:	980d883a 	mov	r6,r19
 8006024:	e00b883a 	mov	r5,fp
 8006028:	80070180 	call	8007018 <memmove>
 800602c:	80800217 	ldw	r2,8(r16)
 8006030:	80c00017 	ldw	r3,0(r16)
 8006034:	14c5c83a 	sub	r2,r2,r19
 8006038:	1cc7883a 	add	r3,r3,r19
 800603c:	80800215 	stw	r2,8(r16)
 8006040:	80c00015 	stw	r3,0(r16)
 8006044:	10004326 	beq	r2,zero,8006154 <__sfvwrite_r+0x45c>
 8006048:	9805883a 	mov	r2,r19
 800604c:	003f8306 	br	8005e5c <__alt_data_end+0xfc005e5c>
 8006050:	b00d883a 	mov	r6,r22
 8006054:	e00b883a 	mov	r5,fp
 8006058:	da000115 	stw	r8,4(sp)
 800605c:	80070180 	call	8007018 <memmove>
 8006060:	80800217 	ldw	r2,8(r16)
 8006064:	80c00017 	ldw	r3,0(r16)
 8006068:	da000117 	ldw	r8,4(sp)
 800606c:	1585c83a 	sub	r2,r2,r22
 8006070:	1dad883a 	add	r22,r3,r22
 8006074:	80800215 	stw	r2,8(r16)
 8006078:	85800015 	stw	r22,0(r16)
 800607c:	003fbf06 	br	8005f7c <__alt_data_end+0xfc005f7c>
 8006080:	81000017 	ldw	r4,0(r16)
 8006084:	9027883a 	mov	r19,r18
 8006088:	902f883a 	mov	r23,r18
 800608c:	003f6906 	br	8005e34 <__alt_data_end+0xfc005e34>
 8006090:	900d883a 	mov	r6,r18
 8006094:	01400284 	movi	r5,10
 8006098:	e009883a 	mov	r4,fp
 800609c:	8006dec0 	call	8006dec <memchr>
 80060a0:	10003e26 	beq	r2,zero,800619c <__sfvwrite_r+0x4a4>
 80060a4:	10800044 	addi	r2,r2,1
 80060a8:	1727c83a 	sub	r19,r2,fp
 80060ac:	02000044 	movi	r8,1
 80060b0:	003f9d06 	br	8005f28 <__alt_data_end+0xfc005f28>
 80060b4:	80800517 	ldw	r2,20(r16)
 80060b8:	81400417 	ldw	r5,16(r16)
 80060bc:	81c00017 	ldw	r7,0(r16)
 80060c0:	10a7883a 	add	r19,r2,r2
 80060c4:	9885883a 	add	r2,r19,r2
 80060c8:	1026d7fa 	srli	r19,r2,31
 80060cc:	396dc83a 	sub	r22,r7,r5
 80060d0:	b1000044 	addi	r4,r22,1
 80060d4:	9885883a 	add	r2,r19,r2
 80060d8:	1027d07a 	srai	r19,r2,1
 80060dc:	2485883a 	add	r2,r4,r18
 80060e0:	980d883a 	mov	r6,r19
 80060e4:	9880022e 	bgeu	r19,r2,80060f0 <__sfvwrite_r+0x3f8>
 80060e8:	1027883a 	mov	r19,r2
 80060ec:	100d883a 	mov	r6,r2
 80060f0:	18c1000c 	andi	r3,r3,1024
 80060f4:	18001c26 	beq	r3,zero,8006168 <__sfvwrite_r+0x470>
 80060f8:	300b883a 	mov	r5,r6
 80060fc:	a809883a 	mov	r4,r21
 8006100:	80065e00 	call	80065e0 <_malloc_r>
 8006104:	102f883a 	mov	r23,r2
 8006108:	10002926 	beq	r2,zero,80061b0 <__sfvwrite_r+0x4b8>
 800610c:	81400417 	ldw	r5,16(r16)
 8006110:	b00d883a 	mov	r6,r22
 8006114:	1009883a 	mov	r4,r2
 8006118:	8006ed00 	call	8006ed0 <memcpy>
 800611c:	8080030b 	ldhu	r2,12(r16)
 8006120:	00fedfc4 	movi	r3,-1153
 8006124:	10c4703a 	and	r2,r2,r3
 8006128:	10802014 	ori	r2,r2,128
 800612c:	8080030d 	sth	r2,12(r16)
 8006130:	bd89883a 	add	r4,r23,r22
 8006134:	9d8fc83a 	sub	r7,r19,r22
 8006138:	85c00415 	stw	r23,16(r16)
 800613c:	84c00515 	stw	r19,20(r16)
 8006140:	81000015 	stw	r4,0(r16)
 8006144:	9027883a 	mov	r19,r18
 8006148:	81c00215 	stw	r7,8(r16)
 800614c:	902f883a 	mov	r23,r18
 8006150:	003f3806 	br	8005e34 <__alt_data_end+0xfc005e34>
 8006154:	800b883a 	mov	r5,r16
 8006158:	a809883a 	mov	r4,r21
 800615c:	80054880 	call	8005488 <_fflush_r>
 8006160:	103fb926 	beq	r2,zero,8006048 <__alt_data_end+0xfc006048>
 8006164:	003f6506 	br	8005efc <__alt_data_end+0xfc005efc>
 8006168:	a809883a 	mov	r4,r21
 800616c:	80083540 	call	8008354 <_realloc_r>
 8006170:	102f883a 	mov	r23,r2
 8006174:	103fee1e 	bne	r2,zero,8006130 <__alt_data_end+0xfc006130>
 8006178:	81400417 	ldw	r5,16(r16)
 800617c:	a809883a 	mov	r4,r21
 8006180:	80059e80 	call	80059e8 <_free_r>
 8006184:	8080030b 	ldhu	r2,12(r16)
 8006188:	00ffdfc4 	movi	r3,-129
 800618c:	1884703a 	and	r2,r3,r2
 8006190:	00c00304 	movi	r3,12
 8006194:	a8c00015 	stw	r3,0(r21)
 8006198:	003f5906 	br	8005f00 <__alt_data_end+0xfc005f00>
 800619c:	94c00044 	addi	r19,r18,1
 80061a0:	02000044 	movi	r8,1
 80061a4:	003f6006 	br	8005f28 <__alt_data_end+0xfc005f28>
 80061a8:	00bfffc4 	movi	r2,-1
 80061ac:	003f0006 	br	8005db0 <__alt_data_end+0xfc005db0>
 80061b0:	00800304 	movi	r2,12
 80061b4:	a8800015 	stw	r2,0(r21)
 80061b8:	8080030b 	ldhu	r2,12(r16)
 80061bc:	003f5006 	br	8005f00 <__alt_data_end+0xfc005f00>

080061c0 <_fwalk>:
 80061c0:	defff704 	addi	sp,sp,-36
 80061c4:	dd000415 	stw	r20,16(sp)
 80061c8:	dfc00815 	stw	ra,32(sp)
 80061cc:	ddc00715 	stw	r23,28(sp)
 80061d0:	dd800615 	stw	r22,24(sp)
 80061d4:	dd400515 	stw	r21,20(sp)
 80061d8:	dcc00315 	stw	r19,12(sp)
 80061dc:	dc800215 	stw	r18,8(sp)
 80061e0:	dc400115 	stw	r17,4(sp)
 80061e4:	dc000015 	stw	r16,0(sp)
 80061e8:	2500b804 	addi	r20,r4,736
 80061ec:	a0002326 	beq	r20,zero,800627c <_fwalk+0xbc>
 80061f0:	282b883a 	mov	r21,r5
 80061f4:	002f883a 	mov	r23,zero
 80061f8:	05800044 	movi	r22,1
 80061fc:	04ffffc4 	movi	r19,-1
 8006200:	a4400117 	ldw	r17,4(r20)
 8006204:	a4800217 	ldw	r18,8(r20)
 8006208:	8c7fffc4 	addi	r17,r17,-1
 800620c:	88000d16 	blt	r17,zero,8006244 <_fwalk+0x84>
 8006210:	94000304 	addi	r16,r18,12
 8006214:	94800384 	addi	r18,r18,14
 8006218:	8080000b 	ldhu	r2,0(r16)
 800621c:	8c7fffc4 	addi	r17,r17,-1
 8006220:	813ffd04 	addi	r4,r16,-12
 8006224:	b080042e 	bgeu	r22,r2,8006238 <_fwalk+0x78>
 8006228:	9080000f 	ldh	r2,0(r18)
 800622c:	14c00226 	beq	r2,r19,8006238 <_fwalk+0x78>
 8006230:	a83ee83a 	callr	r21
 8006234:	b8aeb03a 	or	r23,r23,r2
 8006238:	84001a04 	addi	r16,r16,104
 800623c:	94801a04 	addi	r18,r18,104
 8006240:	8cfff51e 	bne	r17,r19,8006218 <__alt_data_end+0xfc006218>
 8006244:	a5000017 	ldw	r20,0(r20)
 8006248:	a03fed1e 	bne	r20,zero,8006200 <__alt_data_end+0xfc006200>
 800624c:	b805883a 	mov	r2,r23
 8006250:	dfc00817 	ldw	ra,32(sp)
 8006254:	ddc00717 	ldw	r23,28(sp)
 8006258:	dd800617 	ldw	r22,24(sp)
 800625c:	dd400517 	ldw	r21,20(sp)
 8006260:	dd000417 	ldw	r20,16(sp)
 8006264:	dcc00317 	ldw	r19,12(sp)
 8006268:	dc800217 	ldw	r18,8(sp)
 800626c:	dc400117 	ldw	r17,4(sp)
 8006270:	dc000017 	ldw	r16,0(sp)
 8006274:	dec00904 	addi	sp,sp,36
 8006278:	f800283a 	ret
 800627c:	002f883a 	mov	r23,zero
 8006280:	003ff206 	br	800624c <__alt_data_end+0xfc00624c>

08006284 <_fwalk_reent>:
 8006284:	defff704 	addi	sp,sp,-36
 8006288:	dd000415 	stw	r20,16(sp)
 800628c:	dfc00815 	stw	ra,32(sp)
 8006290:	ddc00715 	stw	r23,28(sp)
 8006294:	dd800615 	stw	r22,24(sp)
 8006298:	dd400515 	stw	r21,20(sp)
 800629c:	dcc00315 	stw	r19,12(sp)
 80062a0:	dc800215 	stw	r18,8(sp)
 80062a4:	dc400115 	stw	r17,4(sp)
 80062a8:	dc000015 	stw	r16,0(sp)
 80062ac:	2500b804 	addi	r20,r4,736
 80062b0:	a0002326 	beq	r20,zero,8006340 <_fwalk_reent+0xbc>
 80062b4:	282b883a 	mov	r21,r5
 80062b8:	2027883a 	mov	r19,r4
 80062bc:	002f883a 	mov	r23,zero
 80062c0:	05800044 	movi	r22,1
 80062c4:	04bfffc4 	movi	r18,-1
 80062c8:	a4400117 	ldw	r17,4(r20)
 80062cc:	a4000217 	ldw	r16,8(r20)
 80062d0:	8c7fffc4 	addi	r17,r17,-1
 80062d4:	88000c16 	blt	r17,zero,8006308 <_fwalk_reent+0x84>
 80062d8:	84000304 	addi	r16,r16,12
 80062dc:	8080000b 	ldhu	r2,0(r16)
 80062e0:	8c7fffc4 	addi	r17,r17,-1
 80062e4:	817ffd04 	addi	r5,r16,-12
 80062e8:	b080052e 	bgeu	r22,r2,8006300 <_fwalk_reent+0x7c>
 80062ec:	8080008f 	ldh	r2,2(r16)
 80062f0:	9809883a 	mov	r4,r19
 80062f4:	14800226 	beq	r2,r18,8006300 <_fwalk_reent+0x7c>
 80062f8:	a83ee83a 	callr	r21
 80062fc:	b8aeb03a 	or	r23,r23,r2
 8006300:	84001a04 	addi	r16,r16,104
 8006304:	8cbff51e 	bne	r17,r18,80062dc <__alt_data_end+0xfc0062dc>
 8006308:	a5000017 	ldw	r20,0(r20)
 800630c:	a03fee1e 	bne	r20,zero,80062c8 <__alt_data_end+0xfc0062c8>
 8006310:	b805883a 	mov	r2,r23
 8006314:	dfc00817 	ldw	ra,32(sp)
 8006318:	ddc00717 	ldw	r23,28(sp)
 800631c:	dd800617 	ldw	r22,24(sp)
 8006320:	dd400517 	ldw	r21,20(sp)
 8006324:	dd000417 	ldw	r20,16(sp)
 8006328:	dcc00317 	ldw	r19,12(sp)
 800632c:	dc800217 	ldw	r18,8(sp)
 8006330:	dc400117 	ldw	r17,4(sp)
 8006334:	dc000017 	ldw	r16,0(sp)
 8006338:	dec00904 	addi	sp,sp,36
 800633c:	f800283a 	ret
 8006340:	002f883a 	mov	r23,zero
 8006344:	003ff206 	br	8006310 <__alt_data_end+0xfc006310>

08006348 <_setlocale_r>:
 8006348:	30001b26 	beq	r6,zero,80063b8 <_setlocale_r+0x70>
 800634c:	01420074 	movhi	r5,2049
 8006350:	defffe04 	addi	sp,sp,-8
 8006354:	29465f04 	addi	r5,r5,6524
 8006358:	3009883a 	mov	r4,r6
 800635c:	dc000015 	stw	r16,0(sp)
 8006360:	dfc00115 	stw	ra,4(sp)
 8006364:	3021883a 	mov	r16,r6
 8006368:	8008abc0 	call	8008abc <strcmp>
 800636c:	1000061e 	bne	r2,zero,8006388 <_setlocale_r+0x40>
 8006370:	00820074 	movhi	r2,2049
 8006374:	10865e04 	addi	r2,r2,6520
 8006378:	dfc00117 	ldw	ra,4(sp)
 800637c:	dc000017 	ldw	r16,0(sp)
 8006380:	dec00204 	addi	sp,sp,8
 8006384:	f800283a 	ret
 8006388:	01420074 	movhi	r5,2049
 800638c:	29465e04 	addi	r5,r5,6520
 8006390:	8009883a 	mov	r4,r16
 8006394:	8008abc0 	call	8008abc <strcmp>
 8006398:	103ff526 	beq	r2,zero,8006370 <__alt_data_end+0xfc006370>
 800639c:	01420074 	movhi	r5,2049
 80063a0:	29464904 	addi	r5,r5,6436
 80063a4:	8009883a 	mov	r4,r16
 80063a8:	8008abc0 	call	8008abc <strcmp>
 80063ac:	103ff026 	beq	r2,zero,8006370 <__alt_data_end+0xfc006370>
 80063b0:	0005883a 	mov	r2,zero
 80063b4:	003ff006 	br	8006378 <__alt_data_end+0xfc006378>
 80063b8:	00820074 	movhi	r2,2049
 80063bc:	10865e04 	addi	r2,r2,6520
 80063c0:	f800283a 	ret

080063c4 <__locale_charset>:
 80063c4:	00820074 	movhi	r2,2049
 80063c8:	1087d204 	addi	r2,r2,8008
 80063cc:	f800283a 	ret

080063d0 <__locale_mb_cur_max>:
 80063d0:	00820074 	movhi	r2,2049
 80063d4:	10896404 	addi	r2,r2,9616
 80063d8:	10800017 	ldw	r2,0(r2)
 80063dc:	f800283a 	ret

080063e0 <__locale_msgcharset>:
 80063e0:	00820074 	movhi	r2,2049
 80063e4:	1087ca04 	addi	r2,r2,7976
 80063e8:	f800283a 	ret

080063ec <__locale_cjk_lang>:
 80063ec:	0005883a 	mov	r2,zero
 80063f0:	f800283a 	ret

080063f4 <_localeconv_r>:
 80063f4:	00820074 	movhi	r2,2049
 80063f8:	1087da04 	addi	r2,r2,8040
 80063fc:	f800283a 	ret

08006400 <setlocale>:
 8006400:	00820074 	movhi	r2,2049
 8006404:	10896304 	addi	r2,r2,9612
 8006408:	280d883a 	mov	r6,r5
 800640c:	200b883a 	mov	r5,r4
 8006410:	11000017 	ldw	r4,0(r2)
 8006414:	80063481 	jmpi	8006348 <_setlocale_r>

08006418 <localeconv>:
 8006418:	00820074 	movhi	r2,2049
 800641c:	1087da04 	addi	r2,r2,8040
 8006420:	f800283a 	ret

08006424 <__smakebuf_r>:
 8006424:	2880030b 	ldhu	r2,12(r5)
 8006428:	10c0008c 	andi	r3,r2,2
 800642c:	1800411e 	bne	r3,zero,8006534 <__smakebuf_r+0x110>
 8006430:	deffec04 	addi	sp,sp,-80
 8006434:	dc000f15 	stw	r16,60(sp)
 8006438:	2821883a 	mov	r16,r5
 800643c:	2940038f 	ldh	r5,14(r5)
 8006440:	dc401015 	stw	r17,64(sp)
 8006444:	dfc01315 	stw	ra,76(sp)
 8006448:	dcc01215 	stw	r19,72(sp)
 800644c:	dc801115 	stw	r18,68(sp)
 8006450:	2023883a 	mov	r17,r4
 8006454:	28001c16 	blt	r5,zero,80064c8 <__smakebuf_r+0xa4>
 8006458:	d80d883a 	mov	r6,sp
 800645c:	800a72c0 	call	800a72c <_fstat_r>
 8006460:	10001816 	blt	r2,zero,80064c4 <__smakebuf_r+0xa0>
 8006464:	d8800117 	ldw	r2,4(sp)
 8006468:	00e00014 	movui	r3,32768
 800646c:	10bc000c 	andi	r2,r2,61440
 8006470:	14c80020 	cmpeqi	r19,r2,8192
 8006474:	10c03726 	beq	r2,r3,8006554 <__smakebuf_r+0x130>
 8006478:	80c0030b 	ldhu	r3,12(r16)
 800647c:	18c20014 	ori	r3,r3,2048
 8006480:	80c0030d 	sth	r3,12(r16)
 8006484:	00c80004 	movi	r3,8192
 8006488:	10c0521e 	bne	r2,r3,80065d4 <__smakebuf_r+0x1b0>
 800648c:	8140038f 	ldh	r5,14(r16)
 8006490:	8809883a 	mov	r4,r17
 8006494:	800a7880 	call	800a788 <_isatty_r>
 8006498:	10004c26 	beq	r2,zero,80065cc <__smakebuf_r+0x1a8>
 800649c:	8080030b 	ldhu	r2,12(r16)
 80064a0:	80c010c4 	addi	r3,r16,67
 80064a4:	80c00015 	stw	r3,0(r16)
 80064a8:	10800054 	ori	r2,r2,1
 80064ac:	8080030d 	sth	r2,12(r16)
 80064b0:	00800044 	movi	r2,1
 80064b4:	80c00415 	stw	r3,16(r16)
 80064b8:	80800515 	stw	r2,20(r16)
 80064bc:	04810004 	movi	r18,1024
 80064c0:	00000706 	br	80064e0 <__smakebuf_r+0xbc>
 80064c4:	8080030b 	ldhu	r2,12(r16)
 80064c8:	10c0200c 	andi	r3,r2,128
 80064cc:	18001f1e 	bne	r3,zero,800654c <__smakebuf_r+0x128>
 80064d0:	04810004 	movi	r18,1024
 80064d4:	10820014 	ori	r2,r2,2048
 80064d8:	8080030d 	sth	r2,12(r16)
 80064dc:	0027883a 	mov	r19,zero
 80064e0:	900b883a 	mov	r5,r18
 80064e4:	8809883a 	mov	r4,r17
 80064e8:	80065e00 	call	80065e0 <_malloc_r>
 80064ec:	10002c26 	beq	r2,zero,80065a0 <__smakebuf_r+0x17c>
 80064f0:	80c0030b 	ldhu	r3,12(r16)
 80064f4:	01020034 	movhi	r4,2048
 80064f8:	21154704 	addi	r4,r4,21788
 80064fc:	89000f15 	stw	r4,60(r17)
 8006500:	18c02014 	ori	r3,r3,128
 8006504:	80c0030d 	sth	r3,12(r16)
 8006508:	80800015 	stw	r2,0(r16)
 800650c:	80800415 	stw	r2,16(r16)
 8006510:	84800515 	stw	r18,20(r16)
 8006514:	98001a1e 	bne	r19,zero,8006580 <__smakebuf_r+0x15c>
 8006518:	dfc01317 	ldw	ra,76(sp)
 800651c:	dcc01217 	ldw	r19,72(sp)
 8006520:	dc801117 	ldw	r18,68(sp)
 8006524:	dc401017 	ldw	r17,64(sp)
 8006528:	dc000f17 	ldw	r16,60(sp)
 800652c:	dec01404 	addi	sp,sp,80
 8006530:	f800283a 	ret
 8006534:	288010c4 	addi	r2,r5,67
 8006538:	28800015 	stw	r2,0(r5)
 800653c:	28800415 	stw	r2,16(r5)
 8006540:	00800044 	movi	r2,1
 8006544:	28800515 	stw	r2,20(r5)
 8006548:	f800283a 	ret
 800654c:	04801004 	movi	r18,64
 8006550:	003fe006 	br	80064d4 <__alt_data_end+0xfc0064d4>
 8006554:	81000a17 	ldw	r4,40(r16)
 8006558:	00c20074 	movhi	r3,2049
 800655c:	18e29604 	addi	r3,r3,-30120
 8006560:	20ffc51e 	bne	r4,r3,8006478 <__alt_data_end+0xfc006478>
 8006564:	8080030b 	ldhu	r2,12(r16)
 8006568:	04810004 	movi	r18,1024
 800656c:	84801315 	stw	r18,76(r16)
 8006570:	1484b03a 	or	r2,r2,r18
 8006574:	8080030d 	sth	r2,12(r16)
 8006578:	0027883a 	mov	r19,zero
 800657c:	003fd806 	br	80064e0 <__alt_data_end+0xfc0064e0>
 8006580:	8140038f 	ldh	r5,14(r16)
 8006584:	8809883a 	mov	r4,r17
 8006588:	800a7880 	call	800a788 <_isatty_r>
 800658c:	103fe226 	beq	r2,zero,8006518 <__alt_data_end+0xfc006518>
 8006590:	8080030b 	ldhu	r2,12(r16)
 8006594:	10800054 	ori	r2,r2,1
 8006598:	8080030d 	sth	r2,12(r16)
 800659c:	003fde06 	br	8006518 <__alt_data_end+0xfc006518>
 80065a0:	8080030b 	ldhu	r2,12(r16)
 80065a4:	10c0800c 	andi	r3,r2,512
 80065a8:	183fdb1e 	bne	r3,zero,8006518 <__alt_data_end+0xfc006518>
 80065ac:	10800094 	ori	r2,r2,2
 80065b0:	80c010c4 	addi	r3,r16,67
 80065b4:	8080030d 	sth	r2,12(r16)
 80065b8:	00800044 	movi	r2,1
 80065bc:	80c00015 	stw	r3,0(r16)
 80065c0:	80c00415 	stw	r3,16(r16)
 80065c4:	80800515 	stw	r2,20(r16)
 80065c8:	003fd306 	br	8006518 <__alt_data_end+0xfc006518>
 80065cc:	04810004 	movi	r18,1024
 80065d0:	003fc306 	br	80064e0 <__alt_data_end+0xfc0064e0>
 80065d4:	0027883a 	mov	r19,zero
 80065d8:	04810004 	movi	r18,1024
 80065dc:	003fc006 	br	80064e0 <__alt_data_end+0xfc0064e0>

080065e0 <_malloc_r>:
 80065e0:	defff504 	addi	sp,sp,-44
 80065e4:	dc800315 	stw	r18,12(sp)
 80065e8:	dfc00a15 	stw	ra,40(sp)
 80065ec:	df000915 	stw	fp,36(sp)
 80065f0:	ddc00815 	stw	r23,32(sp)
 80065f4:	dd800715 	stw	r22,28(sp)
 80065f8:	dd400615 	stw	r21,24(sp)
 80065fc:	dd000515 	stw	r20,20(sp)
 8006600:	dcc00415 	stw	r19,16(sp)
 8006604:	dc400215 	stw	r17,8(sp)
 8006608:	dc000115 	stw	r16,4(sp)
 800660c:	288002c4 	addi	r2,r5,11
 8006610:	00c00584 	movi	r3,22
 8006614:	2025883a 	mov	r18,r4
 8006618:	18807f2e 	bgeu	r3,r2,8006818 <_malloc_r+0x238>
 800661c:	047ffe04 	movi	r17,-8
 8006620:	1462703a 	and	r17,r2,r17
 8006624:	8800a316 	blt	r17,zero,80068b4 <_malloc_r+0x2d4>
 8006628:	8940a236 	bltu	r17,r5,80068b4 <_malloc_r+0x2d4>
 800662c:	800e7100 	call	800e710 <__malloc_lock>
 8006630:	00807dc4 	movi	r2,503
 8006634:	1441e92e 	bgeu	r2,r17,8006ddc <_malloc_r+0x7fc>
 8006638:	8804d27a 	srli	r2,r17,9
 800663c:	1000a126 	beq	r2,zero,80068c4 <_malloc_r+0x2e4>
 8006640:	00c00104 	movi	r3,4
 8006644:	18811e36 	bltu	r3,r2,8006ac0 <_malloc_r+0x4e0>
 8006648:	8804d1ba 	srli	r2,r17,6
 800664c:	12000e44 	addi	r8,r2,57
 8006650:	11c00e04 	addi	r7,r2,56
 8006654:	4209883a 	add	r4,r8,r8
 8006658:	04c20074 	movhi	r19,2049
 800665c:	2109883a 	add	r4,r4,r4
 8006660:	9cc7e804 	addi	r19,r19,8096
 8006664:	2109883a 	add	r4,r4,r4
 8006668:	9909883a 	add	r4,r19,r4
 800666c:	24000117 	ldw	r16,4(r4)
 8006670:	213ffe04 	addi	r4,r4,-8
 8006674:	24009726 	beq	r4,r16,80068d4 <_malloc_r+0x2f4>
 8006678:	80800117 	ldw	r2,4(r16)
 800667c:	01bfff04 	movi	r6,-4
 8006680:	014003c4 	movi	r5,15
 8006684:	1184703a 	and	r2,r2,r6
 8006688:	1447c83a 	sub	r3,r2,r17
 800668c:	28c00716 	blt	r5,r3,80066ac <_malloc_r+0xcc>
 8006690:	1800920e 	bge	r3,zero,80068dc <_malloc_r+0x2fc>
 8006694:	84000317 	ldw	r16,12(r16)
 8006698:	24008e26 	beq	r4,r16,80068d4 <_malloc_r+0x2f4>
 800669c:	80800117 	ldw	r2,4(r16)
 80066a0:	1184703a 	and	r2,r2,r6
 80066a4:	1447c83a 	sub	r3,r2,r17
 80066a8:	28fff90e 	bge	r5,r3,8006690 <__alt_data_end+0xfc006690>
 80066ac:	3809883a 	mov	r4,r7
 80066b0:	01820074 	movhi	r6,2049
 80066b4:	9c000417 	ldw	r16,16(r19)
 80066b8:	3187e804 	addi	r6,r6,8096
 80066bc:	32000204 	addi	r8,r6,8
 80066c0:	82013426 	beq	r16,r8,8006b94 <_malloc_r+0x5b4>
 80066c4:	80c00117 	ldw	r3,4(r16)
 80066c8:	00bfff04 	movi	r2,-4
 80066cc:	188e703a 	and	r7,r3,r2
 80066d0:	3c45c83a 	sub	r2,r7,r17
 80066d4:	00c003c4 	movi	r3,15
 80066d8:	18811f16 	blt	r3,r2,8006b58 <_malloc_r+0x578>
 80066dc:	32000515 	stw	r8,20(r6)
 80066e0:	32000415 	stw	r8,16(r6)
 80066e4:	10007f0e 	bge	r2,zero,80068e4 <_malloc_r+0x304>
 80066e8:	00807fc4 	movi	r2,511
 80066ec:	11c0fd36 	bltu	r2,r7,8006ae4 <_malloc_r+0x504>
 80066f0:	3806d0fa 	srli	r3,r7,3
 80066f4:	01c00044 	movi	r7,1
 80066f8:	30800117 	ldw	r2,4(r6)
 80066fc:	19400044 	addi	r5,r3,1
 8006700:	294b883a 	add	r5,r5,r5
 8006704:	1807d0ba 	srai	r3,r3,2
 8006708:	294b883a 	add	r5,r5,r5
 800670c:	294b883a 	add	r5,r5,r5
 8006710:	298b883a 	add	r5,r5,r6
 8006714:	38c6983a 	sll	r3,r7,r3
 8006718:	29c00017 	ldw	r7,0(r5)
 800671c:	2a7ffe04 	addi	r9,r5,-8
 8006720:	1886b03a 	or	r3,r3,r2
 8006724:	82400315 	stw	r9,12(r16)
 8006728:	81c00215 	stw	r7,8(r16)
 800672c:	30c00115 	stw	r3,4(r6)
 8006730:	2c000015 	stw	r16,0(r5)
 8006734:	3c000315 	stw	r16,12(r7)
 8006738:	2005d0ba 	srai	r2,r4,2
 800673c:	01400044 	movi	r5,1
 8006740:	288a983a 	sll	r5,r5,r2
 8006744:	19406f36 	bltu	r3,r5,8006904 <_malloc_r+0x324>
 8006748:	28c4703a 	and	r2,r5,r3
 800674c:	10000a1e 	bne	r2,zero,8006778 <_malloc_r+0x198>
 8006750:	00bfff04 	movi	r2,-4
 8006754:	294b883a 	add	r5,r5,r5
 8006758:	2088703a 	and	r4,r4,r2
 800675c:	28c4703a 	and	r2,r5,r3
 8006760:	21000104 	addi	r4,r4,4
 8006764:	1000041e 	bne	r2,zero,8006778 <_malloc_r+0x198>
 8006768:	294b883a 	add	r5,r5,r5
 800676c:	28c4703a 	and	r2,r5,r3
 8006770:	21000104 	addi	r4,r4,4
 8006774:	103ffc26 	beq	r2,zero,8006768 <__alt_data_end+0xfc006768>
 8006778:	02bfff04 	movi	r10,-4
 800677c:	024003c4 	movi	r9,15
 8006780:	21800044 	addi	r6,r4,1
 8006784:	318d883a 	add	r6,r6,r6
 8006788:	318d883a 	add	r6,r6,r6
 800678c:	318d883a 	add	r6,r6,r6
 8006790:	998d883a 	add	r6,r19,r6
 8006794:	333ffe04 	addi	r12,r6,-8
 8006798:	2017883a 	mov	r11,r4
 800679c:	31800104 	addi	r6,r6,4
 80067a0:	34000017 	ldw	r16,0(r6)
 80067a4:	31fffd04 	addi	r7,r6,-12
 80067a8:	81c0041e 	bne	r16,r7,80067bc <_malloc_r+0x1dc>
 80067ac:	0000fb06 	br	8006b9c <_malloc_r+0x5bc>
 80067b0:	1801030e 	bge	r3,zero,8006bc0 <_malloc_r+0x5e0>
 80067b4:	84000317 	ldw	r16,12(r16)
 80067b8:	81c0f826 	beq	r16,r7,8006b9c <_malloc_r+0x5bc>
 80067bc:	80800117 	ldw	r2,4(r16)
 80067c0:	1284703a 	and	r2,r2,r10
 80067c4:	1447c83a 	sub	r3,r2,r17
 80067c8:	48fff90e 	bge	r9,r3,80067b0 <__alt_data_end+0xfc0067b0>
 80067cc:	80800317 	ldw	r2,12(r16)
 80067d0:	81000217 	ldw	r4,8(r16)
 80067d4:	89400054 	ori	r5,r17,1
 80067d8:	81400115 	stw	r5,4(r16)
 80067dc:	20800315 	stw	r2,12(r4)
 80067e0:	11000215 	stw	r4,8(r2)
 80067e4:	8463883a 	add	r17,r16,r17
 80067e8:	9c400515 	stw	r17,20(r19)
 80067ec:	9c400415 	stw	r17,16(r19)
 80067f0:	18800054 	ori	r2,r3,1
 80067f4:	88800115 	stw	r2,4(r17)
 80067f8:	8a000315 	stw	r8,12(r17)
 80067fc:	8a000215 	stw	r8,8(r17)
 8006800:	88e3883a 	add	r17,r17,r3
 8006804:	88c00015 	stw	r3,0(r17)
 8006808:	9009883a 	mov	r4,r18
 800680c:	800e7340 	call	800e734 <__malloc_unlock>
 8006810:	80800204 	addi	r2,r16,8
 8006814:	00001b06 	br	8006884 <_malloc_r+0x2a4>
 8006818:	04400404 	movi	r17,16
 800681c:	89402536 	bltu	r17,r5,80068b4 <_malloc_r+0x2d4>
 8006820:	800e7100 	call	800e710 <__malloc_lock>
 8006824:	00800184 	movi	r2,6
 8006828:	01000084 	movi	r4,2
 800682c:	04c20074 	movhi	r19,2049
 8006830:	1085883a 	add	r2,r2,r2
 8006834:	9cc7e804 	addi	r19,r19,8096
 8006838:	1085883a 	add	r2,r2,r2
 800683c:	9885883a 	add	r2,r19,r2
 8006840:	14000117 	ldw	r16,4(r2)
 8006844:	10fffe04 	addi	r3,r2,-8
 8006848:	80c0d926 	beq	r16,r3,8006bb0 <_malloc_r+0x5d0>
 800684c:	80c00117 	ldw	r3,4(r16)
 8006850:	81000317 	ldw	r4,12(r16)
 8006854:	00bfff04 	movi	r2,-4
 8006858:	1884703a 	and	r2,r3,r2
 800685c:	81400217 	ldw	r5,8(r16)
 8006860:	8085883a 	add	r2,r16,r2
 8006864:	10c00117 	ldw	r3,4(r2)
 8006868:	29000315 	stw	r4,12(r5)
 800686c:	21400215 	stw	r5,8(r4)
 8006870:	18c00054 	ori	r3,r3,1
 8006874:	10c00115 	stw	r3,4(r2)
 8006878:	9009883a 	mov	r4,r18
 800687c:	800e7340 	call	800e734 <__malloc_unlock>
 8006880:	80800204 	addi	r2,r16,8
 8006884:	dfc00a17 	ldw	ra,40(sp)
 8006888:	df000917 	ldw	fp,36(sp)
 800688c:	ddc00817 	ldw	r23,32(sp)
 8006890:	dd800717 	ldw	r22,28(sp)
 8006894:	dd400617 	ldw	r21,24(sp)
 8006898:	dd000517 	ldw	r20,20(sp)
 800689c:	dcc00417 	ldw	r19,16(sp)
 80068a0:	dc800317 	ldw	r18,12(sp)
 80068a4:	dc400217 	ldw	r17,8(sp)
 80068a8:	dc000117 	ldw	r16,4(sp)
 80068ac:	dec00b04 	addi	sp,sp,44
 80068b0:	f800283a 	ret
 80068b4:	00800304 	movi	r2,12
 80068b8:	90800015 	stw	r2,0(r18)
 80068bc:	0005883a 	mov	r2,zero
 80068c0:	003ff006 	br	8006884 <__alt_data_end+0xfc006884>
 80068c4:	01002004 	movi	r4,128
 80068c8:	02001004 	movi	r8,64
 80068cc:	01c00fc4 	movi	r7,63
 80068d0:	003f6106 	br	8006658 <__alt_data_end+0xfc006658>
 80068d4:	4009883a 	mov	r4,r8
 80068d8:	003f7506 	br	80066b0 <__alt_data_end+0xfc0066b0>
 80068dc:	81000317 	ldw	r4,12(r16)
 80068e0:	003fde06 	br	800685c <__alt_data_end+0xfc00685c>
 80068e4:	81c5883a 	add	r2,r16,r7
 80068e8:	11400117 	ldw	r5,4(r2)
 80068ec:	9009883a 	mov	r4,r18
 80068f0:	29400054 	ori	r5,r5,1
 80068f4:	11400115 	stw	r5,4(r2)
 80068f8:	800e7340 	call	800e734 <__malloc_unlock>
 80068fc:	80800204 	addi	r2,r16,8
 8006900:	003fe006 	br	8006884 <__alt_data_end+0xfc006884>
 8006904:	9c000217 	ldw	r16,8(r19)
 8006908:	00bfff04 	movi	r2,-4
 800690c:	85800117 	ldw	r22,4(r16)
 8006910:	b0ac703a 	and	r22,r22,r2
 8006914:	b4400336 	bltu	r22,r17,8006924 <_malloc_r+0x344>
 8006918:	b445c83a 	sub	r2,r22,r17
 800691c:	00c003c4 	movi	r3,15
 8006920:	18805d16 	blt	r3,r2,8006a98 <_malloc_r+0x4b8>
 8006924:	05c20074 	movhi	r23,2049
 8006928:	00820074 	movhi	r2,2049
 800692c:	108c2804 	addi	r2,r2,12448
 8006930:	bdc96504 	addi	r23,r23,9620
 8006934:	15400017 	ldw	r21,0(r2)
 8006938:	b8c00017 	ldw	r3,0(r23)
 800693c:	00bfffc4 	movi	r2,-1
 8006940:	858d883a 	add	r6,r16,r22
 8006944:	8d6b883a 	add	r21,r17,r21
 8006948:	1880ea26 	beq	r3,r2,8006cf4 <_malloc_r+0x714>
 800694c:	ad4403c4 	addi	r21,r21,4111
 8006950:	00bc0004 	movi	r2,-4096
 8006954:	a8aa703a 	and	r21,r21,r2
 8006958:	a80b883a 	mov	r5,r21
 800695c:	9009883a 	mov	r4,r18
 8006960:	d9800015 	stw	r6,0(sp)
 8006964:	800892c0 	call	800892c <_sbrk_r>
 8006968:	1029883a 	mov	r20,r2
 800696c:	00bfffc4 	movi	r2,-1
 8006970:	d9800017 	ldw	r6,0(sp)
 8006974:	a080e826 	beq	r20,r2,8006d18 <_malloc_r+0x738>
 8006978:	a180a636 	bltu	r20,r6,8006c14 <_malloc_r+0x634>
 800697c:	07020074 	movhi	fp,2049
 8006980:	e70c2f04 	addi	fp,fp,12476
 8006984:	e0800017 	ldw	r2,0(fp)
 8006988:	a887883a 	add	r3,r21,r2
 800698c:	e0c00015 	stw	r3,0(fp)
 8006990:	3500e626 	beq	r6,r20,8006d2c <_malloc_r+0x74c>
 8006994:	b9000017 	ldw	r4,0(r23)
 8006998:	00bfffc4 	movi	r2,-1
 800699c:	2080ee26 	beq	r4,r2,8006d58 <_malloc_r+0x778>
 80069a0:	a185c83a 	sub	r2,r20,r6
 80069a4:	10c5883a 	add	r2,r2,r3
 80069a8:	e0800015 	stw	r2,0(fp)
 80069ac:	a0c001cc 	andi	r3,r20,7
 80069b0:	1800bc26 	beq	r3,zero,8006ca4 <_malloc_r+0x6c4>
 80069b4:	a0e9c83a 	sub	r20,r20,r3
 80069b8:	00840204 	movi	r2,4104
 80069bc:	a5000204 	addi	r20,r20,8
 80069c0:	10c7c83a 	sub	r3,r2,r3
 80069c4:	a545883a 	add	r2,r20,r21
 80069c8:	1083ffcc 	andi	r2,r2,4095
 80069cc:	18abc83a 	sub	r21,r3,r2
 80069d0:	a80b883a 	mov	r5,r21
 80069d4:	9009883a 	mov	r4,r18
 80069d8:	800892c0 	call	800892c <_sbrk_r>
 80069dc:	00ffffc4 	movi	r3,-1
 80069e0:	10c0e126 	beq	r2,r3,8006d68 <_malloc_r+0x788>
 80069e4:	1505c83a 	sub	r2,r2,r20
 80069e8:	1545883a 	add	r2,r2,r21
 80069ec:	10800054 	ori	r2,r2,1
 80069f0:	e0c00017 	ldw	r3,0(fp)
 80069f4:	9d000215 	stw	r20,8(r19)
 80069f8:	a0800115 	stw	r2,4(r20)
 80069fc:	a8c7883a 	add	r3,r21,r3
 8006a00:	e0c00015 	stw	r3,0(fp)
 8006a04:	84c00e26 	beq	r16,r19,8006a40 <_malloc_r+0x460>
 8006a08:	018003c4 	movi	r6,15
 8006a0c:	3580a72e 	bgeu	r6,r22,8006cac <_malloc_r+0x6cc>
 8006a10:	81400117 	ldw	r5,4(r16)
 8006a14:	013ffe04 	movi	r4,-8
 8006a18:	b0bffd04 	addi	r2,r22,-12
 8006a1c:	1104703a 	and	r2,r2,r4
 8006a20:	2900004c 	andi	r4,r5,1
 8006a24:	2088b03a 	or	r4,r4,r2
 8006a28:	81000115 	stw	r4,4(r16)
 8006a2c:	01400144 	movi	r5,5
 8006a30:	8089883a 	add	r4,r16,r2
 8006a34:	21400115 	stw	r5,4(r4)
 8006a38:	21400215 	stw	r5,8(r4)
 8006a3c:	3080cd36 	bltu	r6,r2,8006d74 <_malloc_r+0x794>
 8006a40:	00820074 	movhi	r2,2049
 8006a44:	108c2704 	addi	r2,r2,12444
 8006a48:	11000017 	ldw	r4,0(r2)
 8006a4c:	20c0012e 	bgeu	r4,r3,8006a54 <_malloc_r+0x474>
 8006a50:	10c00015 	stw	r3,0(r2)
 8006a54:	00820074 	movhi	r2,2049
 8006a58:	108c2604 	addi	r2,r2,12440
 8006a5c:	11000017 	ldw	r4,0(r2)
 8006a60:	9c000217 	ldw	r16,8(r19)
 8006a64:	20c0012e 	bgeu	r4,r3,8006a6c <_malloc_r+0x48c>
 8006a68:	10c00015 	stw	r3,0(r2)
 8006a6c:	80c00117 	ldw	r3,4(r16)
 8006a70:	00bfff04 	movi	r2,-4
 8006a74:	1886703a 	and	r3,r3,r2
 8006a78:	1c45c83a 	sub	r2,r3,r17
 8006a7c:	1c400236 	bltu	r3,r17,8006a88 <_malloc_r+0x4a8>
 8006a80:	00c003c4 	movi	r3,15
 8006a84:	18800416 	blt	r3,r2,8006a98 <_malloc_r+0x4b8>
 8006a88:	9009883a 	mov	r4,r18
 8006a8c:	800e7340 	call	800e734 <__malloc_unlock>
 8006a90:	0005883a 	mov	r2,zero
 8006a94:	003f7b06 	br	8006884 <__alt_data_end+0xfc006884>
 8006a98:	88c00054 	ori	r3,r17,1
 8006a9c:	80c00115 	stw	r3,4(r16)
 8006aa0:	8463883a 	add	r17,r16,r17
 8006aa4:	10800054 	ori	r2,r2,1
 8006aa8:	9c400215 	stw	r17,8(r19)
 8006aac:	88800115 	stw	r2,4(r17)
 8006ab0:	9009883a 	mov	r4,r18
 8006ab4:	800e7340 	call	800e734 <__malloc_unlock>
 8006ab8:	80800204 	addi	r2,r16,8
 8006abc:	003f7106 	br	8006884 <__alt_data_end+0xfc006884>
 8006ac0:	00c00504 	movi	r3,20
 8006ac4:	18804a2e 	bgeu	r3,r2,8006bf0 <_malloc_r+0x610>
 8006ac8:	00c01504 	movi	r3,84
 8006acc:	18806e36 	bltu	r3,r2,8006c88 <_malloc_r+0x6a8>
 8006ad0:	8804d33a 	srli	r2,r17,12
 8006ad4:	12001bc4 	addi	r8,r2,111
 8006ad8:	11c01b84 	addi	r7,r2,110
 8006adc:	4209883a 	add	r4,r8,r8
 8006ae0:	003edd06 	br	8006658 <__alt_data_end+0xfc006658>
 8006ae4:	3804d27a 	srli	r2,r7,9
 8006ae8:	00c00104 	movi	r3,4
 8006aec:	1880442e 	bgeu	r3,r2,8006c00 <_malloc_r+0x620>
 8006af0:	00c00504 	movi	r3,20
 8006af4:	18808136 	bltu	r3,r2,8006cfc <_malloc_r+0x71c>
 8006af8:	11401704 	addi	r5,r2,92
 8006afc:	10c016c4 	addi	r3,r2,91
 8006b00:	294b883a 	add	r5,r5,r5
 8006b04:	294b883a 	add	r5,r5,r5
 8006b08:	294b883a 	add	r5,r5,r5
 8006b0c:	994b883a 	add	r5,r19,r5
 8006b10:	28800017 	ldw	r2,0(r5)
 8006b14:	01820074 	movhi	r6,2049
 8006b18:	297ffe04 	addi	r5,r5,-8
 8006b1c:	3187e804 	addi	r6,r6,8096
 8006b20:	28806526 	beq	r5,r2,8006cb8 <_malloc_r+0x6d8>
 8006b24:	01bfff04 	movi	r6,-4
 8006b28:	10c00117 	ldw	r3,4(r2)
 8006b2c:	1986703a 	and	r3,r3,r6
 8006b30:	38c0022e 	bgeu	r7,r3,8006b3c <_malloc_r+0x55c>
 8006b34:	10800217 	ldw	r2,8(r2)
 8006b38:	28bffb1e 	bne	r5,r2,8006b28 <__alt_data_end+0xfc006b28>
 8006b3c:	11400317 	ldw	r5,12(r2)
 8006b40:	98c00117 	ldw	r3,4(r19)
 8006b44:	81400315 	stw	r5,12(r16)
 8006b48:	80800215 	stw	r2,8(r16)
 8006b4c:	2c000215 	stw	r16,8(r5)
 8006b50:	14000315 	stw	r16,12(r2)
 8006b54:	003ef806 	br	8006738 <__alt_data_end+0xfc006738>
 8006b58:	88c00054 	ori	r3,r17,1
 8006b5c:	80c00115 	stw	r3,4(r16)
 8006b60:	8463883a 	add	r17,r16,r17
 8006b64:	34400515 	stw	r17,20(r6)
 8006b68:	34400415 	stw	r17,16(r6)
 8006b6c:	10c00054 	ori	r3,r2,1
 8006b70:	8a000315 	stw	r8,12(r17)
 8006b74:	8a000215 	stw	r8,8(r17)
 8006b78:	88c00115 	stw	r3,4(r17)
 8006b7c:	88a3883a 	add	r17,r17,r2
 8006b80:	88800015 	stw	r2,0(r17)
 8006b84:	9009883a 	mov	r4,r18
 8006b88:	800e7340 	call	800e734 <__malloc_unlock>
 8006b8c:	80800204 	addi	r2,r16,8
 8006b90:	003f3c06 	br	8006884 <__alt_data_end+0xfc006884>
 8006b94:	30c00117 	ldw	r3,4(r6)
 8006b98:	003ee706 	br	8006738 <__alt_data_end+0xfc006738>
 8006b9c:	5ac00044 	addi	r11,r11,1
 8006ba0:	588000cc 	andi	r2,r11,3
 8006ba4:	31800204 	addi	r6,r6,8
 8006ba8:	103efd1e 	bne	r2,zero,80067a0 <__alt_data_end+0xfc0067a0>
 8006bac:	00002406 	br	8006c40 <_malloc_r+0x660>
 8006bb0:	14000317 	ldw	r16,12(r2)
 8006bb4:	143f251e 	bne	r2,r16,800684c <__alt_data_end+0xfc00684c>
 8006bb8:	21000084 	addi	r4,r4,2
 8006bbc:	003ebc06 	br	80066b0 <__alt_data_end+0xfc0066b0>
 8006bc0:	8085883a 	add	r2,r16,r2
 8006bc4:	10c00117 	ldw	r3,4(r2)
 8006bc8:	81000317 	ldw	r4,12(r16)
 8006bcc:	81400217 	ldw	r5,8(r16)
 8006bd0:	18c00054 	ori	r3,r3,1
 8006bd4:	10c00115 	stw	r3,4(r2)
 8006bd8:	29000315 	stw	r4,12(r5)
 8006bdc:	21400215 	stw	r5,8(r4)
 8006be0:	9009883a 	mov	r4,r18
 8006be4:	800e7340 	call	800e734 <__malloc_unlock>
 8006be8:	80800204 	addi	r2,r16,8
 8006bec:	003f2506 	br	8006884 <__alt_data_end+0xfc006884>
 8006bf0:	12001704 	addi	r8,r2,92
 8006bf4:	11c016c4 	addi	r7,r2,91
 8006bf8:	4209883a 	add	r4,r8,r8
 8006bfc:	003e9606 	br	8006658 <__alt_data_end+0xfc006658>
 8006c00:	3804d1ba 	srli	r2,r7,6
 8006c04:	11400e44 	addi	r5,r2,57
 8006c08:	10c00e04 	addi	r3,r2,56
 8006c0c:	294b883a 	add	r5,r5,r5
 8006c10:	003fbc06 	br	8006b04 <__alt_data_end+0xfc006b04>
 8006c14:	84ff5926 	beq	r16,r19,800697c <__alt_data_end+0xfc00697c>
 8006c18:	00820074 	movhi	r2,2049
 8006c1c:	1087e804 	addi	r2,r2,8096
 8006c20:	14000217 	ldw	r16,8(r2)
 8006c24:	00bfff04 	movi	r2,-4
 8006c28:	80c00117 	ldw	r3,4(r16)
 8006c2c:	1886703a 	and	r3,r3,r2
 8006c30:	003f9106 	br	8006a78 <__alt_data_end+0xfc006a78>
 8006c34:	60800217 	ldw	r2,8(r12)
 8006c38:	213fffc4 	addi	r4,r4,-1
 8006c3c:	1300651e 	bne	r2,r12,8006dd4 <_malloc_r+0x7f4>
 8006c40:	208000cc 	andi	r2,r4,3
 8006c44:	633ffe04 	addi	r12,r12,-8
 8006c48:	103ffa1e 	bne	r2,zero,8006c34 <__alt_data_end+0xfc006c34>
 8006c4c:	98800117 	ldw	r2,4(r19)
 8006c50:	0146303a 	nor	r3,zero,r5
 8006c54:	1884703a 	and	r2,r3,r2
 8006c58:	98800115 	stw	r2,4(r19)
 8006c5c:	294b883a 	add	r5,r5,r5
 8006c60:	117f2836 	bltu	r2,r5,8006904 <__alt_data_end+0xfc006904>
 8006c64:	283f2726 	beq	r5,zero,8006904 <__alt_data_end+0xfc006904>
 8006c68:	2886703a 	and	r3,r5,r2
 8006c6c:	5809883a 	mov	r4,r11
 8006c70:	183ec31e 	bne	r3,zero,8006780 <__alt_data_end+0xfc006780>
 8006c74:	294b883a 	add	r5,r5,r5
 8006c78:	2886703a 	and	r3,r5,r2
 8006c7c:	21000104 	addi	r4,r4,4
 8006c80:	183ffc26 	beq	r3,zero,8006c74 <__alt_data_end+0xfc006c74>
 8006c84:	003ebe06 	br	8006780 <__alt_data_end+0xfc006780>
 8006c88:	00c05504 	movi	r3,340
 8006c8c:	18801236 	bltu	r3,r2,8006cd8 <_malloc_r+0x6f8>
 8006c90:	8804d3fa 	srli	r2,r17,15
 8006c94:	12001e04 	addi	r8,r2,120
 8006c98:	11c01dc4 	addi	r7,r2,119
 8006c9c:	4209883a 	add	r4,r8,r8
 8006ca0:	003e6d06 	br	8006658 <__alt_data_end+0xfc006658>
 8006ca4:	00c40004 	movi	r3,4096
 8006ca8:	003f4606 	br	80069c4 <__alt_data_end+0xfc0069c4>
 8006cac:	00800044 	movi	r2,1
 8006cb0:	a0800115 	stw	r2,4(r20)
 8006cb4:	003f7406 	br	8006a88 <__alt_data_end+0xfc006a88>
 8006cb8:	1805d0ba 	srai	r2,r3,2
 8006cbc:	01c00044 	movi	r7,1
 8006cc0:	30c00117 	ldw	r3,4(r6)
 8006cc4:	388e983a 	sll	r7,r7,r2
 8006cc8:	2805883a 	mov	r2,r5
 8006ccc:	38c6b03a 	or	r3,r7,r3
 8006cd0:	30c00115 	stw	r3,4(r6)
 8006cd4:	003f9b06 	br	8006b44 <__alt_data_end+0xfc006b44>
 8006cd8:	00c15504 	movi	r3,1364
 8006cdc:	18801a36 	bltu	r3,r2,8006d48 <_malloc_r+0x768>
 8006ce0:	8804d4ba 	srli	r2,r17,18
 8006ce4:	12001f44 	addi	r8,r2,125
 8006ce8:	11c01f04 	addi	r7,r2,124
 8006cec:	4209883a 	add	r4,r8,r8
 8006cf0:	003e5906 	br	8006658 <__alt_data_end+0xfc006658>
 8006cf4:	ad400404 	addi	r21,r21,16
 8006cf8:	003f1706 	br	8006958 <__alt_data_end+0xfc006958>
 8006cfc:	00c01504 	movi	r3,84
 8006d00:	18802336 	bltu	r3,r2,8006d90 <_malloc_r+0x7b0>
 8006d04:	3804d33a 	srli	r2,r7,12
 8006d08:	11401bc4 	addi	r5,r2,111
 8006d0c:	10c01b84 	addi	r3,r2,110
 8006d10:	294b883a 	add	r5,r5,r5
 8006d14:	003f7b06 	br	8006b04 <__alt_data_end+0xfc006b04>
 8006d18:	9c000217 	ldw	r16,8(r19)
 8006d1c:	00bfff04 	movi	r2,-4
 8006d20:	80c00117 	ldw	r3,4(r16)
 8006d24:	1886703a 	and	r3,r3,r2
 8006d28:	003f5306 	br	8006a78 <__alt_data_end+0xfc006a78>
 8006d2c:	3083ffcc 	andi	r2,r6,4095
 8006d30:	103f181e 	bne	r2,zero,8006994 <__alt_data_end+0xfc006994>
 8006d34:	99000217 	ldw	r4,8(r19)
 8006d38:	b545883a 	add	r2,r22,r21
 8006d3c:	10800054 	ori	r2,r2,1
 8006d40:	20800115 	stw	r2,4(r4)
 8006d44:	003f3e06 	br	8006a40 <__alt_data_end+0xfc006a40>
 8006d48:	01003f84 	movi	r4,254
 8006d4c:	02001fc4 	movi	r8,127
 8006d50:	01c01f84 	movi	r7,126
 8006d54:	003e4006 	br	8006658 <__alt_data_end+0xfc006658>
 8006d58:	00820074 	movhi	r2,2049
 8006d5c:	10896504 	addi	r2,r2,9620
 8006d60:	15000015 	stw	r20,0(r2)
 8006d64:	003f1106 	br	80069ac <__alt_data_end+0xfc0069ac>
 8006d68:	00800044 	movi	r2,1
 8006d6c:	002b883a 	mov	r21,zero
 8006d70:	003f1f06 	br	80069f0 <__alt_data_end+0xfc0069f0>
 8006d74:	81400204 	addi	r5,r16,8
 8006d78:	9009883a 	mov	r4,r18
 8006d7c:	80059e80 	call	80059e8 <_free_r>
 8006d80:	00820074 	movhi	r2,2049
 8006d84:	108c2f04 	addi	r2,r2,12476
 8006d88:	10c00017 	ldw	r3,0(r2)
 8006d8c:	003f2c06 	br	8006a40 <__alt_data_end+0xfc006a40>
 8006d90:	00c05504 	movi	r3,340
 8006d94:	18800536 	bltu	r3,r2,8006dac <_malloc_r+0x7cc>
 8006d98:	3804d3fa 	srli	r2,r7,15
 8006d9c:	11401e04 	addi	r5,r2,120
 8006da0:	10c01dc4 	addi	r3,r2,119
 8006da4:	294b883a 	add	r5,r5,r5
 8006da8:	003f5606 	br	8006b04 <__alt_data_end+0xfc006b04>
 8006dac:	00c15504 	movi	r3,1364
 8006db0:	18800536 	bltu	r3,r2,8006dc8 <_malloc_r+0x7e8>
 8006db4:	3804d4ba 	srli	r2,r7,18
 8006db8:	11401f44 	addi	r5,r2,125
 8006dbc:	10c01f04 	addi	r3,r2,124
 8006dc0:	294b883a 	add	r5,r5,r5
 8006dc4:	003f4f06 	br	8006b04 <__alt_data_end+0xfc006b04>
 8006dc8:	01403f84 	movi	r5,254
 8006dcc:	00c01f84 	movi	r3,126
 8006dd0:	003f4c06 	br	8006b04 <__alt_data_end+0xfc006b04>
 8006dd4:	98800117 	ldw	r2,4(r19)
 8006dd8:	003fa006 	br	8006c5c <__alt_data_end+0xfc006c5c>
 8006ddc:	8808d0fa 	srli	r4,r17,3
 8006de0:	20800044 	addi	r2,r4,1
 8006de4:	1085883a 	add	r2,r2,r2
 8006de8:	003e9006 	br	800682c <__alt_data_end+0xfc00682c>

08006dec <memchr>:
 8006dec:	208000cc 	andi	r2,r4,3
 8006df0:	280f883a 	mov	r7,r5
 8006df4:	10003426 	beq	r2,zero,8006ec8 <memchr+0xdc>
 8006df8:	30bfffc4 	addi	r2,r6,-1
 8006dfc:	30001a26 	beq	r6,zero,8006e68 <memchr+0x7c>
 8006e00:	20c00003 	ldbu	r3,0(r4)
 8006e04:	29803fcc 	andi	r6,r5,255
 8006e08:	30c0051e 	bne	r6,r3,8006e20 <memchr+0x34>
 8006e0c:	00001806 	br	8006e70 <memchr+0x84>
 8006e10:	10001526 	beq	r2,zero,8006e68 <memchr+0x7c>
 8006e14:	20c00003 	ldbu	r3,0(r4)
 8006e18:	10bfffc4 	addi	r2,r2,-1
 8006e1c:	30c01426 	beq	r6,r3,8006e70 <memchr+0x84>
 8006e20:	21000044 	addi	r4,r4,1
 8006e24:	20c000cc 	andi	r3,r4,3
 8006e28:	183ff91e 	bne	r3,zero,8006e10 <__alt_data_end+0xfc006e10>
 8006e2c:	020000c4 	movi	r8,3
 8006e30:	40801136 	bltu	r8,r2,8006e78 <memchr+0x8c>
 8006e34:	10000c26 	beq	r2,zero,8006e68 <memchr+0x7c>
 8006e38:	20c00003 	ldbu	r3,0(r4)
 8006e3c:	29403fcc 	andi	r5,r5,255
 8006e40:	28c00b26 	beq	r5,r3,8006e70 <memchr+0x84>
 8006e44:	20c00044 	addi	r3,r4,1
 8006e48:	39803fcc 	andi	r6,r7,255
 8006e4c:	2089883a 	add	r4,r4,r2
 8006e50:	00000306 	br	8006e60 <memchr+0x74>
 8006e54:	18c00044 	addi	r3,r3,1
 8006e58:	197fffc3 	ldbu	r5,-1(r3)
 8006e5c:	31400526 	beq	r6,r5,8006e74 <memchr+0x88>
 8006e60:	1805883a 	mov	r2,r3
 8006e64:	20fffb1e 	bne	r4,r3,8006e54 <__alt_data_end+0xfc006e54>
 8006e68:	0005883a 	mov	r2,zero
 8006e6c:	f800283a 	ret
 8006e70:	2005883a 	mov	r2,r4
 8006e74:	f800283a 	ret
 8006e78:	28c03fcc 	andi	r3,r5,255
 8006e7c:	1812923a 	slli	r9,r3,8
 8006e80:	02ffbff4 	movhi	r11,65279
 8006e84:	02a02074 	movhi	r10,32897
 8006e88:	48d2b03a 	or	r9,r9,r3
 8006e8c:	4806943a 	slli	r3,r9,16
 8006e90:	5affbfc4 	addi	r11,r11,-257
 8006e94:	52a02004 	addi	r10,r10,-32640
 8006e98:	48d2b03a 	or	r9,r9,r3
 8006e9c:	20c00017 	ldw	r3,0(r4)
 8006ea0:	48c6f03a 	xor	r3,r9,r3
 8006ea4:	1acd883a 	add	r6,r3,r11
 8006ea8:	00c6303a 	nor	r3,zero,r3
 8006eac:	30c6703a 	and	r3,r6,r3
 8006eb0:	1a86703a 	and	r3,r3,r10
 8006eb4:	183fe01e 	bne	r3,zero,8006e38 <__alt_data_end+0xfc006e38>
 8006eb8:	10bfff04 	addi	r2,r2,-4
 8006ebc:	21000104 	addi	r4,r4,4
 8006ec0:	40bff636 	bltu	r8,r2,8006e9c <__alt_data_end+0xfc006e9c>
 8006ec4:	003fdb06 	br	8006e34 <__alt_data_end+0xfc006e34>
 8006ec8:	3005883a 	mov	r2,r6
 8006ecc:	003fd706 	br	8006e2c <__alt_data_end+0xfc006e2c>

08006ed0 <memcpy>:
 8006ed0:	defffd04 	addi	sp,sp,-12
 8006ed4:	dfc00215 	stw	ra,8(sp)
 8006ed8:	dc400115 	stw	r17,4(sp)
 8006edc:	dc000015 	stw	r16,0(sp)
 8006ee0:	00c003c4 	movi	r3,15
 8006ee4:	2005883a 	mov	r2,r4
 8006ee8:	1980452e 	bgeu	r3,r6,8007000 <memcpy+0x130>
 8006eec:	2906b03a 	or	r3,r5,r4
 8006ef0:	18c000cc 	andi	r3,r3,3
 8006ef4:	1800441e 	bne	r3,zero,8007008 <memcpy+0x138>
 8006ef8:	347ffc04 	addi	r17,r6,-16
 8006efc:	8822d13a 	srli	r17,r17,4
 8006f00:	28c00104 	addi	r3,r5,4
 8006f04:	23400104 	addi	r13,r4,4
 8006f08:	8820913a 	slli	r16,r17,4
 8006f0c:	2b000204 	addi	r12,r5,8
 8006f10:	22c00204 	addi	r11,r4,8
 8006f14:	84000504 	addi	r16,r16,20
 8006f18:	2a800304 	addi	r10,r5,12
 8006f1c:	22400304 	addi	r9,r4,12
 8006f20:	2c21883a 	add	r16,r5,r16
 8006f24:	2811883a 	mov	r8,r5
 8006f28:	200f883a 	mov	r7,r4
 8006f2c:	41000017 	ldw	r4,0(r8)
 8006f30:	1fc00017 	ldw	ra,0(r3)
 8006f34:	63c00017 	ldw	r15,0(r12)
 8006f38:	39000015 	stw	r4,0(r7)
 8006f3c:	53800017 	ldw	r14,0(r10)
 8006f40:	6fc00015 	stw	ra,0(r13)
 8006f44:	5bc00015 	stw	r15,0(r11)
 8006f48:	4b800015 	stw	r14,0(r9)
 8006f4c:	18c00404 	addi	r3,r3,16
 8006f50:	39c00404 	addi	r7,r7,16
 8006f54:	42000404 	addi	r8,r8,16
 8006f58:	6b400404 	addi	r13,r13,16
 8006f5c:	63000404 	addi	r12,r12,16
 8006f60:	5ac00404 	addi	r11,r11,16
 8006f64:	52800404 	addi	r10,r10,16
 8006f68:	4a400404 	addi	r9,r9,16
 8006f6c:	1c3fef1e 	bne	r3,r16,8006f2c <__alt_data_end+0xfc006f2c>
 8006f70:	89c00044 	addi	r7,r17,1
 8006f74:	380e913a 	slli	r7,r7,4
 8006f78:	310003cc 	andi	r4,r6,15
 8006f7c:	02c000c4 	movi	r11,3
 8006f80:	11c7883a 	add	r3,r2,r7
 8006f84:	29cb883a 	add	r5,r5,r7
 8006f88:	5900212e 	bgeu	r11,r4,8007010 <memcpy+0x140>
 8006f8c:	1813883a 	mov	r9,r3
 8006f90:	2811883a 	mov	r8,r5
 8006f94:	200f883a 	mov	r7,r4
 8006f98:	42800017 	ldw	r10,0(r8)
 8006f9c:	4a400104 	addi	r9,r9,4
 8006fa0:	39ffff04 	addi	r7,r7,-4
 8006fa4:	4abfff15 	stw	r10,-4(r9)
 8006fa8:	42000104 	addi	r8,r8,4
 8006fac:	59fffa36 	bltu	r11,r7,8006f98 <__alt_data_end+0xfc006f98>
 8006fb0:	213fff04 	addi	r4,r4,-4
 8006fb4:	2008d0ba 	srli	r4,r4,2
 8006fb8:	318000cc 	andi	r6,r6,3
 8006fbc:	21000044 	addi	r4,r4,1
 8006fc0:	2109883a 	add	r4,r4,r4
 8006fc4:	2109883a 	add	r4,r4,r4
 8006fc8:	1907883a 	add	r3,r3,r4
 8006fcc:	290b883a 	add	r5,r5,r4
 8006fd0:	30000626 	beq	r6,zero,8006fec <memcpy+0x11c>
 8006fd4:	198d883a 	add	r6,r3,r6
 8006fd8:	29c00003 	ldbu	r7,0(r5)
 8006fdc:	18c00044 	addi	r3,r3,1
 8006fe0:	29400044 	addi	r5,r5,1
 8006fe4:	19ffffc5 	stb	r7,-1(r3)
 8006fe8:	19bffb1e 	bne	r3,r6,8006fd8 <__alt_data_end+0xfc006fd8>
 8006fec:	dfc00217 	ldw	ra,8(sp)
 8006ff0:	dc400117 	ldw	r17,4(sp)
 8006ff4:	dc000017 	ldw	r16,0(sp)
 8006ff8:	dec00304 	addi	sp,sp,12
 8006ffc:	f800283a 	ret
 8007000:	2007883a 	mov	r3,r4
 8007004:	003ff206 	br	8006fd0 <__alt_data_end+0xfc006fd0>
 8007008:	2007883a 	mov	r3,r4
 800700c:	003ff106 	br	8006fd4 <__alt_data_end+0xfc006fd4>
 8007010:	200d883a 	mov	r6,r4
 8007014:	003fee06 	br	8006fd0 <__alt_data_end+0xfc006fd0>

08007018 <memmove>:
 8007018:	2005883a 	mov	r2,r4
 800701c:	29000b2e 	bgeu	r5,r4,800704c <memmove+0x34>
 8007020:	298f883a 	add	r7,r5,r6
 8007024:	21c0092e 	bgeu	r4,r7,800704c <memmove+0x34>
 8007028:	2187883a 	add	r3,r4,r6
 800702c:	198bc83a 	sub	r5,r3,r6
 8007030:	30004826 	beq	r6,zero,8007154 <memmove+0x13c>
 8007034:	39ffffc4 	addi	r7,r7,-1
 8007038:	39000003 	ldbu	r4,0(r7)
 800703c:	18ffffc4 	addi	r3,r3,-1
 8007040:	19000005 	stb	r4,0(r3)
 8007044:	28fffb1e 	bne	r5,r3,8007034 <__alt_data_end+0xfc007034>
 8007048:	f800283a 	ret
 800704c:	00c003c4 	movi	r3,15
 8007050:	1980412e 	bgeu	r3,r6,8007158 <memmove+0x140>
 8007054:	2886b03a 	or	r3,r5,r2
 8007058:	18c000cc 	andi	r3,r3,3
 800705c:	1800401e 	bne	r3,zero,8007160 <memmove+0x148>
 8007060:	33fffc04 	addi	r15,r6,-16
 8007064:	781ed13a 	srli	r15,r15,4
 8007068:	28c00104 	addi	r3,r5,4
 800706c:	13400104 	addi	r13,r2,4
 8007070:	781c913a 	slli	r14,r15,4
 8007074:	2b000204 	addi	r12,r5,8
 8007078:	12c00204 	addi	r11,r2,8
 800707c:	73800504 	addi	r14,r14,20
 8007080:	2a800304 	addi	r10,r5,12
 8007084:	12400304 	addi	r9,r2,12
 8007088:	2b9d883a 	add	r14,r5,r14
 800708c:	2811883a 	mov	r8,r5
 8007090:	100f883a 	mov	r7,r2
 8007094:	41000017 	ldw	r4,0(r8)
 8007098:	39c00404 	addi	r7,r7,16
 800709c:	18c00404 	addi	r3,r3,16
 80070a0:	393ffc15 	stw	r4,-16(r7)
 80070a4:	193ffc17 	ldw	r4,-16(r3)
 80070a8:	6b400404 	addi	r13,r13,16
 80070ac:	5ac00404 	addi	r11,r11,16
 80070b0:	693ffc15 	stw	r4,-16(r13)
 80070b4:	61000017 	ldw	r4,0(r12)
 80070b8:	4a400404 	addi	r9,r9,16
 80070bc:	42000404 	addi	r8,r8,16
 80070c0:	593ffc15 	stw	r4,-16(r11)
 80070c4:	51000017 	ldw	r4,0(r10)
 80070c8:	63000404 	addi	r12,r12,16
 80070cc:	52800404 	addi	r10,r10,16
 80070d0:	493ffc15 	stw	r4,-16(r9)
 80070d4:	1bbfef1e 	bne	r3,r14,8007094 <__alt_data_end+0xfc007094>
 80070d8:	79000044 	addi	r4,r15,1
 80070dc:	2008913a 	slli	r4,r4,4
 80070e0:	328003cc 	andi	r10,r6,15
 80070e4:	02c000c4 	movi	r11,3
 80070e8:	1107883a 	add	r3,r2,r4
 80070ec:	290b883a 	add	r5,r5,r4
 80070f0:	5a801e2e 	bgeu	r11,r10,800716c <memmove+0x154>
 80070f4:	1813883a 	mov	r9,r3
 80070f8:	2811883a 	mov	r8,r5
 80070fc:	500f883a 	mov	r7,r10
 8007100:	41000017 	ldw	r4,0(r8)
 8007104:	4a400104 	addi	r9,r9,4
 8007108:	39ffff04 	addi	r7,r7,-4
 800710c:	493fff15 	stw	r4,-4(r9)
 8007110:	42000104 	addi	r8,r8,4
 8007114:	59fffa36 	bltu	r11,r7,8007100 <__alt_data_end+0xfc007100>
 8007118:	513fff04 	addi	r4,r10,-4
 800711c:	2008d0ba 	srli	r4,r4,2
 8007120:	318000cc 	andi	r6,r6,3
 8007124:	21000044 	addi	r4,r4,1
 8007128:	2109883a 	add	r4,r4,r4
 800712c:	2109883a 	add	r4,r4,r4
 8007130:	1907883a 	add	r3,r3,r4
 8007134:	290b883a 	add	r5,r5,r4
 8007138:	30000b26 	beq	r6,zero,8007168 <memmove+0x150>
 800713c:	198d883a 	add	r6,r3,r6
 8007140:	29c00003 	ldbu	r7,0(r5)
 8007144:	18c00044 	addi	r3,r3,1
 8007148:	29400044 	addi	r5,r5,1
 800714c:	19ffffc5 	stb	r7,-1(r3)
 8007150:	19bffb1e 	bne	r3,r6,8007140 <__alt_data_end+0xfc007140>
 8007154:	f800283a 	ret
 8007158:	1007883a 	mov	r3,r2
 800715c:	003ff606 	br	8007138 <__alt_data_end+0xfc007138>
 8007160:	1007883a 	mov	r3,r2
 8007164:	003ff506 	br	800713c <__alt_data_end+0xfc00713c>
 8007168:	f800283a 	ret
 800716c:	500d883a 	mov	r6,r10
 8007170:	003ff106 	br	8007138 <__alt_data_end+0xfc007138>

08007174 <memset>:
 8007174:	20c000cc 	andi	r3,r4,3
 8007178:	2005883a 	mov	r2,r4
 800717c:	18004426 	beq	r3,zero,8007290 <memset+0x11c>
 8007180:	31ffffc4 	addi	r7,r6,-1
 8007184:	30004026 	beq	r6,zero,8007288 <memset+0x114>
 8007188:	2813883a 	mov	r9,r5
 800718c:	200d883a 	mov	r6,r4
 8007190:	2007883a 	mov	r3,r4
 8007194:	00000406 	br	80071a8 <memset+0x34>
 8007198:	3a3fffc4 	addi	r8,r7,-1
 800719c:	31800044 	addi	r6,r6,1
 80071a0:	38003926 	beq	r7,zero,8007288 <memset+0x114>
 80071a4:	400f883a 	mov	r7,r8
 80071a8:	18c00044 	addi	r3,r3,1
 80071ac:	32400005 	stb	r9,0(r6)
 80071b0:	1a0000cc 	andi	r8,r3,3
 80071b4:	403ff81e 	bne	r8,zero,8007198 <__alt_data_end+0xfc007198>
 80071b8:	010000c4 	movi	r4,3
 80071bc:	21c02d2e 	bgeu	r4,r7,8007274 <memset+0x100>
 80071c0:	29003fcc 	andi	r4,r5,255
 80071c4:	200c923a 	slli	r6,r4,8
 80071c8:	3108b03a 	or	r4,r6,r4
 80071cc:	200c943a 	slli	r6,r4,16
 80071d0:	218cb03a 	or	r6,r4,r6
 80071d4:	010003c4 	movi	r4,15
 80071d8:	21c0182e 	bgeu	r4,r7,800723c <memset+0xc8>
 80071dc:	3b3ffc04 	addi	r12,r7,-16
 80071e0:	6018d13a 	srli	r12,r12,4
 80071e4:	1a000104 	addi	r8,r3,4
 80071e8:	1ac00204 	addi	r11,r3,8
 80071ec:	6008913a 	slli	r4,r12,4
 80071f0:	1a800304 	addi	r10,r3,12
 80071f4:	1813883a 	mov	r9,r3
 80071f8:	21000504 	addi	r4,r4,20
 80071fc:	1909883a 	add	r4,r3,r4
 8007200:	49800015 	stw	r6,0(r9)
 8007204:	41800015 	stw	r6,0(r8)
 8007208:	59800015 	stw	r6,0(r11)
 800720c:	51800015 	stw	r6,0(r10)
 8007210:	42000404 	addi	r8,r8,16
 8007214:	4a400404 	addi	r9,r9,16
 8007218:	5ac00404 	addi	r11,r11,16
 800721c:	52800404 	addi	r10,r10,16
 8007220:	413ff71e 	bne	r8,r4,8007200 <__alt_data_end+0xfc007200>
 8007224:	63000044 	addi	r12,r12,1
 8007228:	6018913a 	slli	r12,r12,4
 800722c:	39c003cc 	andi	r7,r7,15
 8007230:	010000c4 	movi	r4,3
 8007234:	1b07883a 	add	r3,r3,r12
 8007238:	21c00e2e 	bgeu	r4,r7,8007274 <memset+0x100>
 800723c:	1813883a 	mov	r9,r3
 8007240:	3811883a 	mov	r8,r7
 8007244:	010000c4 	movi	r4,3
 8007248:	49800015 	stw	r6,0(r9)
 800724c:	423fff04 	addi	r8,r8,-4
 8007250:	4a400104 	addi	r9,r9,4
 8007254:	223ffc36 	bltu	r4,r8,8007248 <__alt_data_end+0xfc007248>
 8007258:	393fff04 	addi	r4,r7,-4
 800725c:	2008d0ba 	srli	r4,r4,2
 8007260:	39c000cc 	andi	r7,r7,3
 8007264:	21000044 	addi	r4,r4,1
 8007268:	2109883a 	add	r4,r4,r4
 800726c:	2109883a 	add	r4,r4,r4
 8007270:	1907883a 	add	r3,r3,r4
 8007274:	38000526 	beq	r7,zero,800728c <memset+0x118>
 8007278:	19cf883a 	add	r7,r3,r7
 800727c:	19400005 	stb	r5,0(r3)
 8007280:	18c00044 	addi	r3,r3,1
 8007284:	38fffd1e 	bne	r7,r3,800727c <__alt_data_end+0xfc00727c>
 8007288:	f800283a 	ret
 800728c:	f800283a 	ret
 8007290:	2007883a 	mov	r3,r4
 8007294:	300f883a 	mov	r7,r6
 8007298:	003fc706 	br	80071b8 <__alt_data_end+0xfc0071b8>

0800729c <_Balloc>:
 800729c:	20801317 	ldw	r2,76(r4)
 80072a0:	defffc04 	addi	sp,sp,-16
 80072a4:	dc400115 	stw	r17,4(sp)
 80072a8:	dc000015 	stw	r16,0(sp)
 80072ac:	dfc00315 	stw	ra,12(sp)
 80072b0:	dc800215 	stw	r18,8(sp)
 80072b4:	2023883a 	mov	r17,r4
 80072b8:	2821883a 	mov	r16,r5
 80072bc:	10000f26 	beq	r2,zero,80072fc <_Balloc+0x60>
 80072c0:	8407883a 	add	r3,r16,r16
 80072c4:	18c7883a 	add	r3,r3,r3
 80072c8:	10c7883a 	add	r3,r2,r3
 80072cc:	18800017 	ldw	r2,0(r3)
 80072d0:	10001126 	beq	r2,zero,8007318 <_Balloc+0x7c>
 80072d4:	11000017 	ldw	r4,0(r2)
 80072d8:	19000015 	stw	r4,0(r3)
 80072dc:	10000415 	stw	zero,16(r2)
 80072e0:	10000315 	stw	zero,12(r2)
 80072e4:	dfc00317 	ldw	ra,12(sp)
 80072e8:	dc800217 	ldw	r18,8(sp)
 80072ec:	dc400117 	ldw	r17,4(sp)
 80072f0:	dc000017 	ldw	r16,0(sp)
 80072f4:	dec00404 	addi	sp,sp,16
 80072f8:	f800283a 	ret
 80072fc:	01800844 	movi	r6,33
 8007300:	01400104 	movi	r5,4
 8007304:	800a3440 	call	800a344 <_calloc_r>
 8007308:	88801315 	stw	r2,76(r17)
 800730c:	103fec1e 	bne	r2,zero,80072c0 <__alt_data_end+0xfc0072c0>
 8007310:	0005883a 	mov	r2,zero
 8007314:	003ff306 	br	80072e4 <__alt_data_end+0xfc0072e4>
 8007318:	01400044 	movi	r5,1
 800731c:	2c24983a 	sll	r18,r5,r16
 8007320:	8809883a 	mov	r4,r17
 8007324:	91800144 	addi	r6,r18,5
 8007328:	318d883a 	add	r6,r6,r6
 800732c:	318d883a 	add	r6,r6,r6
 8007330:	800a3440 	call	800a344 <_calloc_r>
 8007334:	103ff626 	beq	r2,zero,8007310 <__alt_data_end+0xfc007310>
 8007338:	14000115 	stw	r16,4(r2)
 800733c:	14800215 	stw	r18,8(r2)
 8007340:	003fe606 	br	80072dc <__alt_data_end+0xfc0072dc>

08007344 <_Bfree>:
 8007344:	28000826 	beq	r5,zero,8007368 <_Bfree+0x24>
 8007348:	28c00117 	ldw	r3,4(r5)
 800734c:	20801317 	ldw	r2,76(r4)
 8007350:	18c7883a 	add	r3,r3,r3
 8007354:	18c7883a 	add	r3,r3,r3
 8007358:	10c5883a 	add	r2,r2,r3
 800735c:	10c00017 	ldw	r3,0(r2)
 8007360:	28c00015 	stw	r3,0(r5)
 8007364:	11400015 	stw	r5,0(r2)
 8007368:	f800283a 	ret

0800736c <__multadd>:
 800736c:	defff704 	addi	sp,sp,-36
 8007370:	dc800215 	stw	r18,8(sp)
 8007374:	2c800417 	ldw	r18,16(r5)
 8007378:	dd800615 	stw	r22,24(sp)
 800737c:	dd400515 	stw	r21,20(sp)
 8007380:	dd000415 	stw	r20,16(sp)
 8007384:	dcc00315 	stw	r19,12(sp)
 8007388:	dc400115 	stw	r17,4(sp)
 800738c:	dc000015 	stw	r16,0(sp)
 8007390:	dfc00815 	stw	ra,32(sp)
 8007394:	ddc00715 	stw	r23,28(sp)
 8007398:	2827883a 	mov	r19,r5
 800739c:	2029883a 	mov	r20,r4
 80073a0:	3023883a 	mov	r17,r6
 80073a4:	3821883a 	mov	r16,r7
 80073a8:	2d400504 	addi	r21,r5,20
 80073ac:	002d883a 	mov	r22,zero
 80073b0:	adc00017 	ldw	r23,0(r21)
 80073b4:	880b883a 	mov	r5,r17
 80073b8:	ad400104 	addi	r21,r21,4
 80073bc:	b93fffcc 	andi	r4,r23,65535
 80073c0:	80012b40 	call	80012b4 <__mulsi3>
 80073c4:	b808d43a 	srli	r4,r23,16
 80073c8:	880b883a 	mov	r5,r17
 80073cc:	1421883a 	add	r16,r2,r16
 80073d0:	80012b40 	call	80012b4 <__mulsi3>
 80073d4:	800ed43a 	srli	r7,r16,16
 80073d8:	80ffffcc 	andi	r3,r16,65535
 80073dc:	b5800044 	addi	r22,r22,1
 80073e0:	11c5883a 	add	r2,r2,r7
 80073e4:	100e943a 	slli	r7,r2,16
 80073e8:	1020d43a 	srli	r16,r2,16
 80073ec:	38c7883a 	add	r3,r7,r3
 80073f0:	a8ffff15 	stw	r3,-4(r21)
 80073f4:	b4bfee16 	blt	r22,r18,80073b0 <__alt_data_end+0xfc0073b0>
 80073f8:	80000926 	beq	r16,zero,8007420 <__multadd+0xb4>
 80073fc:	98800217 	ldw	r2,8(r19)
 8007400:	9080130e 	bge	r18,r2,8007450 <__multadd+0xe4>
 8007404:	90800144 	addi	r2,r18,5
 8007408:	1085883a 	add	r2,r2,r2
 800740c:	1085883a 	add	r2,r2,r2
 8007410:	9885883a 	add	r2,r19,r2
 8007414:	14000015 	stw	r16,0(r2)
 8007418:	94800044 	addi	r18,r18,1
 800741c:	9c800415 	stw	r18,16(r19)
 8007420:	9805883a 	mov	r2,r19
 8007424:	dfc00817 	ldw	ra,32(sp)
 8007428:	ddc00717 	ldw	r23,28(sp)
 800742c:	dd800617 	ldw	r22,24(sp)
 8007430:	dd400517 	ldw	r21,20(sp)
 8007434:	dd000417 	ldw	r20,16(sp)
 8007438:	dcc00317 	ldw	r19,12(sp)
 800743c:	dc800217 	ldw	r18,8(sp)
 8007440:	dc400117 	ldw	r17,4(sp)
 8007444:	dc000017 	ldw	r16,0(sp)
 8007448:	dec00904 	addi	sp,sp,36
 800744c:	f800283a 	ret
 8007450:	99400117 	ldw	r5,4(r19)
 8007454:	a009883a 	mov	r4,r20
 8007458:	29400044 	addi	r5,r5,1
 800745c:	800729c0 	call	800729c <_Balloc>
 8007460:	99800417 	ldw	r6,16(r19)
 8007464:	99400304 	addi	r5,r19,12
 8007468:	11000304 	addi	r4,r2,12
 800746c:	31800084 	addi	r6,r6,2
 8007470:	318d883a 	add	r6,r6,r6
 8007474:	318d883a 	add	r6,r6,r6
 8007478:	1023883a 	mov	r17,r2
 800747c:	8006ed00 	call	8006ed0 <memcpy>
 8007480:	98000a26 	beq	r19,zero,80074ac <__multadd+0x140>
 8007484:	98c00117 	ldw	r3,4(r19)
 8007488:	a0801317 	ldw	r2,76(r20)
 800748c:	18c7883a 	add	r3,r3,r3
 8007490:	18c7883a 	add	r3,r3,r3
 8007494:	10c5883a 	add	r2,r2,r3
 8007498:	10c00017 	ldw	r3,0(r2)
 800749c:	98c00015 	stw	r3,0(r19)
 80074a0:	14c00015 	stw	r19,0(r2)
 80074a4:	8827883a 	mov	r19,r17
 80074a8:	003fd606 	br	8007404 <__alt_data_end+0xfc007404>
 80074ac:	8827883a 	mov	r19,r17
 80074b0:	003fd406 	br	8007404 <__alt_data_end+0xfc007404>

080074b4 <__s2b>:
 80074b4:	defff904 	addi	sp,sp,-28
 80074b8:	dc400115 	stw	r17,4(sp)
 80074bc:	dc000015 	stw	r16,0(sp)
 80074c0:	2023883a 	mov	r17,r4
 80074c4:	2821883a 	mov	r16,r5
 80074c8:	39000204 	addi	r4,r7,8
 80074cc:	01400244 	movi	r5,9
 80074d0:	dcc00315 	stw	r19,12(sp)
 80074d4:	dc800215 	stw	r18,8(sp)
 80074d8:	dfc00615 	stw	ra,24(sp)
 80074dc:	dd400515 	stw	r21,20(sp)
 80074e0:	dd000415 	stw	r20,16(sp)
 80074e4:	3825883a 	mov	r18,r7
 80074e8:	3027883a 	mov	r19,r6
 80074ec:	800b79c0 	call	800b79c <__divsi3>
 80074f0:	00c00044 	movi	r3,1
 80074f4:	000b883a 	mov	r5,zero
 80074f8:	1880030e 	bge	r3,r2,8007508 <__s2b+0x54>
 80074fc:	18c7883a 	add	r3,r3,r3
 8007500:	29400044 	addi	r5,r5,1
 8007504:	18bffd16 	blt	r3,r2,80074fc <__alt_data_end+0xfc0074fc>
 8007508:	8809883a 	mov	r4,r17
 800750c:	800729c0 	call	800729c <_Balloc>
 8007510:	d8c00717 	ldw	r3,28(sp)
 8007514:	10c00515 	stw	r3,20(r2)
 8007518:	00c00044 	movi	r3,1
 800751c:	10c00415 	stw	r3,16(r2)
 8007520:	00c00244 	movi	r3,9
 8007524:	1cc0210e 	bge	r3,r19,80075ac <__s2b+0xf8>
 8007528:	80eb883a 	add	r21,r16,r3
 800752c:	a829883a 	mov	r20,r21
 8007530:	84e1883a 	add	r16,r16,r19
 8007534:	a1c00007 	ldb	r7,0(r20)
 8007538:	01800284 	movi	r6,10
 800753c:	a5000044 	addi	r20,r20,1
 8007540:	100b883a 	mov	r5,r2
 8007544:	39fff404 	addi	r7,r7,-48
 8007548:	8809883a 	mov	r4,r17
 800754c:	800736c0 	call	800736c <__multadd>
 8007550:	a43ff81e 	bne	r20,r16,8007534 <__alt_data_end+0xfc007534>
 8007554:	ace1883a 	add	r16,r21,r19
 8007558:	843ffe04 	addi	r16,r16,-8
 800755c:	9c800a0e 	bge	r19,r18,8007588 <__s2b+0xd4>
 8007560:	94e5c83a 	sub	r18,r18,r19
 8007564:	84a5883a 	add	r18,r16,r18
 8007568:	81c00007 	ldb	r7,0(r16)
 800756c:	01800284 	movi	r6,10
 8007570:	84000044 	addi	r16,r16,1
 8007574:	100b883a 	mov	r5,r2
 8007578:	39fff404 	addi	r7,r7,-48
 800757c:	8809883a 	mov	r4,r17
 8007580:	800736c0 	call	800736c <__multadd>
 8007584:	84bff81e 	bne	r16,r18,8007568 <__alt_data_end+0xfc007568>
 8007588:	dfc00617 	ldw	ra,24(sp)
 800758c:	dd400517 	ldw	r21,20(sp)
 8007590:	dd000417 	ldw	r20,16(sp)
 8007594:	dcc00317 	ldw	r19,12(sp)
 8007598:	dc800217 	ldw	r18,8(sp)
 800759c:	dc400117 	ldw	r17,4(sp)
 80075a0:	dc000017 	ldw	r16,0(sp)
 80075a4:	dec00704 	addi	sp,sp,28
 80075a8:	f800283a 	ret
 80075ac:	84000284 	addi	r16,r16,10
 80075b0:	1827883a 	mov	r19,r3
 80075b4:	003fe906 	br	800755c <__alt_data_end+0xfc00755c>

080075b8 <__hi0bits>:
 80075b8:	20bfffec 	andhi	r2,r4,65535
 80075bc:	1000141e 	bne	r2,zero,8007610 <__hi0bits+0x58>
 80075c0:	2008943a 	slli	r4,r4,16
 80075c4:	00800404 	movi	r2,16
 80075c8:	20ffc02c 	andhi	r3,r4,65280
 80075cc:	1800021e 	bne	r3,zero,80075d8 <__hi0bits+0x20>
 80075d0:	2008923a 	slli	r4,r4,8
 80075d4:	10800204 	addi	r2,r2,8
 80075d8:	20fc002c 	andhi	r3,r4,61440
 80075dc:	1800021e 	bne	r3,zero,80075e8 <__hi0bits+0x30>
 80075e0:	2008913a 	slli	r4,r4,4
 80075e4:	10800104 	addi	r2,r2,4
 80075e8:	20f0002c 	andhi	r3,r4,49152
 80075ec:	1800031e 	bne	r3,zero,80075fc <__hi0bits+0x44>
 80075f0:	2109883a 	add	r4,r4,r4
 80075f4:	10800084 	addi	r2,r2,2
 80075f8:	2109883a 	add	r4,r4,r4
 80075fc:	20000316 	blt	r4,zero,800760c <__hi0bits+0x54>
 8007600:	2110002c 	andhi	r4,r4,16384
 8007604:	2000041e 	bne	r4,zero,8007618 <__hi0bits+0x60>
 8007608:	00800804 	movi	r2,32
 800760c:	f800283a 	ret
 8007610:	0005883a 	mov	r2,zero
 8007614:	003fec06 	br	80075c8 <__alt_data_end+0xfc0075c8>
 8007618:	10800044 	addi	r2,r2,1
 800761c:	f800283a 	ret

08007620 <__lo0bits>:
 8007620:	20c00017 	ldw	r3,0(r4)
 8007624:	188001cc 	andi	r2,r3,7
 8007628:	10000826 	beq	r2,zero,800764c <__lo0bits+0x2c>
 800762c:	1880004c 	andi	r2,r3,1
 8007630:	1000211e 	bne	r2,zero,80076b8 <__lo0bits+0x98>
 8007634:	1880008c 	andi	r2,r3,2
 8007638:	1000211e 	bne	r2,zero,80076c0 <__lo0bits+0xa0>
 800763c:	1806d0ba 	srli	r3,r3,2
 8007640:	00800084 	movi	r2,2
 8007644:	20c00015 	stw	r3,0(r4)
 8007648:	f800283a 	ret
 800764c:	18bfffcc 	andi	r2,r3,65535
 8007650:	10001326 	beq	r2,zero,80076a0 <__lo0bits+0x80>
 8007654:	0005883a 	mov	r2,zero
 8007658:	19403fcc 	andi	r5,r3,255
 800765c:	2800021e 	bne	r5,zero,8007668 <__lo0bits+0x48>
 8007660:	1806d23a 	srli	r3,r3,8
 8007664:	10800204 	addi	r2,r2,8
 8007668:	194003cc 	andi	r5,r3,15
 800766c:	2800021e 	bne	r5,zero,8007678 <__lo0bits+0x58>
 8007670:	1806d13a 	srli	r3,r3,4
 8007674:	10800104 	addi	r2,r2,4
 8007678:	194000cc 	andi	r5,r3,3
 800767c:	2800021e 	bne	r5,zero,8007688 <__lo0bits+0x68>
 8007680:	1806d0ba 	srli	r3,r3,2
 8007684:	10800084 	addi	r2,r2,2
 8007688:	1940004c 	andi	r5,r3,1
 800768c:	2800081e 	bne	r5,zero,80076b0 <__lo0bits+0x90>
 8007690:	1806d07a 	srli	r3,r3,1
 8007694:	1800051e 	bne	r3,zero,80076ac <__lo0bits+0x8c>
 8007698:	00800804 	movi	r2,32
 800769c:	f800283a 	ret
 80076a0:	1806d43a 	srli	r3,r3,16
 80076a4:	00800404 	movi	r2,16
 80076a8:	003feb06 	br	8007658 <__alt_data_end+0xfc007658>
 80076ac:	10800044 	addi	r2,r2,1
 80076b0:	20c00015 	stw	r3,0(r4)
 80076b4:	f800283a 	ret
 80076b8:	0005883a 	mov	r2,zero
 80076bc:	f800283a 	ret
 80076c0:	1806d07a 	srli	r3,r3,1
 80076c4:	00800044 	movi	r2,1
 80076c8:	20c00015 	stw	r3,0(r4)
 80076cc:	f800283a 	ret

080076d0 <__i2b>:
 80076d0:	defffd04 	addi	sp,sp,-12
 80076d4:	dc000015 	stw	r16,0(sp)
 80076d8:	04000044 	movi	r16,1
 80076dc:	dc400115 	stw	r17,4(sp)
 80076e0:	2823883a 	mov	r17,r5
 80076e4:	800b883a 	mov	r5,r16
 80076e8:	dfc00215 	stw	ra,8(sp)
 80076ec:	800729c0 	call	800729c <_Balloc>
 80076f0:	14400515 	stw	r17,20(r2)
 80076f4:	14000415 	stw	r16,16(r2)
 80076f8:	dfc00217 	ldw	ra,8(sp)
 80076fc:	dc400117 	ldw	r17,4(sp)
 8007700:	dc000017 	ldw	r16,0(sp)
 8007704:	dec00304 	addi	sp,sp,12
 8007708:	f800283a 	ret

0800770c <__multiply>:
 800770c:	deffef04 	addi	sp,sp,-68
 8007710:	dc400815 	stw	r17,32(sp)
 8007714:	dc000715 	stw	r16,28(sp)
 8007718:	34400417 	ldw	r17,16(r6)
 800771c:	2c000417 	ldw	r16,16(r5)
 8007720:	dd800d15 	stw	r22,52(sp)
 8007724:	dc800915 	stw	r18,36(sp)
 8007728:	dfc01015 	stw	ra,64(sp)
 800772c:	df000f15 	stw	fp,60(sp)
 8007730:	ddc00e15 	stw	r23,56(sp)
 8007734:	dd400c15 	stw	r21,48(sp)
 8007738:	dd000b15 	stw	r20,44(sp)
 800773c:	dcc00a15 	stw	r19,40(sp)
 8007740:	2825883a 	mov	r18,r5
 8007744:	302d883a 	mov	r22,r6
 8007748:	8440050e 	bge	r16,r17,8007760 <__multiply+0x54>
 800774c:	8007883a 	mov	r3,r16
 8007750:	3025883a 	mov	r18,r6
 8007754:	8821883a 	mov	r16,r17
 8007758:	282d883a 	mov	r22,r5
 800775c:	1823883a 	mov	r17,r3
 8007760:	90800217 	ldw	r2,8(r18)
 8007764:	8447883a 	add	r3,r16,r17
 8007768:	d8c00215 	stw	r3,8(sp)
 800776c:	91400117 	ldw	r5,4(r18)
 8007770:	10c0010e 	bge	r2,r3,8007778 <__multiply+0x6c>
 8007774:	29400044 	addi	r5,r5,1
 8007778:	800729c0 	call	800729c <_Balloc>
 800777c:	d8c00217 	ldw	r3,8(sp)
 8007780:	d8800615 	stw	r2,24(sp)
 8007784:	18eb883a 	add	r21,r3,r3
 8007788:	ad6b883a 	add	r21,r21,r21
 800778c:	10c00504 	addi	r3,r2,20
 8007790:	1d6b883a 	add	r21,r3,r21
 8007794:	d8c00115 	stw	r3,4(sp)
 8007798:	dd400315 	stw	r21,12(sp)
 800779c:	1805883a 	mov	r2,r3
 80077a0:	1d40042e 	bgeu	r3,r21,80077b4 <__multiply+0xa8>
 80077a4:	d8c00317 	ldw	r3,12(sp)
 80077a8:	10000015 	stw	zero,0(r2)
 80077ac:	10800104 	addi	r2,r2,4
 80077b0:	10fffc36 	bltu	r2,r3,80077a4 <__alt_data_end+0xfc0077a4>
 80077b4:	8c63883a 	add	r17,r17,r17
 80077b8:	b5800504 	addi	r22,r22,20
 80077bc:	8c63883a 	add	r17,r17,r17
 80077c0:	94800504 	addi	r18,r18,20
 80077c4:	8421883a 	add	r16,r16,r16
 80077c8:	b463883a 	add	r17,r22,r17
 80077cc:	8421883a 	add	r16,r16,r16
 80077d0:	dd800015 	stw	r22,0(sp)
 80077d4:	dc800415 	stw	r18,16(sp)
 80077d8:	dc400515 	stw	r17,20(sp)
 80077dc:	9429883a 	add	r20,r18,r16
 80077e0:	b4404f2e 	bgeu	r22,r17,8007920 <__multiply+0x214>
 80077e4:	d8c00017 	ldw	r3,0(sp)
 80077e8:	1c800017 	ldw	r18,0(r3)
 80077ec:	947fffcc 	andi	r17,r18,65535
 80077f0:	88001e26 	beq	r17,zero,800786c <__multiply+0x160>
 80077f4:	dd800117 	ldw	r22,4(sp)
 80077f8:	dd400417 	ldw	r21,16(sp)
 80077fc:	0027883a 	mov	r19,zero
 8007800:	ac800017 	ldw	r18,0(r21)
 8007804:	b4000017 	ldw	r16,0(r22)
 8007808:	880b883a 	mov	r5,r17
 800780c:	913fffcc 	andi	r4,r18,65535
 8007810:	80012b40 	call	80012b4 <__mulsi3>
 8007814:	9008d43a 	srli	r4,r18,16
 8007818:	84bfffcc 	andi	r18,r16,65535
 800781c:	1485883a 	add	r2,r2,r18
 8007820:	14e5883a 	add	r18,r2,r19
 8007824:	8020d43a 	srli	r16,r16,16
 8007828:	9026d43a 	srli	r19,r18,16
 800782c:	880b883a 	mov	r5,r17
 8007830:	80012b40 	call	80012b4 <__mulsi3>
 8007834:	1405883a 	add	r2,r2,r16
 8007838:	14e1883a 	add	r16,r2,r19
 800783c:	90ffffcc 	andi	r3,r18,65535
 8007840:	8024943a 	slli	r18,r16,16
 8007844:	ad400104 	addi	r21,r21,4
 8007848:	b005883a 	mov	r2,r22
 800784c:	90c6b03a 	or	r3,r18,r3
 8007850:	b0c00015 	stw	r3,0(r22)
 8007854:	8026d43a 	srli	r19,r16,16
 8007858:	b5800104 	addi	r22,r22,4
 800785c:	ad3fe836 	bltu	r21,r20,8007800 <__alt_data_end+0xfc007800>
 8007860:	d8c00017 	ldw	r3,0(sp)
 8007864:	14c00115 	stw	r19,4(r2)
 8007868:	1c800017 	ldw	r18,0(r3)
 800786c:	9024d43a 	srli	r18,r18,16
 8007870:	90002226 	beq	r18,zero,80078fc <__multiply+0x1f0>
 8007874:	d8c00117 	ldw	r3,4(sp)
 8007878:	dd800417 	ldw	r22,16(sp)
 800787c:	002f883a 	mov	r23,zero
 8007880:	1f000017 	ldw	fp,0(r3)
 8007884:	1823883a 	mov	r17,r3
 8007888:	182b883a 	mov	r21,r3
 800788c:	e021883a 	mov	r16,fp
 8007890:	00000106 	br	8007898 <__multiply+0x18c>
 8007894:	982b883a 	mov	r21,r19
 8007898:	b100000b 	ldhu	r4,0(r22)
 800789c:	8020d43a 	srli	r16,r16,16
 80078a0:	900b883a 	mov	r5,r18
 80078a4:	80012b40 	call	80012b4 <__mulsi3>
 80078a8:	1405883a 	add	r2,r2,r16
 80078ac:	15ef883a 	add	r23,r2,r23
 80078b0:	b804943a 	slli	r2,r23,16
 80078b4:	e0ffffcc 	andi	r3,fp,65535
 80078b8:	8c400104 	addi	r17,r17,4
 80078bc:	10c6b03a 	or	r3,r2,r3
 80078c0:	88ffff15 	stw	r3,-4(r17)
 80078c4:	b5800104 	addi	r22,r22,4
 80078c8:	b13fff17 	ldw	r4,-4(r22)
 80078cc:	acc00104 	addi	r19,r21,4
 80078d0:	900b883a 	mov	r5,r18
 80078d4:	2008d43a 	srli	r4,r4,16
 80078d8:	9c000017 	ldw	r16,0(r19)
 80078dc:	80012b40 	call	80012b4 <__mulsi3>
 80078e0:	b806d43a 	srli	r3,r23,16
 80078e4:	813fffcc 	andi	r4,r16,65535
 80078e8:	1105883a 	add	r2,r2,r4
 80078ec:	10f9883a 	add	fp,r2,r3
 80078f0:	e02ed43a 	srli	r23,fp,16
 80078f4:	b53fe736 	bltu	r22,r20,8007894 <__alt_data_end+0xfc007894>
 80078f8:	af000115 	stw	fp,4(r21)
 80078fc:	d8c00017 	ldw	r3,0(sp)
 8007900:	d9000517 	ldw	r4,20(sp)
 8007904:	18c00104 	addi	r3,r3,4
 8007908:	d8c00015 	stw	r3,0(sp)
 800790c:	d8c00117 	ldw	r3,4(sp)
 8007910:	18c00104 	addi	r3,r3,4
 8007914:	d8c00115 	stw	r3,4(sp)
 8007918:	d8c00017 	ldw	r3,0(sp)
 800791c:	193fb136 	bltu	r3,r4,80077e4 <__alt_data_end+0xfc0077e4>
 8007920:	d8c00217 	ldw	r3,8(sp)
 8007924:	00c00c0e 	bge	zero,r3,8007958 <__multiply+0x24c>
 8007928:	d8c00317 	ldw	r3,12(sp)
 800792c:	18bfff17 	ldw	r2,-4(r3)
 8007930:	1d7fff04 	addi	r21,r3,-4
 8007934:	10000326 	beq	r2,zero,8007944 <__multiply+0x238>
 8007938:	00000706 	br	8007958 <__multiply+0x24c>
 800793c:	a8800017 	ldw	r2,0(r21)
 8007940:	1000051e 	bne	r2,zero,8007958 <__multiply+0x24c>
 8007944:	d8c00217 	ldw	r3,8(sp)
 8007948:	ad7fff04 	addi	r21,r21,-4
 800794c:	18ffffc4 	addi	r3,r3,-1
 8007950:	d8c00215 	stw	r3,8(sp)
 8007954:	183ff91e 	bne	r3,zero,800793c <__alt_data_end+0xfc00793c>
 8007958:	d8c00617 	ldw	r3,24(sp)
 800795c:	d9000217 	ldw	r4,8(sp)
 8007960:	1805883a 	mov	r2,r3
 8007964:	19000415 	stw	r4,16(r3)
 8007968:	dfc01017 	ldw	ra,64(sp)
 800796c:	df000f17 	ldw	fp,60(sp)
 8007970:	ddc00e17 	ldw	r23,56(sp)
 8007974:	dd800d17 	ldw	r22,52(sp)
 8007978:	dd400c17 	ldw	r21,48(sp)
 800797c:	dd000b17 	ldw	r20,44(sp)
 8007980:	dcc00a17 	ldw	r19,40(sp)
 8007984:	dc800917 	ldw	r18,36(sp)
 8007988:	dc400817 	ldw	r17,32(sp)
 800798c:	dc000717 	ldw	r16,28(sp)
 8007990:	dec01104 	addi	sp,sp,68
 8007994:	f800283a 	ret

08007998 <__pow5mult>:
 8007998:	defffa04 	addi	sp,sp,-24
 800799c:	dcc00315 	stw	r19,12(sp)
 80079a0:	dc000015 	stw	r16,0(sp)
 80079a4:	dfc00515 	stw	ra,20(sp)
 80079a8:	dd000415 	stw	r20,16(sp)
 80079ac:	dc800215 	stw	r18,8(sp)
 80079b0:	dc400115 	stw	r17,4(sp)
 80079b4:	308000cc 	andi	r2,r6,3
 80079b8:	3021883a 	mov	r16,r6
 80079bc:	2027883a 	mov	r19,r4
 80079c0:	10002f1e 	bne	r2,zero,8007a80 <__pow5mult+0xe8>
 80079c4:	2825883a 	mov	r18,r5
 80079c8:	8021d0ba 	srai	r16,r16,2
 80079cc:	80001a26 	beq	r16,zero,8007a38 <__pow5mult+0xa0>
 80079d0:	9c401217 	ldw	r17,72(r19)
 80079d4:	8800061e 	bne	r17,zero,80079f0 <__pow5mult+0x58>
 80079d8:	00003406 	br	8007aac <__pow5mult+0x114>
 80079dc:	8021d07a 	srai	r16,r16,1
 80079e0:	80001526 	beq	r16,zero,8007a38 <__pow5mult+0xa0>
 80079e4:	88800017 	ldw	r2,0(r17)
 80079e8:	10001c26 	beq	r2,zero,8007a5c <__pow5mult+0xc4>
 80079ec:	1023883a 	mov	r17,r2
 80079f0:	8080004c 	andi	r2,r16,1
 80079f4:	103ff926 	beq	r2,zero,80079dc <__alt_data_end+0xfc0079dc>
 80079f8:	880d883a 	mov	r6,r17
 80079fc:	900b883a 	mov	r5,r18
 8007a00:	9809883a 	mov	r4,r19
 8007a04:	800770c0 	call	800770c <__multiply>
 8007a08:	90001b26 	beq	r18,zero,8007a78 <__pow5mult+0xe0>
 8007a0c:	91000117 	ldw	r4,4(r18)
 8007a10:	98c01317 	ldw	r3,76(r19)
 8007a14:	8021d07a 	srai	r16,r16,1
 8007a18:	2109883a 	add	r4,r4,r4
 8007a1c:	2109883a 	add	r4,r4,r4
 8007a20:	1907883a 	add	r3,r3,r4
 8007a24:	19000017 	ldw	r4,0(r3)
 8007a28:	91000015 	stw	r4,0(r18)
 8007a2c:	1c800015 	stw	r18,0(r3)
 8007a30:	1025883a 	mov	r18,r2
 8007a34:	803feb1e 	bne	r16,zero,80079e4 <__alt_data_end+0xfc0079e4>
 8007a38:	9005883a 	mov	r2,r18
 8007a3c:	dfc00517 	ldw	ra,20(sp)
 8007a40:	dd000417 	ldw	r20,16(sp)
 8007a44:	dcc00317 	ldw	r19,12(sp)
 8007a48:	dc800217 	ldw	r18,8(sp)
 8007a4c:	dc400117 	ldw	r17,4(sp)
 8007a50:	dc000017 	ldw	r16,0(sp)
 8007a54:	dec00604 	addi	sp,sp,24
 8007a58:	f800283a 	ret
 8007a5c:	880d883a 	mov	r6,r17
 8007a60:	880b883a 	mov	r5,r17
 8007a64:	9809883a 	mov	r4,r19
 8007a68:	800770c0 	call	800770c <__multiply>
 8007a6c:	88800015 	stw	r2,0(r17)
 8007a70:	10000015 	stw	zero,0(r2)
 8007a74:	003fdd06 	br	80079ec <__alt_data_end+0xfc0079ec>
 8007a78:	1025883a 	mov	r18,r2
 8007a7c:	003fd706 	br	80079dc <__alt_data_end+0xfc0079dc>
 8007a80:	10bfffc4 	addi	r2,r2,-1
 8007a84:	1085883a 	add	r2,r2,r2
 8007a88:	00c20074 	movhi	r3,2049
 8007a8c:	18c66204 	addi	r3,r3,6536
 8007a90:	1085883a 	add	r2,r2,r2
 8007a94:	1885883a 	add	r2,r3,r2
 8007a98:	11800017 	ldw	r6,0(r2)
 8007a9c:	000f883a 	mov	r7,zero
 8007aa0:	800736c0 	call	800736c <__multadd>
 8007aa4:	1025883a 	mov	r18,r2
 8007aa8:	003fc706 	br	80079c8 <__alt_data_end+0xfc0079c8>
 8007aac:	05000044 	movi	r20,1
 8007ab0:	a00b883a 	mov	r5,r20
 8007ab4:	9809883a 	mov	r4,r19
 8007ab8:	800729c0 	call	800729c <_Balloc>
 8007abc:	1023883a 	mov	r17,r2
 8007ac0:	00809c44 	movi	r2,625
 8007ac4:	88800515 	stw	r2,20(r17)
 8007ac8:	8d000415 	stw	r20,16(r17)
 8007acc:	9c401215 	stw	r17,72(r19)
 8007ad0:	88000015 	stw	zero,0(r17)
 8007ad4:	003fc606 	br	80079f0 <__alt_data_end+0xfc0079f0>

08007ad8 <__lshift>:
 8007ad8:	defff904 	addi	sp,sp,-28
 8007adc:	dd400515 	stw	r21,20(sp)
 8007ae0:	dcc00315 	stw	r19,12(sp)
 8007ae4:	302bd17a 	srai	r21,r6,5
 8007ae8:	2cc00417 	ldw	r19,16(r5)
 8007aec:	28800217 	ldw	r2,8(r5)
 8007af0:	dd000415 	stw	r20,16(sp)
 8007af4:	ace7883a 	add	r19,r21,r19
 8007af8:	dc800215 	stw	r18,8(sp)
 8007afc:	dc400115 	stw	r17,4(sp)
 8007b00:	dc000015 	stw	r16,0(sp)
 8007b04:	dfc00615 	stw	ra,24(sp)
 8007b08:	9c000044 	addi	r16,r19,1
 8007b0c:	2823883a 	mov	r17,r5
 8007b10:	3029883a 	mov	r20,r6
 8007b14:	2025883a 	mov	r18,r4
 8007b18:	29400117 	ldw	r5,4(r5)
 8007b1c:	1400030e 	bge	r2,r16,8007b2c <__lshift+0x54>
 8007b20:	1085883a 	add	r2,r2,r2
 8007b24:	29400044 	addi	r5,r5,1
 8007b28:	143ffd16 	blt	r2,r16,8007b20 <__alt_data_end+0xfc007b20>
 8007b2c:	9009883a 	mov	r4,r18
 8007b30:	800729c0 	call	800729c <_Balloc>
 8007b34:	10c00504 	addi	r3,r2,20
 8007b38:	0540070e 	bge	zero,r21,8007b58 <__lshift+0x80>
 8007b3c:	ad6b883a 	add	r21,r21,r21
 8007b40:	ad6b883a 	add	r21,r21,r21
 8007b44:	1809883a 	mov	r4,r3
 8007b48:	1d47883a 	add	r3,r3,r21
 8007b4c:	20000015 	stw	zero,0(r4)
 8007b50:	21000104 	addi	r4,r4,4
 8007b54:	193ffd1e 	bne	r3,r4,8007b4c <__alt_data_end+0xfc007b4c>
 8007b58:	8a000417 	ldw	r8,16(r17)
 8007b5c:	89000504 	addi	r4,r17,20
 8007b60:	a18007cc 	andi	r6,r20,31
 8007b64:	4211883a 	add	r8,r8,r8
 8007b68:	4211883a 	add	r8,r8,r8
 8007b6c:	2211883a 	add	r8,r4,r8
 8007b70:	30002326 	beq	r6,zero,8007c00 <__lshift+0x128>
 8007b74:	02400804 	movi	r9,32
 8007b78:	4993c83a 	sub	r9,r9,r6
 8007b7c:	000b883a 	mov	r5,zero
 8007b80:	21c00017 	ldw	r7,0(r4)
 8007b84:	1815883a 	mov	r10,r3
 8007b88:	18c00104 	addi	r3,r3,4
 8007b8c:	398e983a 	sll	r7,r7,r6
 8007b90:	21000104 	addi	r4,r4,4
 8007b94:	394ab03a 	or	r5,r7,r5
 8007b98:	197fff15 	stw	r5,-4(r3)
 8007b9c:	217fff17 	ldw	r5,-4(r4)
 8007ba0:	2a4ad83a 	srl	r5,r5,r9
 8007ba4:	223ff636 	bltu	r4,r8,8007b80 <__alt_data_end+0xfc007b80>
 8007ba8:	51400115 	stw	r5,4(r10)
 8007bac:	28001a1e 	bne	r5,zero,8007c18 <__lshift+0x140>
 8007bb0:	843fffc4 	addi	r16,r16,-1
 8007bb4:	14000415 	stw	r16,16(r2)
 8007bb8:	88000826 	beq	r17,zero,8007bdc <__lshift+0x104>
 8007bbc:	89000117 	ldw	r4,4(r17)
 8007bc0:	90c01317 	ldw	r3,76(r18)
 8007bc4:	2109883a 	add	r4,r4,r4
 8007bc8:	2109883a 	add	r4,r4,r4
 8007bcc:	1907883a 	add	r3,r3,r4
 8007bd0:	19000017 	ldw	r4,0(r3)
 8007bd4:	89000015 	stw	r4,0(r17)
 8007bd8:	1c400015 	stw	r17,0(r3)
 8007bdc:	dfc00617 	ldw	ra,24(sp)
 8007be0:	dd400517 	ldw	r21,20(sp)
 8007be4:	dd000417 	ldw	r20,16(sp)
 8007be8:	dcc00317 	ldw	r19,12(sp)
 8007bec:	dc800217 	ldw	r18,8(sp)
 8007bf0:	dc400117 	ldw	r17,4(sp)
 8007bf4:	dc000017 	ldw	r16,0(sp)
 8007bf8:	dec00704 	addi	sp,sp,28
 8007bfc:	f800283a 	ret
 8007c00:	21400017 	ldw	r5,0(r4)
 8007c04:	18c00104 	addi	r3,r3,4
 8007c08:	21000104 	addi	r4,r4,4
 8007c0c:	197fff15 	stw	r5,-4(r3)
 8007c10:	223ffb36 	bltu	r4,r8,8007c00 <__alt_data_end+0xfc007c00>
 8007c14:	003fe606 	br	8007bb0 <__alt_data_end+0xfc007bb0>
 8007c18:	9c000084 	addi	r16,r19,2
 8007c1c:	003fe406 	br	8007bb0 <__alt_data_end+0xfc007bb0>

08007c20 <__mcmp>:
 8007c20:	20800417 	ldw	r2,16(r4)
 8007c24:	28c00417 	ldw	r3,16(r5)
 8007c28:	10c5c83a 	sub	r2,r2,r3
 8007c2c:	1000111e 	bne	r2,zero,8007c74 <__mcmp+0x54>
 8007c30:	18c7883a 	add	r3,r3,r3
 8007c34:	18c7883a 	add	r3,r3,r3
 8007c38:	21000504 	addi	r4,r4,20
 8007c3c:	29400504 	addi	r5,r5,20
 8007c40:	20c5883a 	add	r2,r4,r3
 8007c44:	28cb883a 	add	r5,r5,r3
 8007c48:	00000106 	br	8007c50 <__mcmp+0x30>
 8007c4c:	20800a2e 	bgeu	r4,r2,8007c78 <__mcmp+0x58>
 8007c50:	10bfff04 	addi	r2,r2,-4
 8007c54:	297fff04 	addi	r5,r5,-4
 8007c58:	11800017 	ldw	r6,0(r2)
 8007c5c:	28c00017 	ldw	r3,0(r5)
 8007c60:	30fffa26 	beq	r6,r3,8007c4c <__alt_data_end+0xfc007c4c>
 8007c64:	30c00236 	bltu	r6,r3,8007c70 <__mcmp+0x50>
 8007c68:	00800044 	movi	r2,1
 8007c6c:	f800283a 	ret
 8007c70:	00bfffc4 	movi	r2,-1
 8007c74:	f800283a 	ret
 8007c78:	0005883a 	mov	r2,zero
 8007c7c:	f800283a 	ret

08007c80 <__mdiff>:
 8007c80:	28c00417 	ldw	r3,16(r5)
 8007c84:	30800417 	ldw	r2,16(r6)
 8007c88:	defffa04 	addi	sp,sp,-24
 8007c8c:	dcc00315 	stw	r19,12(sp)
 8007c90:	dc800215 	stw	r18,8(sp)
 8007c94:	dfc00515 	stw	ra,20(sp)
 8007c98:	dd000415 	stw	r20,16(sp)
 8007c9c:	dc400115 	stw	r17,4(sp)
 8007ca0:	dc000015 	stw	r16,0(sp)
 8007ca4:	1887c83a 	sub	r3,r3,r2
 8007ca8:	2825883a 	mov	r18,r5
 8007cac:	3027883a 	mov	r19,r6
 8007cb0:	1800141e 	bne	r3,zero,8007d04 <__mdiff+0x84>
 8007cb4:	1085883a 	add	r2,r2,r2
 8007cb8:	1085883a 	add	r2,r2,r2
 8007cbc:	2a000504 	addi	r8,r5,20
 8007cc0:	34000504 	addi	r16,r6,20
 8007cc4:	4087883a 	add	r3,r8,r2
 8007cc8:	8085883a 	add	r2,r16,r2
 8007ccc:	00000106 	br	8007cd4 <__mdiff+0x54>
 8007cd0:	40c0592e 	bgeu	r8,r3,8007e38 <__mdiff+0x1b8>
 8007cd4:	18ffff04 	addi	r3,r3,-4
 8007cd8:	10bfff04 	addi	r2,r2,-4
 8007cdc:	19c00017 	ldw	r7,0(r3)
 8007ce0:	11400017 	ldw	r5,0(r2)
 8007ce4:	397ffa26 	beq	r7,r5,8007cd0 <__alt_data_end+0xfc007cd0>
 8007ce8:	3940592e 	bgeu	r7,r5,8007e50 <__mdiff+0x1d0>
 8007cec:	9005883a 	mov	r2,r18
 8007cf0:	4023883a 	mov	r17,r8
 8007cf4:	9825883a 	mov	r18,r19
 8007cf8:	05000044 	movi	r20,1
 8007cfc:	1027883a 	mov	r19,r2
 8007d00:	00000406 	br	8007d14 <__mdiff+0x94>
 8007d04:	18005616 	blt	r3,zero,8007e60 <__mdiff+0x1e0>
 8007d08:	34400504 	addi	r17,r6,20
 8007d0c:	2c000504 	addi	r16,r5,20
 8007d10:	0029883a 	mov	r20,zero
 8007d14:	91400117 	ldw	r5,4(r18)
 8007d18:	800729c0 	call	800729c <_Balloc>
 8007d1c:	92400417 	ldw	r9,16(r18)
 8007d20:	9b000417 	ldw	r12,16(r19)
 8007d24:	12c00504 	addi	r11,r2,20
 8007d28:	4a51883a 	add	r8,r9,r9
 8007d2c:	6319883a 	add	r12,r12,r12
 8007d30:	4211883a 	add	r8,r8,r8
 8007d34:	6319883a 	add	r12,r12,r12
 8007d38:	15000315 	stw	r20,12(r2)
 8007d3c:	8211883a 	add	r8,r16,r8
 8007d40:	8b19883a 	add	r12,r17,r12
 8007d44:	0007883a 	mov	r3,zero
 8007d48:	81400017 	ldw	r5,0(r16)
 8007d4c:	89c00017 	ldw	r7,0(r17)
 8007d50:	59800104 	addi	r6,r11,4
 8007d54:	293fffcc 	andi	r4,r5,65535
 8007d58:	20c7883a 	add	r3,r4,r3
 8007d5c:	393fffcc 	andi	r4,r7,65535
 8007d60:	1909c83a 	sub	r4,r3,r4
 8007d64:	280ad43a 	srli	r5,r5,16
 8007d68:	380ed43a 	srli	r7,r7,16
 8007d6c:	2007d43a 	srai	r3,r4,16
 8007d70:	213fffcc 	andi	r4,r4,65535
 8007d74:	29cbc83a 	sub	r5,r5,r7
 8007d78:	28c7883a 	add	r3,r5,r3
 8007d7c:	180a943a 	slli	r5,r3,16
 8007d80:	8c400104 	addi	r17,r17,4
 8007d84:	84000104 	addi	r16,r16,4
 8007d88:	2908b03a 	or	r4,r5,r4
 8007d8c:	59000015 	stw	r4,0(r11)
 8007d90:	1807d43a 	srai	r3,r3,16
 8007d94:	3015883a 	mov	r10,r6
 8007d98:	3017883a 	mov	r11,r6
 8007d9c:	8b3fea36 	bltu	r17,r12,8007d48 <__alt_data_end+0xfc007d48>
 8007da0:	8200162e 	bgeu	r16,r8,8007dfc <__mdiff+0x17c>
 8007da4:	8017883a 	mov	r11,r16
 8007da8:	59400017 	ldw	r5,0(r11)
 8007dac:	31800104 	addi	r6,r6,4
 8007db0:	5ac00104 	addi	r11,r11,4
 8007db4:	293fffcc 	andi	r4,r5,65535
 8007db8:	20c7883a 	add	r3,r4,r3
 8007dbc:	280ed43a 	srli	r7,r5,16
 8007dc0:	180bd43a 	srai	r5,r3,16
 8007dc4:	193fffcc 	andi	r4,r3,65535
 8007dc8:	3947883a 	add	r3,r7,r5
 8007dcc:	180a943a 	slli	r5,r3,16
 8007dd0:	1807d43a 	srai	r3,r3,16
 8007dd4:	2908b03a 	or	r4,r5,r4
 8007dd8:	313fff15 	stw	r4,-4(r6)
 8007ddc:	5a3ff236 	bltu	r11,r8,8007da8 <__alt_data_end+0xfc007da8>
 8007de0:	0406303a 	nor	r3,zero,r16
 8007de4:	1a07883a 	add	r3,r3,r8
 8007de8:	1806d0ba 	srli	r3,r3,2
 8007dec:	18c00044 	addi	r3,r3,1
 8007df0:	18c7883a 	add	r3,r3,r3
 8007df4:	18c7883a 	add	r3,r3,r3
 8007df8:	50d5883a 	add	r10,r10,r3
 8007dfc:	50ffff04 	addi	r3,r10,-4
 8007e00:	2000041e 	bne	r4,zero,8007e14 <__mdiff+0x194>
 8007e04:	18ffff04 	addi	r3,r3,-4
 8007e08:	19000017 	ldw	r4,0(r3)
 8007e0c:	4a7fffc4 	addi	r9,r9,-1
 8007e10:	203ffc26 	beq	r4,zero,8007e04 <__alt_data_end+0xfc007e04>
 8007e14:	12400415 	stw	r9,16(r2)
 8007e18:	dfc00517 	ldw	ra,20(sp)
 8007e1c:	dd000417 	ldw	r20,16(sp)
 8007e20:	dcc00317 	ldw	r19,12(sp)
 8007e24:	dc800217 	ldw	r18,8(sp)
 8007e28:	dc400117 	ldw	r17,4(sp)
 8007e2c:	dc000017 	ldw	r16,0(sp)
 8007e30:	dec00604 	addi	sp,sp,24
 8007e34:	f800283a 	ret
 8007e38:	000b883a 	mov	r5,zero
 8007e3c:	800729c0 	call	800729c <_Balloc>
 8007e40:	00c00044 	movi	r3,1
 8007e44:	10c00415 	stw	r3,16(r2)
 8007e48:	10000515 	stw	zero,20(r2)
 8007e4c:	003ff206 	br	8007e18 <__alt_data_end+0xfc007e18>
 8007e50:	8023883a 	mov	r17,r16
 8007e54:	0029883a 	mov	r20,zero
 8007e58:	4021883a 	mov	r16,r8
 8007e5c:	003fad06 	br	8007d14 <__alt_data_end+0xfc007d14>
 8007e60:	9005883a 	mov	r2,r18
 8007e64:	94400504 	addi	r17,r18,20
 8007e68:	9c000504 	addi	r16,r19,20
 8007e6c:	9825883a 	mov	r18,r19
 8007e70:	05000044 	movi	r20,1
 8007e74:	1027883a 	mov	r19,r2
 8007e78:	003fa606 	br	8007d14 <__alt_data_end+0xfc007d14>

08007e7c <__ulp>:
 8007e7c:	295ffc2c 	andhi	r5,r5,32752
 8007e80:	00bf3034 	movhi	r2,64704
 8007e84:	2887883a 	add	r3,r5,r2
 8007e88:	00c0020e 	bge	zero,r3,8007e94 <__ulp+0x18>
 8007e8c:	0005883a 	mov	r2,zero
 8007e90:	f800283a 	ret
 8007e94:	00c7c83a 	sub	r3,zero,r3
 8007e98:	1807d53a 	srai	r3,r3,20
 8007e9c:	008004c4 	movi	r2,19
 8007ea0:	10c00b0e 	bge	r2,r3,8007ed0 <__ulp+0x54>
 8007ea4:	18bffb04 	addi	r2,r3,-20
 8007ea8:	01000784 	movi	r4,30
 8007eac:	0007883a 	mov	r3,zero
 8007eb0:	20800516 	blt	r4,r2,8007ec8 <__ulp+0x4c>
 8007eb4:	010007c4 	movi	r4,31
 8007eb8:	2089c83a 	sub	r4,r4,r2
 8007ebc:	00800044 	movi	r2,1
 8007ec0:	1104983a 	sll	r2,r2,r4
 8007ec4:	f800283a 	ret
 8007ec8:	00800044 	movi	r2,1
 8007ecc:	f800283a 	ret
 8007ed0:	01400234 	movhi	r5,8
 8007ed4:	28c7d83a 	sra	r3,r5,r3
 8007ed8:	0005883a 	mov	r2,zero
 8007edc:	f800283a 	ret

08007ee0 <__b2d>:
 8007ee0:	defffa04 	addi	sp,sp,-24
 8007ee4:	dc000015 	stw	r16,0(sp)
 8007ee8:	24000417 	ldw	r16,16(r4)
 8007eec:	dc400115 	stw	r17,4(sp)
 8007ef0:	24400504 	addi	r17,r4,20
 8007ef4:	8421883a 	add	r16,r16,r16
 8007ef8:	8421883a 	add	r16,r16,r16
 8007efc:	8c21883a 	add	r16,r17,r16
 8007f00:	dc800215 	stw	r18,8(sp)
 8007f04:	84bfff17 	ldw	r18,-4(r16)
 8007f08:	dd000415 	stw	r20,16(sp)
 8007f0c:	dcc00315 	stw	r19,12(sp)
 8007f10:	9009883a 	mov	r4,r18
 8007f14:	2829883a 	mov	r20,r5
 8007f18:	dfc00515 	stw	ra,20(sp)
 8007f1c:	80075b80 	call	80075b8 <__hi0bits>
 8007f20:	00c00804 	movi	r3,32
 8007f24:	1889c83a 	sub	r4,r3,r2
 8007f28:	a1000015 	stw	r4,0(r20)
 8007f2c:	01000284 	movi	r4,10
 8007f30:	84ffff04 	addi	r19,r16,-4
 8007f34:	20801216 	blt	r4,r2,8007f80 <__b2d+0xa0>
 8007f38:	018002c4 	movi	r6,11
 8007f3c:	308dc83a 	sub	r6,r6,r2
 8007f40:	9186d83a 	srl	r3,r18,r6
 8007f44:	18cffc34 	orhi	r3,r3,16368
 8007f48:	8cc0212e 	bgeu	r17,r19,8007fd0 <__b2d+0xf0>
 8007f4c:	813ffe17 	ldw	r4,-8(r16)
 8007f50:	218cd83a 	srl	r6,r4,r6
 8007f54:	10800544 	addi	r2,r2,21
 8007f58:	9084983a 	sll	r2,r18,r2
 8007f5c:	1184b03a 	or	r2,r2,r6
 8007f60:	dfc00517 	ldw	ra,20(sp)
 8007f64:	dd000417 	ldw	r20,16(sp)
 8007f68:	dcc00317 	ldw	r19,12(sp)
 8007f6c:	dc800217 	ldw	r18,8(sp)
 8007f70:	dc400117 	ldw	r17,4(sp)
 8007f74:	dc000017 	ldw	r16,0(sp)
 8007f78:	dec00604 	addi	sp,sp,24
 8007f7c:	f800283a 	ret
 8007f80:	8cc00f2e 	bgeu	r17,r19,8007fc0 <__b2d+0xe0>
 8007f84:	117ffd44 	addi	r5,r2,-11
 8007f88:	80bffe17 	ldw	r2,-8(r16)
 8007f8c:	28000e26 	beq	r5,zero,8007fc8 <__b2d+0xe8>
 8007f90:	1949c83a 	sub	r4,r3,r5
 8007f94:	9164983a 	sll	r18,r18,r5
 8007f98:	1106d83a 	srl	r3,r2,r4
 8007f9c:	81bffe04 	addi	r6,r16,-8
 8007fa0:	948ffc34 	orhi	r18,r18,16368
 8007fa4:	90c6b03a 	or	r3,r18,r3
 8007fa8:	89800e2e 	bgeu	r17,r6,8007fe4 <__b2d+0x104>
 8007fac:	81bffd17 	ldw	r6,-12(r16)
 8007fb0:	1144983a 	sll	r2,r2,r5
 8007fb4:	310ad83a 	srl	r5,r6,r4
 8007fb8:	2884b03a 	or	r2,r5,r2
 8007fbc:	003fe806 	br	8007f60 <__alt_data_end+0xfc007f60>
 8007fc0:	10bffd44 	addi	r2,r2,-11
 8007fc4:	1000041e 	bne	r2,zero,8007fd8 <__b2d+0xf8>
 8007fc8:	90cffc34 	orhi	r3,r18,16368
 8007fcc:	003fe406 	br	8007f60 <__alt_data_end+0xfc007f60>
 8007fd0:	000d883a 	mov	r6,zero
 8007fd4:	003fdf06 	br	8007f54 <__alt_data_end+0xfc007f54>
 8007fd8:	90a4983a 	sll	r18,r18,r2
 8007fdc:	0005883a 	mov	r2,zero
 8007fe0:	003ff906 	br	8007fc8 <__alt_data_end+0xfc007fc8>
 8007fe4:	1144983a 	sll	r2,r2,r5
 8007fe8:	003fdd06 	br	8007f60 <__alt_data_end+0xfc007f60>

08007fec <__d2b>:
 8007fec:	defff804 	addi	sp,sp,-32
 8007ff0:	dc000215 	stw	r16,8(sp)
 8007ff4:	3021883a 	mov	r16,r6
 8007ff8:	dc400315 	stw	r17,12(sp)
 8007ffc:	8022907a 	slli	r17,r16,1
 8008000:	dd000615 	stw	r20,24(sp)
 8008004:	2829883a 	mov	r20,r5
 8008008:	01400044 	movi	r5,1
 800800c:	dcc00515 	stw	r19,20(sp)
 8008010:	dc800415 	stw	r18,16(sp)
 8008014:	dfc00715 	stw	ra,28(sp)
 8008018:	3825883a 	mov	r18,r7
 800801c:	8822d57a 	srli	r17,r17,21
 8008020:	800729c0 	call	800729c <_Balloc>
 8008024:	1027883a 	mov	r19,r2
 8008028:	00800434 	movhi	r2,16
 800802c:	10bfffc4 	addi	r2,r2,-1
 8008030:	808c703a 	and	r6,r16,r2
 8008034:	88000126 	beq	r17,zero,800803c <__d2b+0x50>
 8008038:	31800434 	orhi	r6,r6,16
 800803c:	d9800015 	stw	r6,0(sp)
 8008040:	a0002426 	beq	r20,zero,80080d4 <__d2b+0xe8>
 8008044:	d9000104 	addi	r4,sp,4
 8008048:	dd000115 	stw	r20,4(sp)
 800804c:	80076200 	call	8007620 <__lo0bits>
 8008050:	d8c00017 	ldw	r3,0(sp)
 8008054:	10002f1e 	bne	r2,zero,8008114 <__d2b+0x128>
 8008058:	d9000117 	ldw	r4,4(sp)
 800805c:	99000515 	stw	r4,20(r19)
 8008060:	1821003a 	cmpeq	r16,r3,zero
 8008064:	01000084 	movi	r4,2
 8008068:	2421c83a 	sub	r16,r4,r16
 800806c:	98c00615 	stw	r3,24(r19)
 8008070:	9c000415 	stw	r16,16(r19)
 8008074:	88001f1e 	bne	r17,zero,80080f4 <__d2b+0x108>
 8008078:	10bef384 	addi	r2,r2,-1074
 800807c:	90800015 	stw	r2,0(r18)
 8008080:	00900034 	movhi	r2,16384
 8008084:	10bfffc4 	addi	r2,r2,-1
 8008088:	8085883a 	add	r2,r16,r2
 800808c:	1085883a 	add	r2,r2,r2
 8008090:	1085883a 	add	r2,r2,r2
 8008094:	9885883a 	add	r2,r19,r2
 8008098:	11000517 	ldw	r4,20(r2)
 800809c:	8020917a 	slli	r16,r16,5
 80080a0:	80075b80 	call	80075b8 <__hi0bits>
 80080a4:	d8c00817 	ldw	r3,32(sp)
 80080a8:	8085c83a 	sub	r2,r16,r2
 80080ac:	18800015 	stw	r2,0(r3)
 80080b0:	9805883a 	mov	r2,r19
 80080b4:	dfc00717 	ldw	ra,28(sp)
 80080b8:	dd000617 	ldw	r20,24(sp)
 80080bc:	dcc00517 	ldw	r19,20(sp)
 80080c0:	dc800417 	ldw	r18,16(sp)
 80080c4:	dc400317 	ldw	r17,12(sp)
 80080c8:	dc000217 	ldw	r16,8(sp)
 80080cc:	dec00804 	addi	sp,sp,32
 80080d0:	f800283a 	ret
 80080d4:	d809883a 	mov	r4,sp
 80080d8:	80076200 	call	8007620 <__lo0bits>
 80080dc:	d8c00017 	ldw	r3,0(sp)
 80080e0:	04000044 	movi	r16,1
 80080e4:	9c000415 	stw	r16,16(r19)
 80080e8:	98c00515 	stw	r3,20(r19)
 80080ec:	10800804 	addi	r2,r2,32
 80080f0:	883fe126 	beq	r17,zero,8008078 <__alt_data_end+0xfc008078>
 80080f4:	00c00d44 	movi	r3,53
 80080f8:	8c7ef344 	addi	r17,r17,-1075
 80080fc:	88a3883a 	add	r17,r17,r2
 8008100:	1885c83a 	sub	r2,r3,r2
 8008104:	d8c00817 	ldw	r3,32(sp)
 8008108:	94400015 	stw	r17,0(r18)
 800810c:	18800015 	stw	r2,0(r3)
 8008110:	003fe706 	br	80080b0 <__alt_data_end+0xfc0080b0>
 8008114:	01000804 	movi	r4,32
 8008118:	2089c83a 	sub	r4,r4,r2
 800811c:	1908983a 	sll	r4,r3,r4
 8008120:	d9400117 	ldw	r5,4(sp)
 8008124:	1886d83a 	srl	r3,r3,r2
 8008128:	2148b03a 	or	r4,r4,r5
 800812c:	99000515 	stw	r4,20(r19)
 8008130:	d8c00015 	stw	r3,0(sp)
 8008134:	003fca06 	br	8008060 <__alt_data_end+0xfc008060>

08008138 <__ratio>:
 8008138:	defff904 	addi	sp,sp,-28
 800813c:	dc400315 	stw	r17,12(sp)
 8008140:	2823883a 	mov	r17,r5
 8008144:	d9400104 	addi	r5,sp,4
 8008148:	dfc00615 	stw	ra,24(sp)
 800814c:	dcc00515 	stw	r19,20(sp)
 8008150:	dc800415 	stw	r18,16(sp)
 8008154:	2027883a 	mov	r19,r4
 8008158:	dc000215 	stw	r16,8(sp)
 800815c:	8007ee00 	call	8007ee0 <__b2d>
 8008160:	d80b883a 	mov	r5,sp
 8008164:	8809883a 	mov	r4,r17
 8008168:	1025883a 	mov	r18,r2
 800816c:	1821883a 	mov	r16,r3
 8008170:	8007ee00 	call	8007ee0 <__b2d>
 8008174:	8a000417 	ldw	r8,16(r17)
 8008178:	99000417 	ldw	r4,16(r19)
 800817c:	d9400117 	ldw	r5,4(sp)
 8008180:	2209c83a 	sub	r4,r4,r8
 8008184:	2010917a 	slli	r8,r4,5
 8008188:	d9000017 	ldw	r4,0(sp)
 800818c:	2909c83a 	sub	r4,r5,r4
 8008190:	4109883a 	add	r4,r8,r4
 8008194:	01000e0e 	bge	zero,r4,80081d0 <__ratio+0x98>
 8008198:	2008953a 	slli	r4,r4,20
 800819c:	2421883a 	add	r16,r4,r16
 80081a0:	100d883a 	mov	r6,r2
 80081a4:	180f883a 	mov	r7,r3
 80081a8:	9009883a 	mov	r4,r18
 80081ac:	800b883a 	mov	r5,r16
 80081b0:	800c1fc0 	call	800c1fc <__divdf3>
 80081b4:	dfc00617 	ldw	ra,24(sp)
 80081b8:	dcc00517 	ldw	r19,20(sp)
 80081bc:	dc800417 	ldw	r18,16(sp)
 80081c0:	dc400317 	ldw	r17,12(sp)
 80081c4:	dc000217 	ldw	r16,8(sp)
 80081c8:	dec00704 	addi	sp,sp,28
 80081cc:	f800283a 	ret
 80081d0:	2008953a 	slli	r4,r4,20
 80081d4:	1907c83a 	sub	r3,r3,r4
 80081d8:	003ff106 	br	80081a0 <__alt_data_end+0xfc0081a0>

080081dc <_mprec_log10>:
 80081dc:	defffe04 	addi	sp,sp,-8
 80081e0:	dc000015 	stw	r16,0(sp)
 80081e4:	dfc00115 	stw	ra,4(sp)
 80081e8:	008005c4 	movi	r2,23
 80081ec:	2021883a 	mov	r16,r4
 80081f0:	11000d0e 	bge	r2,r4,8008228 <_mprec_log10+0x4c>
 80081f4:	0005883a 	mov	r2,zero
 80081f8:	00cffc34 	movhi	r3,16368
 80081fc:	843fffc4 	addi	r16,r16,-1
 8008200:	000d883a 	mov	r6,zero
 8008204:	01d00934 	movhi	r7,16420
 8008208:	1009883a 	mov	r4,r2
 800820c:	180b883a 	mov	r5,r3
 8008210:	800ce240 	call	800ce24 <__muldf3>
 8008214:	803ff91e 	bne	r16,zero,80081fc <__alt_data_end+0xfc0081fc>
 8008218:	dfc00117 	ldw	ra,4(sp)
 800821c:	dc000017 	ldw	r16,0(sp)
 8008220:	dec00204 	addi	sp,sp,8
 8008224:	f800283a 	ret
 8008228:	202090fa 	slli	r16,r4,3
 800822c:	00820074 	movhi	r2,2049
 8008230:	10867904 	addi	r2,r2,6628
 8008234:	1421883a 	add	r16,r2,r16
 8008238:	80800017 	ldw	r2,0(r16)
 800823c:	80c00117 	ldw	r3,4(r16)
 8008240:	dfc00117 	ldw	ra,4(sp)
 8008244:	dc000017 	ldw	r16,0(sp)
 8008248:	dec00204 	addi	sp,sp,8
 800824c:	f800283a 	ret

08008250 <__copybits>:
 8008250:	297fffc4 	addi	r5,r5,-1
 8008254:	280fd17a 	srai	r7,r5,5
 8008258:	30c00417 	ldw	r3,16(r6)
 800825c:	30800504 	addi	r2,r6,20
 8008260:	39c00044 	addi	r7,r7,1
 8008264:	18c7883a 	add	r3,r3,r3
 8008268:	39cf883a 	add	r7,r7,r7
 800826c:	18c7883a 	add	r3,r3,r3
 8008270:	39cf883a 	add	r7,r7,r7
 8008274:	10c7883a 	add	r3,r2,r3
 8008278:	21cf883a 	add	r7,r4,r7
 800827c:	10c00d2e 	bgeu	r2,r3,80082b4 <__copybits+0x64>
 8008280:	200b883a 	mov	r5,r4
 8008284:	12000017 	ldw	r8,0(r2)
 8008288:	29400104 	addi	r5,r5,4
 800828c:	10800104 	addi	r2,r2,4
 8008290:	2a3fff15 	stw	r8,-4(r5)
 8008294:	10fffb36 	bltu	r2,r3,8008284 <__alt_data_end+0xfc008284>
 8008298:	1985c83a 	sub	r2,r3,r6
 800829c:	10bffac4 	addi	r2,r2,-21
 80082a0:	1004d0ba 	srli	r2,r2,2
 80082a4:	10800044 	addi	r2,r2,1
 80082a8:	1085883a 	add	r2,r2,r2
 80082ac:	1085883a 	add	r2,r2,r2
 80082b0:	2089883a 	add	r4,r4,r2
 80082b4:	21c0032e 	bgeu	r4,r7,80082c4 <__copybits+0x74>
 80082b8:	20000015 	stw	zero,0(r4)
 80082bc:	21000104 	addi	r4,r4,4
 80082c0:	21fffd36 	bltu	r4,r7,80082b8 <__alt_data_end+0xfc0082b8>
 80082c4:	f800283a 	ret

080082c8 <__any_on>:
 80082c8:	20c00417 	ldw	r3,16(r4)
 80082cc:	2805d17a 	srai	r2,r5,5
 80082d0:	21000504 	addi	r4,r4,20
 80082d4:	18800d0e 	bge	r3,r2,800830c <__any_on+0x44>
 80082d8:	18c7883a 	add	r3,r3,r3
 80082dc:	18c7883a 	add	r3,r3,r3
 80082e0:	20c7883a 	add	r3,r4,r3
 80082e4:	20c0192e 	bgeu	r4,r3,800834c <__any_on+0x84>
 80082e8:	18bfff17 	ldw	r2,-4(r3)
 80082ec:	18ffff04 	addi	r3,r3,-4
 80082f0:	1000041e 	bne	r2,zero,8008304 <__any_on+0x3c>
 80082f4:	20c0142e 	bgeu	r4,r3,8008348 <__any_on+0x80>
 80082f8:	18ffff04 	addi	r3,r3,-4
 80082fc:	19400017 	ldw	r5,0(r3)
 8008300:	283ffc26 	beq	r5,zero,80082f4 <__alt_data_end+0xfc0082f4>
 8008304:	00800044 	movi	r2,1
 8008308:	f800283a 	ret
 800830c:	10c00a0e 	bge	r2,r3,8008338 <__any_on+0x70>
 8008310:	1085883a 	add	r2,r2,r2
 8008314:	1085883a 	add	r2,r2,r2
 8008318:	294007cc 	andi	r5,r5,31
 800831c:	2087883a 	add	r3,r4,r2
 8008320:	283ff026 	beq	r5,zero,80082e4 <__alt_data_end+0xfc0082e4>
 8008324:	19800017 	ldw	r6,0(r3)
 8008328:	3144d83a 	srl	r2,r6,r5
 800832c:	114a983a 	sll	r5,r2,r5
 8008330:	317ff41e 	bne	r6,r5,8008304 <__alt_data_end+0xfc008304>
 8008334:	003feb06 	br	80082e4 <__alt_data_end+0xfc0082e4>
 8008338:	1085883a 	add	r2,r2,r2
 800833c:	1085883a 	add	r2,r2,r2
 8008340:	2087883a 	add	r3,r4,r2
 8008344:	003fe706 	br	80082e4 <__alt_data_end+0xfc0082e4>
 8008348:	f800283a 	ret
 800834c:	0005883a 	mov	r2,zero
 8008350:	f800283a 	ret

08008354 <_realloc_r>:
 8008354:	defff604 	addi	sp,sp,-40
 8008358:	dc800215 	stw	r18,8(sp)
 800835c:	dfc00915 	stw	ra,36(sp)
 8008360:	df000815 	stw	fp,32(sp)
 8008364:	ddc00715 	stw	r23,28(sp)
 8008368:	dd800615 	stw	r22,24(sp)
 800836c:	dd400515 	stw	r21,20(sp)
 8008370:	dd000415 	stw	r20,16(sp)
 8008374:	dcc00315 	stw	r19,12(sp)
 8008378:	dc400115 	stw	r17,4(sp)
 800837c:	dc000015 	stw	r16,0(sp)
 8008380:	3025883a 	mov	r18,r6
 8008384:	2800b726 	beq	r5,zero,8008664 <_realloc_r+0x310>
 8008388:	282b883a 	mov	r21,r5
 800838c:	2029883a 	mov	r20,r4
 8008390:	800e7100 	call	800e710 <__malloc_lock>
 8008394:	a8bfff17 	ldw	r2,-4(r21)
 8008398:	043fff04 	movi	r16,-4
 800839c:	90c002c4 	addi	r3,r18,11
 80083a0:	01000584 	movi	r4,22
 80083a4:	acfffe04 	addi	r19,r21,-8
 80083a8:	1420703a 	and	r16,r2,r16
 80083ac:	20c0332e 	bgeu	r4,r3,800847c <_realloc_r+0x128>
 80083b0:	047ffe04 	movi	r17,-8
 80083b4:	1c62703a 	and	r17,r3,r17
 80083b8:	8807883a 	mov	r3,r17
 80083bc:	88005816 	blt	r17,zero,8008520 <_realloc_r+0x1cc>
 80083c0:	8c805736 	bltu	r17,r18,8008520 <_realloc_r+0x1cc>
 80083c4:	80c0300e 	bge	r16,r3,8008488 <_realloc_r+0x134>
 80083c8:	07020074 	movhi	fp,2049
 80083cc:	e707e804 	addi	fp,fp,8096
 80083d0:	e1c00217 	ldw	r7,8(fp)
 80083d4:	9c09883a 	add	r4,r19,r16
 80083d8:	22000117 	ldw	r8,4(r4)
 80083dc:	21c06326 	beq	r4,r7,800856c <_realloc_r+0x218>
 80083e0:	017fff84 	movi	r5,-2
 80083e4:	414a703a 	and	r5,r8,r5
 80083e8:	214b883a 	add	r5,r4,r5
 80083ec:	29800117 	ldw	r6,4(r5)
 80083f0:	3180004c 	andi	r6,r6,1
 80083f4:	30003f26 	beq	r6,zero,80084f4 <_realloc_r+0x1a0>
 80083f8:	1080004c 	andi	r2,r2,1
 80083fc:	10008326 	beq	r2,zero,800860c <_realloc_r+0x2b8>
 8008400:	900b883a 	mov	r5,r18
 8008404:	a009883a 	mov	r4,r20
 8008408:	80065e00 	call	80065e0 <_malloc_r>
 800840c:	1025883a 	mov	r18,r2
 8008410:	10011e26 	beq	r2,zero,800888c <_realloc_r+0x538>
 8008414:	a93fff17 	ldw	r4,-4(r21)
 8008418:	10fffe04 	addi	r3,r2,-8
 800841c:	00bfff84 	movi	r2,-2
 8008420:	2084703a 	and	r2,r4,r2
 8008424:	9885883a 	add	r2,r19,r2
 8008428:	1880ee26 	beq	r3,r2,80087e4 <_realloc_r+0x490>
 800842c:	81bfff04 	addi	r6,r16,-4
 8008430:	00800904 	movi	r2,36
 8008434:	1180b836 	bltu	r2,r6,8008718 <_realloc_r+0x3c4>
 8008438:	00c004c4 	movi	r3,19
 800843c:	19809636 	bltu	r3,r6,8008698 <_realloc_r+0x344>
 8008440:	9005883a 	mov	r2,r18
 8008444:	a807883a 	mov	r3,r21
 8008448:	19000017 	ldw	r4,0(r3)
 800844c:	11000015 	stw	r4,0(r2)
 8008450:	19000117 	ldw	r4,4(r3)
 8008454:	11000115 	stw	r4,4(r2)
 8008458:	18c00217 	ldw	r3,8(r3)
 800845c:	10c00215 	stw	r3,8(r2)
 8008460:	a80b883a 	mov	r5,r21
 8008464:	a009883a 	mov	r4,r20
 8008468:	80059e80 	call	80059e8 <_free_r>
 800846c:	a009883a 	mov	r4,r20
 8008470:	800e7340 	call	800e734 <__malloc_unlock>
 8008474:	9005883a 	mov	r2,r18
 8008478:	00001206 	br	80084c4 <_realloc_r+0x170>
 800847c:	00c00404 	movi	r3,16
 8008480:	1823883a 	mov	r17,r3
 8008484:	003fce06 	br	80083c0 <__alt_data_end+0xfc0083c0>
 8008488:	a825883a 	mov	r18,r21
 800848c:	8445c83a 	sub	r2,r16,r17
 8008490:	00c003c4 	movi	r3,15
 8008494:	18802636 	bltu	r3,r2,8008530 <_realloc_r+0x1dc>
 8008498:	99800117 	ldw	r6,4(r19)
 800849c:	9c07883a 	add	r3,r19,r16
 80084a0:	3180004c 	andi	r6,r6,1
 80084a4:	3420b03a 	or	r16,r6,r16
 80084a8:	9c000115 	stw	r16,4(r19)
 80084ac:	18800117 	ldw	r2,4(r3)
 80084b0:	10800054 	ori	r2,r2,1
 80084b4:	18800115 	stw	r2,4(r3)
 80084b8:	a009883a 	mov	r4,r20
 80084bc:	800e7340 	call	800e734 <__malloc_unlock>
 80084c0:	9005883a 	mov	r2,r18
 80084c4:	dfc00917 	ldw	ra,36(sp)
 80084c8:	df000817 	ldw	fp,32(sp)
 80084cc:	ddc00717 	ldw	r23,28(sp)
 80084d0:	dd800617 	ldw	r22,24(sp)
 80084d4:	dd400517 	ldw	r21,20(sp)
 80084d8:	dd000417 	ldw	r20,16(sp)
 80084dc:	dcc00317 	ldw	r19,12(sp)
 80084e0:	dc800217 	ldw	r18,8(sp)
 80084e4:	dc400117 	ldw	r17,4(sp)
 80084e8:	dc000017 	ldw	r16,0(sp)
 80084ec:	dec00a04 	addi	sp,sp,40
 80084f0:	f800283a 	ret
 80084f4:	017fff04 	movi	r5,-4
 80084f8:	414a703a 	and	r5,r8,r5
 80084fc:	814d883a 	add	r6,r16,r5
 8008500:	30c01f16 	blt	r6,r3,8008580 <_realloc_r+0x22c>
 8008504:	20800317 	ldw	r2,12(r4)
 8008508:	20c00217 	ldw	r3,8(r4)
 800850c:	a825883a 	mov	r18,r21
 8008510:	3021883a 	mov	r16,r6
 8008514:	18800315 	stw	r2,12(r3)
 8008518:	10c00215 	stw	r3,8(r2)
 800851c:	003fdb06 	br	800848c <__alt_data_end+0xfc00848c>
 8008520:	00800304 	movi	r2,12
 8008524:	a0800015 	stw	r2,0(r20)
 8008528:	0005883a 	mov	r2,zero
 800852c:	003fe506 	br	80084c4 <__alt_data_end+0xfc0084c4>
 8008530:	98c00117 	ldw	r3,4(r19)
 8008534:	9c4b883a 	add	r5,r19,r17
 8008538:	11000054 	ori	r4,r2,1
 800853c:	18c0004c 	andi	r3,r3,1
 8008540:	1c62b03a 	or	r17,r3,r17
 8008544:	9c400115 	stw	r17,4(r19)
 8008548:	29000115 	stw	r4,4(r5)
 800854c:	2885883a 	add	r2,r5,r2
 8008550:	10c00117 	ldw	r3,4(r2)
 8008554:	29400204 	addi	r5,r5,8
 8008558:	a009883a 	mov	r4,r20
 800855c:	18c00054 	ori	r3,r3,1
 8008560:	10c00115 	stw	r3,4(r2)
 8008564:	80059e80 	call	80059e8 <_free_r>
 8008568:	003fd306 	br	80084b8 <__alt_data_end+0xfc0084b8>
 800856c:	017fff04 	movi	r5,-4
 8008570:	414a703a 	and	r5,r8,r5
 8008574:	89800404 	addi	r6,r17,16
 8008578:	8151883a 	add	r8,r16,r5
 800857c:	4180590e 	bge	r8,r6,80086e4 <_realloc_r+0x390>
 8008580:	1080004c 	andi	r2,r2,1
 8008584:	103f9e1e 	bne	r2,zero,8008400 <__alt_data_end+0xfc008400>
 8008588:	adbffe17 	ldw	r22,-8(r21)
 800858c:	00bfff04 	movi	r2,-4
 8008590:	9dadc83a 	sub	r22,r19,r22
 8008594:	b1800117 	ldw	r6,4(r22)
 8008598:	3084703a 	and	r2,r6,r2
 800859c:	20002026 	beq	r4,zero,8008620 <_realloc_r+0x2cc>
 80085a0:	80af883a 	add	r23,r16,r2
 80085a4:	b96f883a 	add	r23,r23,r5
 80085a8:	21c05f26 	beq	r4,r7,8008728 <_realloc_r+0x3d4>
 80085ac:	b8c01c16 	blt	r23,r3,8008620 <_realloc_r+0x2cc>
 80085b0:	20800317 	ldw	r2,12(r4)
 80085b4:	20c00217 	ldw	r3,8(r4)
 80085b8:	81bfff04 	addi	r6,r16,-4
 80085bc:	01000904 	movi	r4,36
 80085c0:	18800315 	stw	r2,12(r3)
 80085c4:	10c00215 	stw	r3,8(r2)
 80085c8:	b0c00217 	ldw	r3,8(r22)
 80085cc:	b0800317 	ldw	r2,12(r22)
 80085d0:	b4800204 	addi	r18,r22,8
 80085d4:	18800315 	stw	r2,12(r3)
 80085d8:	10c00215 	stw	r3,8(r2)
 80085dc:	21801b36 	bltu	r4,r6,800864c <_realloc_r+0x2f8>
 80085e0:	008004c4 	movi	r2,19
 80085e4:	1180352e 	bgeu	r2,r6,80086bc <_realloc_r+0x368>
 80085e8:	a8800017 	ldw	r2,0(r21)
 80085ec:	b0800215 	stw	r2,8(r22)
 80085f0:	a8800117 	ldw	r2,4(r21)
 80085f4:	b0800315 	stw	r2,12(r22)
 80085f8:	008006c4 	movi	r2,27
 80085fc:	11807f36 	bltu	r2,r6,80087fc <_realloc_r+0x4a8>
 8008600:	b0800404 	addi	r2,r22,16
 8008604:	ad400204 	addi	r21,r21,8
 8008608:	00002d06 	br	80086c0 <_realloc_r+0x36c>
 800860c:	adbffe17 	ldw	r22,-8(r21)
 8008610:	00bfff04 	movi	r2,-4
 8008614:	9dadc83a 	sub	r22,r19,r22
 8008618:	b1000117 	ldw	r4,4(r22)
 800861c:	2084703a 	and	r2,r4,r2
 8008620:	b03f7726 	beq	r22,zero,8008400 <__alt_data_end+0xfc008400>
 8008624:	80af883a 	add	r23,r16,r2
 8008628:	b8ff7516 	blt	r23,r3,8008400 <__alt_data_end+0xfc008400>
 800862c:	b0800317 	ldw	r2,12(r22)
 8008630:	b0c00217 	ldw	r3,8(r22)
 8008634:	81bfff04 	addi	r6,r16,-4
 8008638:	01000904 	movi	r4,36
 800863c:	18800315 	stw	r2,12(r3)
 8008640:	10c00215 	stw	r3,8(r2)
 8008644:	b4800204 	addi	r18,r22,8
 8008648:	21bfe52e 	bgeu	r4,r6,80085e0 <__alt_data_end+0xfc0085e0>
 800864c:	a80b883a 	mov	r5,r21
 8008650:	9009883a 	mov	r4,r18
 8008654:	80070180 	call	8007018 <memmove>
 8008658:	b821883a 	mov	r16,r23
 800865c:	b027883a 	mov	r19,r22
 8008660:	003f8a06 	br	800848c <__alt_data_end+0xfc00848c>
 8008664:	300b883a 	mov	r5,r6
 8008668:	dfc00917 	ldw	ra,36(sp)
 800866c:	df000817 	ldw	fp,32(sp)
 8008670:	ddc00717 	ldw	r23,28(sp)
 8008674:	dd800617 	ldw	r22,24(sp)
 8008678:	dd400517 	ldw	r21,20(sp)
 800867c:	dd000417 	ldw	r20,16(sp)
 8008680:	dcc00317 	ldw	r19,12(sp)
 8008684:	dc800217 	ldw	r18,8(sp)
 8008688:	dc400117 	ldw	r17,4(sp)
 800868c:	dc000017 	ldw	r16,0(sp)
 8008690:	dec00a04 	addi	sp,sp,40
 8008694:	80065e01 	jmpi	80065e0 <_malloc_r>
 8008698:	a8c00017 	ldw	r3,0(r21)
 800869c:	90c00015 	stw	r3,0(r18)
 80086a0:	a8c00117 	ldw	r3,4(r21)
 80086a4:	90c00115 	stw	r3,4(r18)
 80086a8:	00c006c4 	movi	r3,27
 80086ac:	19804536 	bltu	r3,r6,80087c4 <_realloc_r+0x470>
 80086b0:	90800204 	addi	r2,r18,8
 80086b4:	a8c00204 	addi	r3,r21,8
 80086b8:	003f6306 	br	8008448 <__alt_data_end+0xfc008448>
 80086bc:	9005883a 	mov	r2,r18
 80086c0:	a8c00017 	ldw	r3,0(r21)
 80086c4:	b821883a 	mov	r16,r23
 80086c8:	b027883a 	mov	r19,r22
 80086cc:	10c00015 	stw	r3,0(r2)
 80086d0:	a8c00117 	ldw	r3,4(r21)
 80086d4:	10c00115 	stw	r3,4(r2)
 80086d8:	a8c00217 	ldw	r3,8(r21)
 80086dc:	10c00215 	stw	r3,8(r2)
 80086e0:	003f6a06 	br	800848c <__alt_data_end+0xfc00848c>
 80086e4:	9c67883a 	add	r19,r19,r17
 80086e8:	4445c83a 	sub	r2,r8,r17
 80086ec:	e4c00215 	stw	r19,8(fp)
 80086f0:	10800054 	ori	r2,r2,1
 80086f4:	98800115 	stw	r2,4(r19)
 80086f8:	a8bfff17 	ldw	r2,-4(r21)
 80086fc:	a009883a 	mov	r4,r20
 8008700:	1080004c 	andi	r2,r2,1
 8008704:	1462b03a 	or	r17,r2,r17
 8008708:	ac7fff15 	stw	r17,-4(r21)
 800870c:	800e7340 	call	800e734 <__malloc_unlock>
 8008710:	a805883a 	mov	r2,r21
 8008714:	003f6b06 	br	80084c4 <__alt_data_end+0xfc0084c4>
 8008718:	a80b883a 	mov	r5,r21
 800871c:	9009883a 	mov	r4,r18
 8008720:	80070180 	call	8007018 <memmove>
 8008724:	003f4e06 	br	8008460 <__alt_data_end+0xfc008460>
 8008728:	89000404 	addi	r4,r17,16
 800872c:	b93fbc16 	blt	r23,r4,8008620 <__alt_data_end+0xfc008620>
 8008730:	b0800317 	ldw	r2,12(r22)
 8008734:	b0c00217 	ldw	r3,8(r22)
 8008738:	81bfff04 	addi	r6,r16,-4
 800873c:	01000904 	movi	r4,36
 8008740:	18800315 	stw	r2,12(r3)
 8008744:	10c00215 	stw	r3,8(r2)
 8008748:	b4800204 	addi	r18,r22,8
 800874c:	21804336 	bltu	r4,r6,800885c <_realloc_r+0x508>
 8008750:	008004c4 	movi	r2,19
 8008754:	11803f2e 	bgeu	r2,r6,8008854 <_realloc_r+0x500>
 8008758:	a8800017 	ldw	r2,0(r21)
 800875c:	b0800215 	stw	r2,8(r22)
 8008760:	a8800117 	ldw	r2,4(r21)
 8008764:	b0800315 	stw	r2,12(r22)
 8008768:	008006c4 	movi	r2,27
 800876c:	11803f36 	bltu	r2,r6,800886c <_realloc_r+0x518>
 8008770:	b0800404 	addi	r2,r22,16
 8008774:	ad400204 	addi	r21,r21,8
 8008778:	a8c00017 	ldw	r3,0(r21)
 800877c:	10c00015 	stw	r3,0(r2)
 8008780:	a8c00117 	ldw	r3,4(r21)
 8008784:	10c00115 	stw	r3,4(r2)
 8008788:	a8c00217 	ldw	r3,8(r21)
 800878c:	10c00215 	stw	r3,8(r2)
 8008790:	b447883a 	add	r3,r22,r17
 8008794:	bc45c83a 	sub	r2,r23,r17
 8008798:	e0c00215 	stw	r3,8(fp)
 800879c:	10800054 	ori	r2,r2,1
 80087a0:	18800115 	stw	r2,4(r3)
 80087a4:	b0800117 	ldw	r2,4(r22)
 80087a8:	a009883a 	mov	r4,r20
 80087ac:	1080004c 	andi	r2,r2,1
 80087b0:	1462b03a 	or	r17,r2,r17
 80087b4:	b4400115 	stw	r17,4(r22)
 80087b8:	800e7340 	call	800e734 <__malloc_unlock>
 80087bc:	9005883a 	mov	r2,r18
 80087c0:	003f4006 	br	80084c4 <__alt_data_end+0xfc0084c4>
 80087c4:	a8c00217 	ldw	r3,8(r21)
 80087c8:	90c00215 	stw	r3,8(r18)
 80087cc:	a8c00317 	ldw	r3,12(r21)
 80087d0:	90c00315 	stw	r3,12(r18)
 80087d4:	30801126 	beq	r6,r2,800881c <_realloc_r+0x4c8>
 80087d8:	90800404 	addi	r2,r18,16
 80087dc:	a8c00404 	addi	r3,r21,16
 80087e0:	003f1906 	br	8008448 <__alt_data_end+0xfc008448>
 80087e4:	90ffff17 	ldw	r3,-4(r18)
 80087e8:	00bfff04 	movi	r2,-4
 80087ec:	a825883a 	mov	r18,r21
 80087f0:	1884703a 	and	r2,r3,r2
 80087f4:	80a1883a 	add	r16,r16,r2
 80087f8:	003f2406 	br	800848c <__alt_data_end+0xfc00848c>
 80087fc:	a8800217 	ldw	r2,8(r21)
 8008800:	b0800415 	stw	r2,16(r22)
 8008804:	a8800317 	ldw	r2,12(r21)
 8008808:	b0800515 	stw	r2,20(r22)
 800880c:	31000a26 	beq	r6,r4,8008838 <_realloc_r+0x4e4>
 8008810:	b0800604 	addi	r2,r22,24
 8008814:	ad400404 	addi	r21,r21,16
 8008818:	003fa906 	br	80086c0 <__alt_data_end+0xfc0086c0>
 800881c:	a9000417 	ldw	r4,16(r21)
 8008820:	90800604 	addi	r2,r18,24
 8008824:	a8c00604 	addi	r3,r21,24
 8008828:	91000415 	stw	r4,16(r18)
 800882c:	a9000517 	ldw	r4,20(r21)
 8008830:	91000515 	stw	r4,20(r18)
 8008834:	003f0406 	br	8008448 <__alt_data_end+0xfc008448>
 8008838:	a8c00417 	ldw	r3,16(r21)
 800883c:	ad400604 	addi	r21,r21,24
 8008840:	b0800804 	addi	r2,r22,32
 8008844:	b0c00615 	stw	r3,24(r22)
 8008848:	a8ffff17 	ldw	r3,-4(r21)
 800884c:	b0c00715 	stw	r3,28(r22)
 8008850:	003f9b06 	br	80086c0 <__alt_data_end+0xfc0086c0>
 8008854:	9005883a 	mov	r2,r18
 8008858:	003fc706 	br	8008778 <__alt_data_end+0xfc008778>
 800885c:	a80b883a 	mov	r5,r21
 8008860:	9009883a 	mov	r4,r18
 8008864:	80070180 	call	8007018 <memmove>
 8008868:	003fc906 	br	8008790 <__alt_data_end+0xfc008790>
 800886c:	a8800217 	ldw	r2,8(r21)
 8008870:	b0800415 	stw	r2,16(r22)
 8008874:	a8800317 	ldw	r2,12(r21)
 8008878:	b0800515 	stw	r2,20(r22)
 800887c:	31000726 	beq	r6,r4,800889c <_realloc_r+0x548>
 8008880:	b0800604 	addi	r2,r22,24
 8008884:	ad400404 	addi	r21,r21,16
 8008888:	003fbb06 	br	8008778 <__alt_data_end+0xfc008778>
 800888c:	a009883a 	mov	r4,r20
 8008890:	800e7340 	call	800e734 <__malloc_unlock>
 8008894:	0005883a 	mov	r2,zero
 8008898:	003f0a06 	br	80084c4 <__alt_data_end+0xfc0084c4>
 800889c:	a8c00417 	ldw	r3,16(r21)
 80088a0:	ad400604 	addi	r21,r21,24
 80088a4:	b0800804 	addi	r2,r22,32
 80088a8:	b0c00615 	stw	r3,24(r22)
 80088ac:	a8ffff17 	ldw	r3,-4(r21)
 80088b0:	b0c00715 	stw	r3,28(r22)
 80088b4:	003fb006 	br	8008778 <__alt_data_end+0xfc008778>

080088b8 <__fpclassifyd>:
 80088b8:	00a00034 	movhi	r2,32768
 80088bc:	10bfffc4 	addi	r2,r2,-1
 80088c0:	2884703a 	and	r2,r5,r2
 80088c4:	10000726 	beq	r2,zero,80088e4 <__fpclassifyd+0x2c>
 80088c8:	00fffc34 	movhi	r3,65520
 80088cc:	019ff834 	movhi	r6,32736
 80088d0:	28c7883a 	add	r3,r5,r3
 80088d4:	31bfffc4 	addi	r6,r6,-1
 80088d8:	30c00536 	bltu	r6,r3,80088f0 <__fpclassifyd+0x38>
 80088dc:	00800104 	movi	r2,4
 80088e0:	f800283a 	ret
 80088e4:	2000021e 	bne	r4,zero,80088f0 <__fpclassifyd+0x38>
 80088e8:	00800084 	movi	r2,2
 80088ec:	f800283a 	ret
 80088f0:	00dffc34 	movhi	r3,32752
 80088f4:	019ff834 	movhi	r6,32736
 80088f8:	28cb883a 	add	r5,r5,r3
 80088fc:	31bfffc4 	addi	r6,r6,-1
 8008900:	317ff62e 	bgeu	r6,r5,80088dc <__alt_data_end+0xfc0088dc>
 8008904:	01400434 	movhi	r5,16
 8008908:	297fffc4 	addi	r5,r5,-1
 800890c:	28800236 	bltu	r5,r2,8008918 <__fpclassifyd+0x60>
 8008910:	008000c4 	movi	r2,3
 8008914:	f800283a 	ret
 8008918:	10c00226 	beq	r2,r3,8008924 <__fpclassifyd+0x6c>
 800891c:	0005883a 	mov	r2,zero
 8008920:	f800283a 	ret
 8008924:	2005003a 	cmpeq	r2,r4,zero
 8008928:	f800283a 	ret

0800892c <_sbrk_r>:
 800892c:	defffd04 	addi	sp,sp,-12
 8008930:	dc000015 	stw	r16,0(sp)
 8008934:	04020074 	movhi	r16,2049
 8008938:	dc400115 	stw	r17,4(sp)
 800893c:	840c2904 	addi	r16,r16,12452
 8008940:	2023883a 	mov	r17,r4
 8008944:	2809883a 	mov	r4,r5
 8008948:	dfc00215 	stw	ra,8(sp)
 800894c:	80000015 	stw	zero,0(r16)
 8008950:	800e91c0 	call	800e91c <sbrk>
 8008954:	00ffffc4 	movi	r3,-1
 8008958:	10c00526 	beq	r2,r3,8008970 <_sbrk_r+0x44>
 800895c:	dfc00217 	ldw	ra,8(sp)
 8008960:	dc400117 	ldw	r17,4(sp)
 8008964:	dc000017 	ldw	r16,0(sp)
 8008968:	dec00304 	addi	sp,sp,12
 800896c:	f800283a 	ret
 8008970:	80c00017 	ldw	r3,0(r16)
 8008974:	183ff926 	beq	r3,zero,800895c <__alt_data_end+0xfc00895c>
 8008978:	88c00015 	stw	r3,0(r17)
 800897c:	003ff706 	br	800895c <__alt_data_end+0xfc00895c>

08008980 <__sread>:
 8008980:	defffe04 	addi	sp,sp,-8
 8008984:	dc000015 	stw	r16,0(sp)
 8008988:	2821883a 	mov	r16,r5
 800898c:	2940038f 	ldh	r5,14(r5)
 8008990:	dfc00115 	stw	ra,4(sp)
 8008994:	800a83c0 	call	800a83c <_read_r>
 8008998:	10000716 	blt	r2,zero,80089b8 <__sread+0x38>
 800899c:	80c01417 	ldw	r3,80(r16)
 80089a0:	1887883a 	add	r3,r3,r2
 80089a4:	80c01415 	stw	r3,80(r16)
 80089a8:	dfc00117 	ldw	ra,4(sp)
 80089ac:	dc000017 	ldw	r16,0(sp)
 80089b0:	dec00204 	addi	sp,sp,8
 80089b4:	f800283a 	ret
 80089b8:	80c0030b 	ldhu	r3,12(r16)
 80089bc:	18fbffcc 	andi	r3,r3,61439
 80089c0:	80c0030d 	sth	r3,12(r16)
 80089c4:	dfc00117 	ldw	ra,4(sp)
 80089c8:	dc000017 	ldw	r16,0(sp)
 80089cc:	dec00204 	addi	sp,sp,8
 80089d0:	f800283a 	ret

080089d4 <__seofread>:
 80089d4:	0005883a 	mov	r2,zero
 80089d8:	f800283a 	ret

080089dc <__swrite>:
 80089dc:	2880030b 	ldhu	r2,12(r5)
 80089e0:	defffb04 	addi	sp,sp,-20
 80089e4:	dcc00315 	stw	r19,12(sp)
 80089e8:	dc800215 	stw	r18,8(sp)
 80089ec:	dc400115 	stw	r17,4(sp)
 80089f0:	dc000015 	stw	r16,0(sp)
 80089f4:	dfc00415 	stw	ra,16(sp)
 80089f8:	10c0400c 	andi	r3,r2,256
 80089fc:	2821883a 	mov	r16,r5
 8008a00:	2023883a 	mov	r17,r4
 8008a04:	3025883a 	mov	r18,r6
 8008a08:	3827883a 	mov	r19,r7
 8008a0c:	18000526 	beq	r3,zero,8008a24 <__swrite+0x48>
 8008a10:	2940038f 	ldh	r5,14(r5)
 8008a14:	01c00084 	movi	r7,2
 8008a18:	000d883a 	mov	r6,zero
 8008a1c:	800a7dc0 	call	800a7dc <_lseek_r>
 8008a20:	8080030b 	ldhu	r2,12(r16)
 8008a24:	8140038f 	ldh	r5,14(r16)
 8008a28:	10bbffcc 	andi	r2,r2,61439
 8008a2c:	980f883a 	mov	r7,r19
 8008a30:	900d883a 	mov	r6,r18
 8008a34:	8809883a 	mov	r4,r17
 8008a38:	8080030d 	sth	r2,12(r16)
 8008a3c:	dfc00417 	ldw	ra,16(sp)
 8008a40:	dcc00317 	ldw	r19,12(sp)
 8008a44:	dc800217 	ldw	r18,8(sp)
 8008a48:	dc400117 	ldw	r17,4(sp)
 8008a4c:	dc000017 	ldw	r16,0(sp)
 8008a50:	dec00504 	addi	sp,sp,20
 8008a54:	800a2901 	jmpi	800a290 <_write_r>

08008a58 <__sseek>:
 8008a58:	defffe04 	addi	sp,sp,-8
 8008a5c:	dc000015 	stw	r16,0(sp)
 8008a60:	2821883a 	mov	r16,r5
 8008a64:	2940038f 	ldh	r5,14(r5)
 8008a68:	dfc00115 	stw	ra,4(sp)
 8008a6c:	800a7dc0 	call	800a7dc <_lseek_r>
 8008a70:	00ffffc4 	movi	r3,-1
 8008a74:	10c00826 	beq	r2,r3,8008a98 <__sseek+0x40>
 8008a78:	80c0030b 	ldhu	r3,12(r16)
 8008a7c:	80801415 	stw	r2,80(r16)
 8008a80:	18c40014 	ori	r3,r3,4096
 8008a84:	80c0030d 	sth	r3,12(r16)
 8008a88:	dfc00117 	ldw	ra,4(sp)
 8008a8c:	dc000017 	ldw	r16,0(sp)
 8008a90:	dec00204 	addi	sp,sp,8
 8008a94:	f800283a 	ret
 8008a98:	80c0030b 	ldhu	r3,12(r16)
 8008a9c:	18fbffcc 	andi	r3,r3,61439
 8008aa0:	80c0030d 	sth	r3,12(r16)
 8008aa4:	dfc00117 	ldw	ra,4(sp)
 8008aa8:	dc000017 	ldw	r16,0(sp)
 8008aac:	dec00204 	addi	sp,sp,8
 8008ab0:	f800283a 	ret

08008ab4 <__sclose>:
 8008ab4:	2940038f 	ldh	r5,14(r5)
 8008ab8:	800a2f01 	jmpi	800a2f0 <_close_r>

08008abc <strcmp>:
 8008abc:	2144b03a 	or	r2,r4,r5
 8008ac0:	108000cc 	andi	r2,r2,3
 8008ac4:	1000171e 	bne	r2,zero,8008b24 <strcmp+0x68>
 8008ac8:	20800017 	ldw	r2,0(r4)
 8008acc:	28c00017 	ldw	r3,0(r5)
 8008ad0:	10c0141e 	bne	r2,r3,8008b24 <strcmp+0x68>
 8008ad4:	027fbff4 	movhi	r9,65279
 8008ad8:	4a7fbfc4 	addi	r9,r9,-257
 8008adc:	0086303a 	nor	r3,zero,r2
 8008ae0:	02202074 	movhi	r8,32897
 8008ae4:	1245883a 	add	r2,r2,r9
 8008ae8:	42202004 	addi	r8,r8,-32640
 8008aec:	10c4703a 	and	r2,r2,r3
 8008af0:	1204703a 	and	r2,r2,r8
 8008af4:	10000226 	beq	r2,zero,8008b00 <strcmp+0x44>
 8008af8:	00002306 	br	8008b88 <strcmp+0xcc>
 8008afc:	1000221e 	bne	r2,zero,8008b88 <strcmp+0xcc>
 8008b00:	21000104 	addi	r4,r4,4
 8008b04:	20c00017 	ldw	r3,0(r4)
 8008b08:	29400104 	addi	r5,r5,4
 8008b0c:	29800017 	ldw	r6,0(r5)
 8008b10:	1a4f883a 	add	r7,r3,r9
 8008b14:	00c4303a 	nor	r2,zero,r3
 8008b18:	3884703a 	and	r2,r7,r2
 8008b1c:	1204703a 	and	r2,r2,r8
 8008b20:	19bff626 	beq	r3,r6,8008afc <__alt_data_end+0xfc008afc>
 8008b24:	20800003 	ldbu	r2,0(r4)
 8008b28:	10c03fcc 	andi	r3,r2,255
 8008b2c:	18c0201c 	xori	r3,r3,128
 8008b30:	18ffe004 	addi	r3,r3,-128
 8008b34:	18000c26 	beq	r3,zero,8008b68 <strcmp+0xac>
 8008b38:	29800007 	ldb	r6,0(r5)
 8008b3c:	19800326 	beq	r3,r6,8008b4c <strcmp+0x90>
 8008b40:	00001306 	br	8008b90 <strcmp+0xd4>
 8008b44:	29800007 	ldb	r6,0(r5)
 8008b48:	11800b1e 	bne	r2,r6,8008b78 <strcmp+0xbc>
 8008b4c:	21000044 	addi	r4,r4,1
 8008b50:	20c00003 	ldbu	r3,0(r4)
 8008b54:	29400044 	addi	r5,r5,1
 8008b58:	18803fcc 	andi	r2,r3,255
 8008b5c:	1080201c 	xori	r2,r2,128
 8008b60:	10bfe004 	addi	r2,r2,-128
 8008b64:	103ff71e 	bne	r2,zero,8008b44 <__alt_data_end+0xfc008b44>
 8008b68:	0007883a 	mov	r3,zero
 8008b6c:	28800003 	ldbu	r2,0(r5)
 8008b70:	1885c83a 	sub	r2,r3,r2
 8008b74:	f800283a 	ret
 8008b78:	28800003 	ldbu	r2,0(r5)
 8008b7c:	18c03fcc 	andi	r3,r3,255
 8008b80:	1885c83a 	sub	r2,r3,r2
 8008b84:	f800283a 	ret
 8008b88:	0005883a 	mov	r2,zero
 8008b8c:	f800283a 	ret
 8008b90:	10c03fcc 	andi	r3,r2,255
 8008b94:	003ff506 	br	8008b6c <__alt_data_end+0xfc008b6c>

08008b98 <__sprint_r.part.0>:
 8008b98:	28801917 	ldw	r2,100(r5)
 8008b9c:	defff604 	addi	sp,sp,-40
 8008ba0:	dd400515 	stw	r21,20(sp)
 8008ba4:	dfc00915 	stw	ra,36(sp)
 8008ba8:	df000815 	stw	fp,32(sp)
 8008bac:	ddc00715 	stw	r23,28(sp)
 8008bb0:	dd800615 	stw	r22,24(sp)
 8008bb4:	dd000415 	stw	r20,16(sp)
 8008bb8:	dcc00315 	stw	r19,12(sp)
 8008bbc:	dc800215 	stw	r18,8(sp)
 8008bc0:	dc400115 	stw	r17,4(sp)
 8008bc4:	dc000015 	stw	r16,0(sp)
 8008bc8:	1088000c 	andi	r2,r2,8192
 8008bcc:	302b883a 	mov	r21,r6
 8008bd0:	10002e26 	beq	r2,zero,8008c8c <__sprint_r.part.0+0xf4>
 8008bd4:	30800217 	ldw	r2,8(r6)
 8008bd8:	35800017 	ldw	r22,0(r6)
 8008bdc:	10002926 	beq	r2,zero,8008c84 <__sprint_r.part.0+0xec>
 8008be0:	2827883a 	mov	r19,r5
 8008be4:	2029883a 	mov	r20,r4
 8008be8:	b5c00104 	addi	r23,r22,4
 8008bec:	04bfffc4 	movi	r18,-1
 8008bf0:	bc400017 	ldw	r17,0(r23)
 8008bf4:	b4000017 	ldw	r16,0(r22)
 8008bf8:	0039883a 	mov	fp,zero
 8008bfc:	8822d0ba 	srli	r17,r17,2
 8008c00:	8800031e 	bne	r17,zero,8008c10 <__sprint_r.part.0+0x78>
 8008c04:	00001806 	br	8008c68 <__sprint_r.part.0+0xd0>
 8008c08:	84000104 	addi	r16,r16,4
 8008c0c:	8f001526 	beq	r17,fp,8008c64 <__sprint_r.part.0+0xcc>
 8008c10:	81400017 	ldw	r5,0(r16)
 8008c14:	980d883a 	mov	r6,r19
 8008c18:	a009883a 	mov	r4,r20
 8008c1c:	800a6880 	call	800a688 <_fputwc_r>
 8008c20:	e7000044 	addi	fp,fp,1
 8008c24:	14bff81e 	bne	r2,r18,8008c08 <__alt_data_end+0xfc008c08>
 8008c28:	9005883a 	mov	r2,r18
 8008c2c:	a8000215 	stw	zero,8(r21)
 8008c30:	a8000115 	stw	zero,4(r21)
 8008c34:	dfc00917 	ldw	ra,36(sp)
 8008c38:	df000817 	ldw	fp,32(sp)
 8008c3c:	ddc00717 	ldw	r23,28(sp)
 8008c40:	dd800617 	ldw	r22,24(sp)
 8008c44:	dd400517 	ldw	r21,20(sp)
 8008c48:	dd000417 	ldw	r20,16(sp)
 8008c4c:	dcc00317 	ldw	r19,12(sp)
 8008c50:	dc800217 	ldw	r18,8(sp)
 8008c54:	dc400117 	ldw	r17,4(sp)
 8008c58:	dc000017 	ldw	r16,0(sp)
 8008c5c:	dec00a04 	addi	sp,sp,40
 8008c60:	f800283a 	ret
 8008c64:	a8800217 	ldw	r2,8(r21)
 8008c68:	8c63883a 	add	r17,r17,r17
 8008c6c:	8c63883a 	add	r17,r17,r17
 8008c70:	1445c83a 	sub	r2,r2,r17
 8008c74:	a8800215 	stw	r2,8(r21)
 8008c78:	b5800204 	addi	r22,r22,8
 8008c7c:	bdc00204 	addi	r23,r23,8
 8008c80:	103fdb1e 	bne	r2,zero,8008bf0 <__alt_data_end+0xfc008bf0>
 8008c84:	0005883a 	mov	r2,zero
 8008c88:	003fe806 	br	8008c2c <__alt_data_end+0xfc008c2c>
 8008c8c:	8005cf80 	call	8005cf8 <__sfvwrite_r>
 8008c90:	003fe606 	br	8008c2c <__alt_data_end+0xfc008c2c>

08008c94 <__sprint_r>:
 8008c94:	30c00217 	ldw	r3,8(r6)
 8008c98:	18000126 	beq	r3,zero,8008ca0 <__sprint_r+0xc>
 8008c9c:	8008b981 	jmpi	8008b98 <__sprint_r.part.0>
 8008ca0:	30000115 	stw	zero,4(r6)
 8008ca4:	0005883a 	mov	r2,zero
 8008ca8:	f800283a 	ret

08008cac <___vfiprintf_internal_r>:
 8008cac:	deffca04 	addi	sp,sp,-216
 8008cb0:	dd403115 	stw	r21,196(sp)
 8008cb4:	dfc03515 	stw	ra,212(sp)
 8008cb8:	df003415 	stw	fp,208(sp)
 8008cbc:	ddc03315 	stw	r23,204(sp)
 8008cc0:	dd803215 	stw	r22,200(sp)
 8008cc4:	dd003015 	stw	r20,192(sp)
 8008cc8:	dcc02f15 	stw	r19,188(sp)
 8008ccc:	dc802e15 	stw	r18,184(sp)
 8008cd0:	dc402d15 	stw	r17,180(sp)
 8008cd4:	dc002c15 	stw	r16,176(sp)
 8008cd8:	d9002115 	stw	r4,132(sp)
 8008cdc:	d9402015 	stw	r5,128(sp)
 8008ce0:	d9c02215 	stw	r7,136(sp)
 8008ce4:	302b883a 	mov	r21,r6
 8008ce8:	20000226 	beq	r4,zero,8008cf4 <___vfiprintf_internal_r+0x48>
 8008cec:	20800e17 	ldw	r2,56(r4)
 8008cf0:	1000cf26 	beq	r2,zero,8009030 <___vfiprintf_internal_r+0x384>
 8008cf4:	d8c02017 	ldw	r3,128(sp)
 8008cf8:	1880030b 	ldhu	r2,12(r3)
 8008cfc:	10c8000c 	andi	r3,r2,8192
 8008d00:	1800071e 	bne	r3,zero,8008d20 <___vfiprintf_internal_r+0x74>
 8008d04:	d9402017 	ldw	r5,128(sp)
 8008d08:	00f7ffc4 	movi	r3,-8193
 8008d0c:	10880014 	ori	r2,r2,8192
 8008d10:	29001917 	ldw	r4,100(r5)
 8008d14:	2880030d 	sth	r2,12(r5)
 8008d18:	20c6703a 	and	r3,r4,r3
 8008d1c:	28c01915 	stw	r3,100(r5)
 8008d20:	10c0020c 	andi	r3,r2,8
 8008d24:	1800a526 	beq	r3,zero,8008fbc <___vfiprintf_internal_r+0x310>
 8008d28:	d9002017 	ldw	r4,128(sp)
 8008d2c:	20c00417 	ldw	r3,16(r4)
 8008d30:	1800a226 	beq	r3,zero,8008fbc <___vfiprintf_internal_r+0x310>
 8008d34:	1080068c 	andi	r2,r2,26
 8008d38:	00c00284 	movi	r3,10
 8008d3c:	10c0a826 	beq	r2,r3,8008fe0 <___vfiprintf_internal_r+0x334>
 8008d40:	d9001a04 	addi	r4,sp,104
 8008d44:	d94019c4 	addi	r5,sp,103
 8008d48:	04820074 	movhi	r18,2049
 8008d4c:	2145c83a 	sub	r2,r4,r5
 8008d50:	9486ab04 	addi	r18,r18,6828
 8008d54:	d9001e15 	stw	r4,120(sp)
 8008d58:	d9401f15 	stw	r5,124(sp)
 8008d5c:	dec01a15 	stw	sp,104(sp)
 8008d60:	d8001c15 	stw	zero,112(sp)
 8008d64:	d8001b15 	stw	zero,108(sp)
 8008d68:	d811883a 	mov	r8,sp
 8008d6c:	d8002615 	stw	zero,152(sp)
 8008d70:	d8002415 	stw	zero,144(sp)
 8008d74:	d8802815 	stw	r2,160(sp)
 8008d78:	a82d883a 	mov	r22,r21
 8008d7c:	b0800007 	ldb	r2,0(r22)
 8008d80:	10040d26 	beq	r2,zero,8009db8 <___vfiprintf_internal_r+0x110c>
 8008d84:	00c00944 	movi	r3,37
 8008d88:	b029883a 	mov	r20,r22
 8008d8c:	10c0021e 	bne	r2,r3,8008d98 <___vfiprintf_internal_r+0xec>
 8008d90:	00001606 	br	8008dec <___vfiprintf_internal_r+0x140>
 8008d94:	10c00326 	beq	r2,r3,8008da4 <___vfiprintf_internal_r+0xf8>
 8008d98:	a5000044 	addi	r20,r20,1
 8008d9c:	a0800007 	ldb	r2,0(r20)
 8008da0:	103ffc1e 	bne	r2,zero,8008d94 <__alt_data_end+0xfc008d94>
 8008da4:	a5a1c83a 	sub	r16,r20,r22
 8008da8:	80001026 	beq	r16,zero,8008dec <___vfiprintf_internal_r+0x140>
 8008dac:	d8c01c17 	ldw	r3,112(sp)
 8008db0:	d8801b17 	ldw	r2,108(sp)
 8008db4:	45800015 	stw	r22,0(r8)
 8008db8:	80c7883a 	add	r3,r16,r3
 8008dbc:	10800044 	addi	r2,r2,1
 8008dc0:	44000115 	stw	r16,4(r8)
 8008dc4:	d8c01c15 	stw	r3,112(sp)
 8008dc8:	d8801b15 	stw	r2,108(sp)
 8008dcc:	010001c4 	movi	r4,7
 8008dd0:	2080750e 	bge	r4,r2,8008fa8 <___vfiprintf_internal_r+0x2fc>
 8008dd4:	1803951e 	bne	r3,zero,8009c2c <___vfiprintf_internal_r+0xf80>
 8008dd8:	d8c02417 	ldw	r3,144(sp)
 8008ddc:	d8001b15 	stw	zero,108(sp)
 8008de0:	d811883a 	mov	r8,sp
 8008de4:	1c07883a 	add	r3,r3,r16
 8008de8:	d8c02415 	stw	r3,144(sp)
 8008dec:	a0800007 	ldb	r2,0(r20)
 8008df0:	1002e026 	beq	r2,zero,8009974 <___vfiprintf_internal_r+0xcc8>
 8008df4:	a5800044 	addi	r22,r20,1
 8008df8:	a0c00047 	ldb	r3,1(r20)
 8008dfc:	d8001d85 	stb	zero,118(sp)
 8008e00:	0027883a 	mov	r19,zero
 8008e04:	d8002305 	stb	zero,140(sp)
 8008e08:	043fffc4 	movi	r16,-1
 8008e0c:	d8002515 	stw	zero,148(sp)
 8008e10:	0023883a 	mov	r17,zero
 8008e14:	05001604 	movi	r20,88
 8008e18:	05400244 	movi	r21,9
 8008e1c:	402f883a 	mov	r23,r8
 8008e20:	b5800044 	addi	r22,r22,1
 8008e24:	18bff804 	addi	r2,r3,-32
 8008e28:	a0827736 	bltu	r20,r2,8009808 <___vfiprintf_internal_r+0xb5c>
 8008e2c:	100490ba 	slli	r2,r2,2
 8008e30:	01020074 	movhi	r4,2049
 8008e34:	21239104 	addi	r4,r4,-29116
 8008e38:	1105883a 	add	r2,r2,r4
 8008e3c:	10800017 	ldw	r2,0(r2)
 8008e40:	1000683a 	jmp	r2
 8008e44:	08009508 	cmpgei	zero,at,596
 8008e48:	08009808 	cmpgei	zero,at,608
 8008e4c:	08009808 	cmpgei	zero,at,608
 8008e50:	08009524 	muli	zero,at,596
 8008e54:	08009808 	cmpgei	zero,at,608
 8008e58:	08009808 	cmpgei	zero,at,608
 8008e5c:	08009808 	cmpgei	zero,at,608
 8008e60:	08009808 	cmpgei	zero,at,608
 8008e64:	08009808 	cmpgei	zero,at,608
 8008e68:	08009808 	cmpgei	zero,at,608
 8008e6c:	0800972c 	andhi	zero,at,604
 8008e70:	08009750 	cmplti	zero,at,605
 8008e74:	08009808 	cmpgei	zero,at,608
 8008e78:	08009048 	cmpgei	zero,at,577
 8008e7c:	08009764 	muli	zero,at,605
 8008e80:	08009808 	cmpgei	zero,at,608
 8008e84:	08009530 	cmpltui	zero,at,596
 8008e88:	0800953c 	xorhi	zero,at,596
 8008e8c:	0800953c 	xorhi	zero,at,596
 8008e90:	0800953c 	xorhi	zero,at,596
 8008e94:	0800953c 	xorhi	zero,at,596
 8008e98:	0800953c 	xorhi	zero,at,596
 8008e9c:	0800953c 	xorhi	zero,at,596
 8008ea0:	0800953c 	xorhi	zero,at,596
 8008ea4:	0800953c 	xorhi	zero,at,596
 8008ea8:	0800953c 	xorhi	zero,at,596
 8008eac:	08009808 	cmpgei	zero,at,608
 8008eb0:	08009808 	cmpgei	zero,at,608
 8008eb4:	08009808 	cmpgei	zero,at,608
 8008eb8:	08009808 	cmpgei	zero,at,608
 8008ebc:	08009808 	cmpgei	zero,at,608
 8008ec0:	08009808 	cmpgei	zero,at,608
 8008ec4:	08009808 	cmpgei	zero,at,608
 8008ec8:	08009808 	cmpgei	zero,at,608
 8008ecc:	08009808 	cmpgei	zero,at,608
 8008ed0:	08009808 	cmpgei	zero,at,608
 8008ed4:	0800957c 	xorhi	zero,at,597
 8008ed8:	08009808 	cmpgei	zero,at,608
 8008edc:	08009808 	cmpgei	zero,at,608
 8008ee0:	08009808 	cmpgei	zero,at,608
 8008ee4:	08009808 	cmpgei	zero,at,608
 8008ee8:	08009808 	cmpgei	zero,at,608
 8008eec:	08009808 	cmpgei	zero,at,608
 8008ef0:	08009808 	cmpgei	zero,at,608
 8008ef4:	08009808 	cmpgei	zero,at,608
 8008ef8:	08009808 	cmpgei	zero,at,608
 8008efc:	08009808 	cmpgei	zero,at,608
 8008f00:	080095b8 	rdprs	zero,at,598
 8008f04:	08009808 	cmpgei	zero,at,608
 8008f08:	08009808 	cmpgei	zero,at,608
 8008f0c:	08009808 	cmpgei	zero,at,608
 8008f10:	08009808 	cmpgei	zero,at,608
 8008f14:	08009808 	cmpgei	zero,at,608
 8008f18:	08009614 	ori	zero,at,600
 8008f1c:	08009808 	cmpgei	zero,at,608
 8008f20:	08009808 	cmpgei	zero,at,608
 8008f24:	08009688 	cmpgei	zero,at,602
 8008f28:	08009808 	cmpgei	zero,at,608
 8008f2c:	08009808 	cmpgei	zero,at,608
 8008f30:	08009808 	cmpgei	zero,at,608
 8008f34:	08009808 	cmpgei	zero,at,608
 8008f38:	08009808 	cmpgei	zero,at,608
 8008f3c:	08009808 	cmpgei	zero,at,608
 8008f40:	08009808 	cmpgei	zero,at,608
 8008f44:	08009808 	cmpgei	zero,at,608
 8008f48:	08009808 	cmpgei	zero,at,608
 8008f4c:	08009808 	cmpgei	zero,at,608
 8008f50:	08009430 	cmpltui	zero,at,592
 8008f54:	08009460 	cmpeqi	zero,at,593
 8008f58:	08009808 	cmpgei	zero,at,608
 8008f5c:	08009808 	cmpgei	zero,at,608
 8008f60:	08009808 	cmpgei	zero,at,608
 8008f64:	080097b0 	cmpltui	zero,at,606
 8008f68:	08009460 	cmpeqi	zero,at,593
 8008f6c:	08009808 	cmpgei	zero,at,608
 8008f70:	08009808 	cmpgei	zero,at,608
 8008f74:	08009308 	cmpgei	zero,at,588
 8008f78:	08009808 	cmpgei	zero,at,608
 8008f7c:	0800931c 	xori	zero,at,588
 8008f80:	08009354 	ori	zero,at,589
 8008f84:	08009054 	ori	zero,at,577
 8008f88:	080092fc 	xorhi	zero,at,587
 8008f8c:	08009808 	cmpgei	zero,at,608
 8008f90:	080096c8 	cmpgei	zero,at,603
 8008f94:	08009808 	cmpgei	zero,at,608
 8008f98:	08009714 	ori	zero,at,604
 8008f9c:	08009808 	cmpgei	zero,at,608
 8008fa0:	08009808 	cmpgei	zero,at,608
 8008fa4:	080093d8 	cmpnei	zero,at,591
 8008fa8:	42000204 	addi	r8,r8,8
 8008fac:	d8c02417 	ldw	r3,144(sp)
 8008fb0:	1c07883a 	add	r3,r3,r16
 8008fb4:	d8c02415 	stw	r3,144(sp)
 8008fb8:	003f8c06 	br	8008dec <__alt_data_end+0xfc008dec>
 8008fbc:	d9402017 	ldw	r5,128(sp)
 8008fc0:	d9002117 	ldw	r4,132(sp)
 8008fc4:	80038680 	call	8003868 <__swsetup_r>
 8008fc8:	1003c11e 	bne	r2,zero,8009ed0 <___vfiprintf_internal_r+0x1224>
 8008fcc:	d9402017 	ldw	r5,128(sp)
 8008fd0:	00c00284 	movi	r3,10
 8008fd4:	2880030b 	ldhu	r2,12(r5)
 8008fd8:	1080068c 	andi	r2,r2,26
 8008fdc:	10ff581e 	bne	r2,r3,8008d40 <__alt_data_end+0xfc008d40>
 8008fe0:	d8c02017 	ldw	r3,128(sp)
 8008fe4:	1880038f 	ldh	r2,14(r3)
 8008fe8:	103f5516 	blt	r2,zero,8008d40 <__alt_data_end+0xfc008d40>
 8008fec:	d9c02217 	ldw	r7,136(sp)
 8008ff0:	d9002117 	ldw	r4,132(sp)
 8008ff4:	a80d883a 	mov	r6,r21
 8008ff8:	180b883a 	mov	r5,r3
 8008ffc:	800a1d40 	call	800a1d4 <__sbprintf>
 8009000:	dfc03517 	ldw	ra,212(sp)
 8009004:	df003417 	ldw	fp,208(sp)
 8009008:	ddc03317 	ldw	r23,204(sp)
 800900c:	dd803217 	ldw	r22,200(sp)
 8009010:	dd403117 	ldw	r21,196(sp)
 8009014:	dd003017 	ldw	r20,192(sp)
 8009018:	dcc02f17 	ldw	r19,188(sp)
 800901c:	dc802e17 	ldw	r18,184(sp)
 8009020:	dc402d17 	ldw	r17,180(sp)
 8009024:	dc002c17 	ldw	r16,176(sp)
 8009028:	dec03604 	addi	sp,sp,216
 800902c:	f800283a 	ret
 8009030:	80058740 	call	8005874 <__sinit>
 8009034:	003f2f06 	br	8008cf4 <__alt_data_end+0xfc008cf4>
 8009038:	d8c02517 	ldw	r3,148(sp)
 800903c:	d8802215 	stw	r2,136(sp)
 8009040:	00c7c83a 	sub	r3,zero,r3
 8009044:	d8c02515 	stw	r3,148(sp)
 8009048:	8c400114 	ori	r17,r17,4
 800904c:	b0c00007 	ldb	r3,0(r22)
 8009050:	003f7306 	br	8008e20 <__alt_data_end+0xfc008e20>
 8009054:	00800c04 	movi	r2,48
 8009058:	d9402217 	ldw	r5,136(sp)
 800905c:	d8801d05 	stb	r2,116(sp)
 8009060:	00801e04 	movi	r2,120
 8009064:	d8801d45 	stb	r2,117(sp)
 8009068:	d8001d85 	stb	zero,118(sp)
 800906c:	b811883a 	mov	r8,r23
 8009070:	28c00104 	addi	r3,r5,4
 8009074:	2cc00017 	ldw	r19,0(r5)
 8009078:	0029883a 	mov	r20,zero
 800907c:	88800094 	ori	r2,r17,2
 8009080:	80032516 	blt	r16,zero,8009d18 <___vfiprintf_internal_r+0x106c>
 8009084:	00bfdfc4 	movi	r2,-129
 8009088:	88a2703a 	and	r17,r17,r2
 800908c:	d8c02215 	stw	r3,136(sp)
 8009090:	8c400094 	ori	r17,r17,2
 8009094:	98032a1e 	bne	r19,zero,8009d40 <___vfiprintf_internal_r+0x1094>
 8009098:	00820074 	movhi	r2,2049
 800909c:	10864a04 	addi	r2,r2,6440
 80090a0:	d8802615 	stw	r2,152(sp)
 80090a4:	002b883a 	mov	r21,zero
 80090a8:	8001741e 	bne	r16,zero,800967c <___vfiprintf_internal_r+0x9d0>
 80090ac:	0021883a 	mov	r16,zero
 80090b0:	0029883a 	mov	r20,zero
 80090b4:	ddc01a04 	addi	r23,sp,104
 80090b8:	8027883a 	mov	r19,r16
 80090bc:	8500010e 	bge	r16,r20,80090c4 <___vfiprintf_internal_r+0x418>
 80090c0:	a027883a 	mov	r19,r20
 80090c4:	ad403fcc 	andi	r21,r21,255
 80090c8:	ad40201c 	xori	r21,r21,128
 80090cc:	ad7fe004 	addi	r21,r21,-128
 80090d0:	a8000126 	beq	r21,zero,80090d8 <___vfiprintf_internal_r+0x42c>
 80090d4:	9cc00044 	addi	r19,r19,1
 80090d8:	89c0008c 	andi	r7,r17,2
 80090dc:	38000126 	beq	r7,zero,80090e4 <___vfiprintf_internal_r+0x438>
 80090e0:	9cc00084 	addi	r19,r19,2
 80090e4:	88c0210c 	andi	r3,r17,132
 80090e8:	1801dd1e 	bne	r3,zero,8009860 <___vfiprintf_internal_r+0xbb4>
 80090ec:	d9402517 	ldw	r5,148(sp)
 80090f0:	2cebc83a 	sub	r21,r5,r19
 80090f4:	0541da0e 	bge	zero,r21,8009860 <___vfiprintf_internal_r+0xbb4>
 80090f8:	07000404 	movi	fp,16
 80090fc:	d8801c17 	ldw	r2,112(sp)
 8009100:	e543be0e 	bge	fp,r21,8009ffc <___vfiprintf_internal_r+0x1350>
 8009104:	01420074 	movhi	r5,2049
 8009108:	2946af04 	addi	r5,r5,6844
 800910c:	dc002715 	stw	r16,156(sp)
 8009110:	d9801b17 	ldw	r6,108(sp)
 8009114:	a821883a 	mov	r16,r21
 8009118:	d9402315 	stw	r5,140(sp)
 800911c:	028001c4 	movi	r10,7
 8009120:	d9c02915 	stw	r7,164(sp)
 8009124:	182b883a 	mov	r21,r3
 8009128:	00000506 	br	8009140 <___vfiprintf_internal_r+0x494>
 800912c:	31000084 	addi	r4,r6,2
 8009130:	42000204 	addi	r8,r8,8
 8009134:	180d883a 	mov	r6,r3
 8009138:	843ffc04 	addi	r16,r16,-16
 800913c:	e4000f0e 	bge	fp,r16,800917c <___vfiprintf_internal_r+0x4d0>
 8009140:	01020074 	movhi	r4,2049
 8009144:	10800404 	addi	r2,r2,16
 8009148:	30c00044 	addi	r3,r6,1
 800914c:	2106af04 	addi	r4,r4,6844
 8009150:	41000015 	stw	r4,0(r8)
 8009154:	47000115 	stw	fp,4(r8)
 8009158:	d8801c15 	stw	r2,112(sp)
 800915c:	d8c01b15 	stw	r3,108(sp)
 8009160:	50fff20e 	bge	r10,r3,800912c <__alt_data_end+0xfc00912c>
 8009164:	1001b21e 	bne	r2,zero,8009830 <___vfiprintf_internal_r+0xb84>
 8009168:	843ffc04 	addi	r16,r16,-16
 800916c:	000d883a 	mov	r6,zero
 8009170:	01000044 	movi	r4,1
 8009174:	d811883a 	mov	r8,sp
 8009178:	e43ff116 	blt	fp,r16,8009140 <__alt_data_end+0xfc009140>
 800917c:	a807883a 	mov	r3,r21
 8009180:	d9c02917 	ldw	r7,164(sp)
 8009184:	802b883a 	mov	r21,r16
 8009188:	dc002717 	ldw	r16,156(sp)
 800918c:	d9402317 	ldw	r5,140(sp)
 8009190:	a885883a 	add	r2,r21,r2
 8009194:	45400115 	stw	r21,4(r8)
 8009198:	41400015 	stw	r5,0(r8)
 800919c:	d8801c15 	stw	r2,112(sp)
 80091a0:	d9001b15 	stw	r4,108(sp)
 80091a4:	014001c4 	movi	r5,7
 80091a8:	29026216 	blt	r5,r4,8009b34 <___vfiprintf_internal_r+0xe88>
 80091ac:	d9801d87 	ldb	r6,118(sp)
 80091b0:	42000204 	addi	r8,r8,8
 80091b4:	21400044 	addi	r5,r4,1
 80091b8:	3001ae1e 	bne	r6,zero,8009874 <___vfiprintf_internal_r+0xbc8>
 80091bc:	3801bb26 	beq	r7,zero,80098ac <___vfiprintf_internal_r+0xc00>
 80091c0:	d9001d04 	addi	r4,sp,116
 80091c4:	10800084 	addi	r2,r2,2
 80091c8:	41000015 	stw	r4,0(r8)
 80091cc:	01000084 	movi	r4,2
 80091d0:	41000115 	stw	r4,4(r8)
 80091d4:	d8801c15 	stw	r2,112(sp)
 80091d8:	d9401b15 	stw	r5,108(sp)
 80091dc:	010001c4 	movi	r4,7
 80091e0:	2142680e 	bge	r4,r5,8009b84 <___vfiprintf_internal_r+0xed8>
 80091e4:	1002b11e 	bne	r2,zero,8009cac <___vfiprintf_internal_r+0x1000>
 80091e8:	01802004 	movi	r6,128
 80091ec:	01400044 	movi	r5,1
 80091f0:	0009883a 	mov	r4,zero
 80091f4:	d811883a 	mov	r8,sp
 80091f8:	1981ae1e 	bne	r3,r6,80098b4 <___vfiprintf_internal_r+0xc08>
 80091fc:	d8c02517 	ldw	r3,148(sp)
 8009200:	1cf9c83a 	sub	fp,r3,r19
 8009204:	0701ab0e 	bge	zero,fp,80098b4 <___vfiprintf_internal_r+0xc08>
 8009208:	05400404 	movi	r21,16
 800920c:	af03a90e 	bge	r21,fp,800a0b4 <___vfiprintf_internal_r+0x1408>
 8009210:	01420074 	movhi	r5,2049
 8009214:	2946ab04 	addi	r5,r5,6828
 8009218:	d9402315 	stw	r5,140(sp)
 800921c:	01c001c4 	movi	r7,7
 8009220:	00000506 	br	8009238 <___vfiprintf_internal_r+0x58c>
 8009224:	21800084 	addi	r6,r4,2
 8009228:	42000204 	addi	r8,r8,8
 800922c:	1809883a 	mov	r4,r3
 8009230:	e73ffc04 	addi	fp,fp,-16
 8009234:	af000d0e 	bge	r21,fp,800926c <___vfiprintf_internal_r+0x5c0>
 8009238:	10800404 	addi	r2,r2,16
 800923c:	20c00044 	addi	r3,r4,1
 8009240:	44800015 	stw	r18,0(r8)
 8009244:	45400115 	stw	r21,4(r8)
 8009248:	d8801c15 	stw	r2,112(sp)
 800924c:	d8c01b15 	stw	r3,108(sp)
 8009250:	38fff40e 	bge	r7,r3,8009224 <__alt_data_end+0xfc009224>
 8009254:	10022b1e 	bne	r2,zero,8009b04 <___vfiprintf_internal_r+0xe58>
 8009258:	e73ffc04 	addi	fp,fp,-16
 800925c:	01800044 	movi	r6,1
 8009260:	0009883a 	mov	r4,zero
 8009264:	d811883a 	mov	r8,sp
 8009268:	af3ff316 	blt	r21,fp,8009238 <__alt_data_end+0xfc009238>
 800926c:	d8c02317 	ldw	r3,140(sp)
 8009270:	1705883a 	add	r2,r2,fp
 8009274:	47000115 	stw	fp,4(r8)
 8009278:	40c00015 	stw	r3,0(r8)
 800927c:	d8801c15 	stw	r2,112(sp)
 8009280:	d9801b15 	stw	r6,108(sp)
 8009284:	00c001c4 	movi	r3,7
 8009288:	19829416 	blt	r3,r6,8009cdc <___vfiprintf_internal_r+0x1030>
 800928c:	8521c83a 	sub	r16,r16,r20
 8009290:	42000204 	addi	r8,r8,8
 8009294:	31400044 	addi	r5,r6,1
 8009298:	3009883a 	mov	r4,r6
 800929c:	04018716 	blt	zero,r16,80098bc <___vfiprintf_internal_r+0xc10>
 80092a0:	a085883a 	add	r2,r20,r2
 80092a4:	45c00015 	stw	r23,0(r8)
 80092a8:	45000115 	stw	r20,4(r8)
 80092ac:	d8801c15 	stw	r2,112(sp)
 80092b0:	d9401b15 	stw	r5,108(sp)
 80092b4:	00c001c4 	movi	r3,7
 80092b8:	1941c20e 	bge	r3,r5,80099c4 <___vfiprintf_internal_r+0xd18>
 80092bc:	1002531e 	bne	r2,zero,8009c0c <___vfiprintf_internal_r+0xf60>
 80092c0:	d8001b15 	stw	zero,108(sp)
 80092c4:	8c40010c 	andi	r17,r17,4
 80092c8:	88023226 	beq	r17,zero,8009b94 <___vfiprintf_internal_r+0xee8>
 80092cc:	d9002517 	ldw	r4,148(sp)
 80092d0:	24e3c83a 	sub	r17,r4,r19
 80092d4:	04432916 	blt	zero,r17,8009f7c <___vfiprintf_internal_r+0x12d0>
 80092d8:	d8802517 	ldw	r2,148(sp)
 80092dc:	14c0010e 	bge	r2,r19,80092e4 <___vfiprintf_internal_r+0x638>
 80092e0:	9805883a 	mov	r2,r19
 80092e4:	d8c02417 	ldw	r3,144(sp)
 80092e8:	1887883a 	add	r3,r3,r2
 80092ec:	d8c02415 	stw	r3,144(sp)
 80092f0:	d8001b15 	stw	zero,108(sp)
 80092f4:	d811883a 	mov	r8,sp
 80092f8:	003ea006 	br	8008d7c <__alt_data_end+0xfc008d7c>
 80092fc:	8c400814 	ori	r17,r17,32
 8009300:	b0c00007 	ldb	r3,0(r22)
 8009304:	003ec606 	br	8008e20 <__alt_data_end+0xfc008e20>
 8009308:	b0c00007 	ldb	r3,0(r22)
 800930c:	00801b04 	movi	r2,108
 8009310:	18832026 	beq	r3,r2,8009f94 <___vfiprintf_internal_r+0x12e8>
 8009314:	8c400414 	ori	r17,r17,16
 8009318:	003ec106 	br	8008e20 <__alt_data_end+0xfc008e20>
 800931c:	9cc03fcc 	andi	r19,r19,255
 8009320:	b811883a 	mov	r8,r23
 8009324:	9803981e 	bne	r19,zero,800a188 <___vfiprintf_internal_r+0x14dc>
 8009328:	8880080c 	andi	r2,r17,32
 800932c:	1002be26 	beq	r2,zero,8009e28 <___vfiprintf_internal_r+0x117c>
 8009330:	d9002217 	ldw	r4,136(sp)
 8009334:	d9402417 	ldw	r5,144(sp)
 8009338:	20800017 	ldw	r2,0(r4)
 800933c:	2807d7fa 	srai	r3,r5,31
 8009340:	21000104 	addi	r4,r4,4
 8009344:	d9002215 	stw	r4,136(sp)
 8009348:	11400015 	stw	r5,0(r2)
 800934c:	10c00115 	stw	r3,4(r2)
 8009350:	003e8a06 	br	8008d7c <__alt_data_end+0xfc008d7c>
 8009354:	9cc03fcc 	andi	r19,r19,255
 8009358:	b811883a 	mov	r8,r23
 800935c:	9803871e 	bne	r19,zero,800a17c <___vfiprintf_internal_r+0x14d0>
 8009360:	8880080c 	andi	r2,r17,32
 8009364:	10009a26 	beq	r2,zero,80095d0 <___vfiprintf_internal_r+0x924>
 8009368:	d9002217 	ldw	r4,136(sp)
 800936c:	d8001d85 	stb	zero,118(sp)
 8009370:	20800204 	addi	r2,r4,8
 8009374:	24c00017 	ldw	r19,0(r4)
 8009378:	25000117 	ldw	r20,4(r4)
 800937c:	8002a416 	blt	r16,zero,8009e10 <___vfiprintf_internal_r+0x1164>
 8009380:	013fdfc4 	movi	r4,-129
 8009384:	9d06b03a 	or	r3,r19,r20
 8009388:	d8802215 	stw	r2,136(sp)
 800938c:	8922703a 	and	r17,r17,r4
 8009390:	18009b26 	beq	r3,zero,8009600 <___vfiprintf_internal_r+0x954>
 8009394:	002b883a 	mov	r21,zero
 8009398:	ddc01a04 	addi	r23,sp,104
 800939c:	9806d0fa 	srli	r3,r19,3
 80093a0:	a008977a 	slli	r4,r20,29
 80093a4:	a028d0fa 	srli	r20,r20,3
 80093a8:	9cc001cc 	andi	r19,r19,7
 80093ac:	98800c04 	addi	r2,r19,48
 80093b0:	bdffffc4 	addi	r23,r23,-1
 80093b4:	20e6b03a 	or	r19,r4,r3
 80093b8:	b8800005 	stb	r2,0(r23)
 80093bc:	9d06b03a 	or	r3,r19,r20
 80093c0:	183ff61e 	bne	r3,zero,800939c <__alt_data_end+0xfc00939c>
 80093c4:	88c0004c 	andi	r3,r17,1
 80093c8:	18021f1e 	bne	r3,zero,8009c48 <___vfiprintf_internal_r+0xf9c>
 80093cc:	d9401e17 	ldw	r5,120(sp)
 80093d0:	2de9c83a 	sub	r20,r5,r23
 80093d4:	003f3806 	br	80090b8 <__alt_data_end+0xfc0090b8>
 80093d8:	9cc03fcc 	andi	r19,r19,255
 80093dc:	b811883a 	mov	r8,r23
 80093e0:	98034f1e 	bne	r19,zero,800a120 <___vfiprintf_internal_r+0x1474>
 80093e4:	00820074 	movhi	r2,2049
 80093e8:	10864a04 	addi	r2,r2,6440
 80093ec:	d8802615 	stw	r2,152(sp)
 80093f0:	8880080c 	andi	r2,r17,32
 80093f4:	1000ac26 	beq	r2,zero,80096a8 <___vfiprintf_internal_r+0x9fc>
 80093f8:	d9002217 	ldw	r4,136(sp)
 80093fc:	24c00017 	ldw	r19,0(r4)
 8009400:	25000117 	ldw	r20,4(r4)
 8009404:	21000204 	addi	r4,r4,8
 8009408:	d9002215 	stw	r4,136(sp)
 800940c:	8880004c 	andi	r2,r17,1
 8009410:	1001e726 	beq	r2,zero,8009bb0 <___vfiprintf_internal_r+0xf04>
 8009414:	9d04b03a 	or	r2,r19,r20
 8009418:	10025c1e 	bne	r2,zero,8009d8c <___vfiprintf_internal_r+0x10e0>
 800941c:	d8001d85 	stb	zero,118(sp)
 8009420:	80024416 	blt	r16,zero,8009d34 <___vfiprintf_internal_r+0x1088>
 8009424:	00bfdfc4 	movi	r2,-129
 8009428:	88a2703a 	and	r17,r17,r2
 800942c:	003f1d06 	br	80090a4 <__alt_data_end+0xfc0090a4>
 8009430:	d8c02217 	ldw	r3,136(sp)
 8009434:	04c00044 	movi	r19,1
 8009438:	b811883a 	mov	r8,r23
 800943c:	18800017 	ldw	r2,0(r3)
 8009440:	18c00104 	addi	r3,r3,4
 8009444:	d8001d85 	stb	zero,118(sp)
 8009448:	d8801005 	stb	r2,64(sp)
 800944c:	d8c02215 	stw	r3,136(sp)
 8009450:	9829883a 	mov	r20,r19
 8009454:	ddc01004 	addi	r23,sp,64
 8009458:	0021883a 	mov	r16,zero
 800945c:	003f1e06 	br	80090d8 <__alt_data_end+0xfc0090d8>
 8009460:	9cc03fcc 	andi	r19,r19,255
 8009464:	b811883a 	mov	r8,r23
 8009468:	9803331e 	bne	r19,zero,800a138 <___vfiprintf_internal_r+0x148c>
 800946c:	8880080c 	andi	r2,r17,32
 8009470:	10004826 	beq	r2,zero,8009594 <___vfiprintf_internal_r+0x8e8>
 8009474:	d9002217 	ldw	r4,136(sp)
 8009478:	20800117 	ldw	r2,4(r4)
 800947c:	24c00017 	ldw	r19,0(r4)
 8009480:	21000204 	addi	r4,r4,8
 8009484:	d9002215 	stw	r4,136(sp)
 8009488:	1029883a 	mov	r20,r2
 800948c:	10024c16 	blt	r2,zero,8009dc0 <___vfiprintf_internal_r+0x1114>
 8009490:	dd401d83 	ldbu	r21,118(sp)
 8009494:	80007116 	blt	r16,zero,800965c <___vfiprintf_internal_r+0x9b0>
 8009498:	00ffdfc4 	movi	r3,-129
 800949c:	9d04b03a 	or	r2,r19,r20
 80094a0:	88e2703a 	and	r17,r17,r3
 80094a4:	1000d126 	beq	r2,zero,80097ec <___vfiprintf_internal_r+0xb40>
 80094a8:	a0023526 	beq	r20,zero,8009d80 <___vfiprintf_internal_r+0x10d4>
 80094ac:	ddc01a04 	addi	r23,sp,104
 80094b0:	4039883a 	mov	fp,r8
 80094b4:	9809883a 	mov	r4,r19
 80094b8:	a00b883a 	mov	r5,r20
 80094bc:	01800284 	movi	r6,10
 80094c0:	000f883a 	mov	r7,zero
 80094c4:	800b1d80 	call	800b1d8 <__umoddi3>
 80094c8:	10800c04 	addi	r2,r2,48
 80094cc:	bdffffc4 	addi	r23,r23,-1
 80094d0:	9809883a 	mov	r4,r19
 80094d4:	a00b883a 	mov	r5,r20
 80094d8:	b8800005 	stb	r2,0(r23)
 80094dc:	01800284 	movi	r6,10
 80094e0:	000f883a 	mov	r7,zero
 80094e4:	800abdc0 	call	800abdc <__udivdi3>
 80094e8:	1027883a 	mov	r19,r2
 80094ec:	10c4b03a 	or	r2,r2,r3
 80094f0:	1829883a 	mov	r20,r3
 80094f4:	103fef1e 	bne	r2,zero,80094b4 <__alt_data_end+0xfc0094b4>
 80094f8:	d9001e17 	ldw	r4,120(sp)
 80094fc:	e011883a 	mov	r8,fp
 8009500:	25e9c83a 	sub	r20,r4,r23
 8009504:	003eec06 	br	80090b8 <__alt_data_end+0xfc0090b8>
 8009508:	d8802307 	ldb	r2,140(sp)
 800950c:	1002361e 	bne	r2,zero,8009de8 <___vfiprintf_internal_r+0x113c>
 8009510:	00c00804 	movi	r3,32
 8009514:	d8c02305 	stb	r3,140(sp)
 8009518:	04c00044 	movi	r19,1
 800951c:	b0c00007 	ldb	r3,0(r22)
 8009520:	003e3f06 	br	8008e20 <__alt_data_end+0xfc008e20>
 8009524:	8c400054 	ori	r17,r17,1
 8009528:	b0c00007 	ldb	r3,0(r22)
 800952c:	003e3c06 	br	8008e20 <__alt_data_end+0xfc008e20>
 8009530:	8c402014 	ori	r17,r17,128
 8009534:	b0c00007 	ldb	r3,0(r22)
 8009538:	003e3906 	br	8008e20 <__alt_data_end+0xfc008e20>
 800953c:	dc002715 	stw	r16,156(sp)
 8009540:	d8002515 	stw	zero,148(sp)
 8009544:	1f3ff404 	addi	fp,r3,-48
 8009548:	0009883a 	mov	r4,zero
 800954c:	b021883a 	mov	r16,r22
 8009550:	01400284 	movi	r5,10
 8009554:	80012b40 	call	80012b4 <__mulsi3>
 8009558:	80c00007 	ldb	r3,0(r16)
 800955c:	e089883a 	add	r4,fp,r2
 8009560:	b5800044 	addi	r22,r22,1
 8009564:	1f3ff404 	addi	fp,r3,-48
 8009568:	b021883a 	mov	r16,r22
 800956c:	af3ff82e 	bgeu	r21,fp,8009550 <__alt_data_end+0xfc009550>
 8009570:	d9002515 	stw	r4,148(sp)
 8009574:	dc002717 	ldw	r16,156(sp)
 8009578:	003e2a06 	br	8008e24 <__alt_data_end+0xfc008e24>
 800957c:	9cc03fcc 	andi	r19,r19,255
 8009580:	b811883a 	mov	r8,r23
 8009584:	9802e91e 	bne	r19,zero,800a12c <___vfiprintf_internal_r+0x1480>
 8009588:	8c400414 	ori	r17,r17,16
 800958c:	8880080c 	andi	r2,r17,32
 8009590:	103fb81e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 8009594:	8880040c 	andi	r2,r17,16
 8009598:	10022e26 	beq	r2,zero,8009e54 <___vfiprintf_internal_r+0x11a8>
 800959c:	d9402217 	ldw	r5,136(sp)
 80095a0:	2cc00017 	ldw	r19,0(r5)
 80095a4:	29400104 	addi	r5,r5,4
 80095a8:	d9402215 	stw	r5,136(sp)
 80095ac:	9829d7fa 	srai	r20,r19,31
 80095b0:	a005883a 	mov	r2,r20
 80095b4:	003fb506 	br	800948c <__alt_data_end+0xfc00948c>
 80095b8:	9cc03fcc 	andi	r19,r19,255
 80095bc:	b811883a 	mov	r8,r23
 80095c0:	9802fa1e 	bne	r19,zero,800a1ac <___vfiprintf_internal_r+0x1500>
 80095c4:	8c400414 	ori	r17,r17,16
 80095c8:	8880080c 	andi	r2,r17,32
 80095cc:	103f661e 	bne	r2,zero,8009368 <__alt_data_end+0xfc009368>
 80095d0:	8880040c 	andi	r2,r17,16
 80095d4:	10020626 	beq	r2,zero,8009df0 <___vfiprintf_internal_r+0x1144>
 80095d8:	d9402217 	ldw	r5,136(sp)
 80095dc:	d8001d85 	stb	zero,118(sp)
 80095e0:	0029883a 	mov	r20,zero
 80095e4:	28800104 	addi	r2,r5,4
 80095e8:	2cc00017 	ldw	r19,0(r5)
 80095ec:	80020816 	blt	r16,zero,8009e10 <___vfiprintf_internal_r+0x1164>
 80095f0:	00ffdfc4 	movi	r3,-129
 80095f4:	d8802215 	stw	r2,136(sp)
 80095f8:	88e2703a 	and	r17,r17,r3
 80095fc:	983f651e 	bne	r19,zero,8009394 <__alt_data_end+0xfc009394>
 8009600:	002b883a 	mov	r21,zero
 8009604:	8002cf26 	beq	r16,zero,800a144 <___vfiprintf_internal_r+0x1498>
 8009608:	0027883a 	mov	r19,zero
 800960c:	0029883a 	mov	r20,zero
 8009610:	003f6106 	br	8009398 <__alt_data_end+0xfc009398>
 8009614:	9cc03fcc 	andi	r19,r19,255
 8009618:	b811883a 	mov	r8,r23
 800961c:	9802e01e 	bne	r19,zero,800a1a0 <___vfiprintf_internal_r+0x14f4>
 8009620:	8c400414 	ori	r17,r17,16
 8009624:	8880080c 	andi	r2,r17,32
 8009628:	1000641e 	bne	r2,zero,80097bc <___vfiprintf_internal_r+0xb10>
 800962c:	8880040c 	andi	r2,r17,16
 8009630:	1001c81e 	bne	r2,zero,8009d54 <___vfiprintf_internal_r+0x10a8>
 8009634:	8880100c 	andi	r2,r17,64
 8009638:	d8001d85 	stb	zero,118(sp)
 800963c:	1002281e 	bne	r2,zero,8009ee0 <___vfiprintf_internal_r+0x1234>
 8009640:	d9002217 	ldw	r4,136(sp)
 8009644:	0029883a 	mov	r20,zero
 8009648:	20800104 	addi	r2,r4,4
 800964c:	24c00017 	ldw	r19,0(r4)
 8009650:	8001c60e 	bge	r16,zero,8009d6c <___vfiprintf_internal_r+0x10c0>
 8009654:	d8802215 	stw	r2,136(sp)
 8009658:	002b883a 	mov	r21,zero
 800965c:	9d04b03a 	or	r2,r19,r20
 8009660:	103f911e 	bne	r2,zero,80094a8 <__alt_data_end+0xfc0094a8>
 8009664:	00800044 	movi	r2,1
 8009668:	10803fcc 	andi	r2,r2,255
 800966c:	00c00044 	movi	r3,1
 8009670:	10c05f26 	beq	r2,r3,80097f0 <___vfiprintf_internal_r+0xb44>
 8009674:	00c00084 	movi	r3,2
 8009678:	10ffe31e 	bne	r2,r3,8009608 <__alt_data_end+0xfc009608>
 800967c:	0027883a 	mov	r19,zero
 8009680:	0029883a 	mov	r20,zero
 8009684:	00015106 	br	8009bcc <___vfiprintf_internal_r+0xf20>
 8009688:	9cc03fcc 	andi	r19,r19,255
 800968c:	b811883a 	mov	r8,r23
 8009690:	9802c01e 	bne	r19,zero,800a194 <___vfiprintf_internal_r+0x14e8>
 8009694:	01420074 	movhi	r5,2049
 8009698:	29464504 	addi	r5,r5,6420
 800969c:	d9402615 	stw	r5,152(sp)
 80096a0:	8880080c 	andi	r2,r17,32
 80096a4:	103f541e 	bne	r2,zero,80093f8 <__alt_data_end+0xfc0093f8>
 80096a8:	8880040c 	andi	r2,r17,16
 80096ac:	1001f226 	beq	r2,zero,8009e78 <___vfiprintf_internal_r+0x11cc>
 80096b0:	d9402217 	ldw	r5,136(sp)
 80096b4:	0029883a 	mov	r20,zero
 80096b8:	2cc00017 	ldw	r19,0(r5)
 80096bc:	29400104 	addi	r5,r5,4
 80096c0:	d9402215 	stw	r5,136(sp)
 80096c4:	003f5106 	br	800940c <__alt_data_end+0xfc00940c>
 80096c8:	d8c02217 	ldw	r3,136(sp)
 80096cc:	b811883a 	mov	r8,r23
 80096d0:	d8001d85 	stb	zero,118(sp)
 80096d4:	1dc00017 	ldw	r23,0(r3)
 80096d8:	1f000104 	addi	fp,r3,4
 80096dc:	b8025926 	beq	r23,zero,800a044 <___vfiprintf_internal_r+0x1398>
 80096e0:	80023316 	blt	r16,zero,8009fb0 <___vfiprintf_internal_r+0x1304>
 80096e4:	800d883a 	mov	r6,r16
 80096e8:	000b883a 	mov	r5,zero
 80096ec:	b809883a 	mov	r4,r23
 80096f0:	da002a15 	stw	r8,168(sp)
 80096f4:	8006dec0 	call	8006dec <memchr>
 80096f8:	da002a17 	ldw	r8,168(sp)
 80096fc:	10026826 	beq	r2,zero,800a0a0 <___vfiprintf_internal_r+0x13f4>
 8009700:	15e9c83a 	sub	r20,r2,r23
 8009704:	dd401d83 	ldbu	r21,118(sp)
 8009708:	df002215 	stw	fp,136(sp)
 800970c:	0021883a 	mov	r16,zero
 8009710:	003e6906 	br	80090b8 <__alt_data_end+0xfc0090b8>
 8009714:	9cc03fcc 	andi	r19,r19,255
 8009718:	b811883a 	mov	r8,r23
 800971c:	983fc126 	beq	r19,zero,8009624 <__alt_data_end+0xfc009624>
 8009720:	d8c02303 	ldbu	r3,140(sp)
 8009724:	d8c01d85 	stb	r3,118(sp)
 8009728:	003fbe06 	br	8009624 <__alt_data_end+0xfc009624>
 800972c:	d9002217 	ldw	r4,136(sp)
 8009730:	d9402217 	ldw	r5,136(sp)
 8009734:	21000017 	ldw	r4,0(r4)
 8009738:	28800104 	addi	r2,r5,4
 800973c:	d9002515 	stw	r4,148(sp)
 8009740:	203e3d16 	blt	r4,zero,8009038 <__alt_data_end+0xfc009038>
 8009744:	d8802215 	stw	r2,136(sp)
 8009748:	b0c00007 	ldb	r3,0(r22)
 800974c:	003db406 	br	8008e20 <__alt_data_end+0xfc008e20>
 8009750:	00c00ac4 	movi	r3,43
 8009754:	d8c02305 	stb	r3,140(sp)
 8009758:	04c00044 	movi	r19,1
 800975c:	b0c00007 	ldb	r3,0(r22)
 8009760:	003daf06 	br	8008e20 <__alt_data_end+0xfc008e20>
 8009764:	b0c00007 	ldb	r3,0(r22)
 8009768:	01000a84 	movi	r4,42
 800976c:	b4000044 	addi	r16,r22,1
 8009770:	19025e26 	beq	r3,r4,800a0ec <___vfiprintf_internal_r+0x1440>
 8009774:	1f3ff404 	addi	fp,r3,-48
 8009778:	0009883a 	mov	r4,zero
 800977c:	af025236 	bltu	r21,fp,800a0c8 <___vfiprintf_internal_r+0x141c>
 8009780:	01400284 	movi	r5,10
 8009784:	80012b40 	call	80012b4 <__mulsi3>
 8009788:	80c00007 	ldb	r3,0(r16)
 800978c:	1709883a 	add	r4,r2,fp
 8009790:	85800044 	addi	r22,r16,1
 8009794:	1f3ff404 	addi	fp,r3,-48
 8009798:	b021883a 	mov	r16,r22
 800979c:	af3ff82e 	bgeu	r21,fp,8009780 <__alt_data_end+0xfc009780>
 80097a0:	2021883a 	mov	r16,r4
 80097a4:	203d9f0e 	bge	r4,zero,8008e24 <__alt_data_end+0xfc008e24>
 80097a8:	043fffc4 	movi	r16,-1
 80097ac:	003d9d06 	br	8008e24 <__alt_data_end+0xfc008e24>
 80097b0:	8c401014 	ori	r17,r17,64
 80097b4:	b0c00007 	ldb	r3,0(r22)
 80097b8:	003d9906 	br	8008e20 <__alt_data_end+0xfc008e20>
 80097bc:	d9002217 	ldw	r4,136(sp)
 80097c0:	d8001d85 	stb	zero,118(sp)
 80097c4:	20c00204 	addi	r3,r4,8
 80097c8:	24c00017 	ldw	r19,0(r4)
 80097cc:	25000117 	ldw	r20,4(r4)
 80097d0:	8001e716 	blt	r16,zero,8009f70 <___vfiprintf_internal_r+0x12c4>
 80097d4:	013fdfc4 	movi	r4,-129
 80097d8:	9d04b03a 	or	r2,r19,r20
 80097dc:	d8c02215 	stw	r3,136(sp)
 80097e0:	8922703a 	and	r17,r17,r4
 80097e4:	002b883a 	mov	r21,zero
 80097e8:	103f2f1e 	bne	r2,zero,80094a8 <__alt_data_end+0xfc0094a8>
 80097ec:	803e2f26 	beq	r16,zero,80090ac <__alt_data_end+0xfc0090ac>
 80097f0:	0027883a 	mov	r19,zero
 80097f4:	9cc00c04 	addi	r19,r19,48
 80097f8:	dcc019c5 	stb	r19,103(sp)
 80097fc:	dd002817 	ldw	r20,160(sp)
 8009800:	ddc019c4 	addi	r23,sp,103
 8009804:	003e2c06 	br	80090b8 <__alt_data_end+0xfc0090b8>
 8009808:	9cc03fcc 	andi	r19,r19,255
 800980c:	b811883a 	mov	r8,r23
 8009810:	9802571e 	bne	r19,zero,800a170 <___vfiprintf_internal_r+0x14c4>
 8009814:	18005726 	beq	r3,zero,8009974 <___vfiprintf_internal_r+0xcc8>
 8009818:	04c00044 	movi	r19,1
 800981c:	d8c01005 	stb	r3,64(sp)
 8009820:	d8001d85 	stb	zero,118(sp)
 8009824:	9829883a 	mov	r20,r19
 8009828:	ddc01004 	addi	r23,sp,64
 800982c:	003f0a06 	br	8009458 <__alt_data_end+0xfc009458>
 8009830:	d9402017 	ldw	r5,128(sp)
 8009834:	d9002117 	ldw	r4,132(sp)
 8009838:	d9801a04 	addi	r6,sp,104
 800983c:	da802a15 	stw	r10,168(sp)
 8009840:	8008b980 	call	8008b98 <__sprint_r.part.0>
 8009844:	da802a17 	ldw	r10,168(sp)
 8009848:	1000501e 	bne	r2,zero,800998c <___vfiprintf_internal_r+0xce0>
 800984c:	d9801b17 	ldw	r6,108(sp)
 8009850:	d8801c17 	ldw	r2,112(sp)
 8009854:	d811883a 	mov	r8,sp
 8009858:	31000044 	addi	r4,r6,1
 800985c:	003e3606 	br	8009138 <__alt_data_end+0xfc009138>
 8009860:	d9001b17 	ldw	r4,108(sp)
 8009864:	d8801c17 	ldw	r2,112(sp)
 8009868:	21400044 	addi	r5,r4,1
 800986c:	d9801d87 	ldb	r6,118(sp)
 8009870:	303e5226 	beq	r6,zero,80091bc <__alt_data_end+0xfc0091bc>
 8009874:	01800044 	movi	r6,1
 8009878:	d9001d84 	addi	r4,sp,118
 800987c:	1185883a 	add	r2,r2,r6
 8009880:	41000015 	stw	r4,0(r8)
 8009884:	41800115 	stw	r6,4(r8)
 8009888:	d8801c15 	stw	r2,112(sp)
 800988c:	d9401b15 	stw	r5,108(sp)
 8009890:	010001c4 	movi	r4,7
 8009894:	2140b00e 	bge	r4,r5,8009b58 <___vfiprintf_internal_r+0xeac>
 8009898:	1000f61e 	bne	r2,zero,8009c74 <___vfiprintf_internal_r+0xfc8>
 800989c:	3800b31e 	bne	r7,zero,8009b6c <___vfiprintf_internal_r+0xec0>
 80098a0:	0009883a 	mov	r4,zero
 80098a4:	300b883a 	mov	r5,r6
 80098a8:	d811883a 	mov	r8,sp
 80098ac:	01802004 	movi	r6,128
 80098b0:	19be5226 	beq	r3,r6,80091fc <__alt_data_end+0xfc0091fc>
 80098b4:	8521c83a 	sub	r16,r16,r20
 80098b8:	043e790e 	bge	zero,r16,80092a0 <__alt_data_end+0xfc0092a0>
 80098bc:	05400404 	movi	r21,16
 80098c0:	ac01b00e 	bge	r21,r16,8009f84 <___vfiprintf_internal_r+0x12d8>
 80098c4:	01420074 	movhi	r5,2049
 80098c8:	2946ab04 	addi	r5,r5,6828
 80098cc:	d9402315 	stw	r5,140(sp)
 80098d0:	070001c4 	movi	fp,7
 80098d4:	00000506 	br	80098ec <___vfiprintf_internal_r+0xc40>
 80098d8:	21400084 	addi	r5,r4,2
 80098dc:	42000204 	addi	r8,r8,8
 80098e0:	1809883a 	mov	r4,r3
 80098e4:	843ffc04 	addi	r16,r16,-16
 80098e8:	ac000d0e 	bge	r21,r16,8009920 <___vfiprintf_internal_r+0xc74>
 80098ec:	10800404 	addi	r2,r2,16
 80098f0:	20c00044 	addi	r3,r4,1
 80098f4:	44800015 	stw	r18,0(r8)
 80098f8:	45400115 	stw	r21,4(r8)
 80098fc:	d8801c15 	stw	r2,112(sp)
 8009900:	d8c01b15 	stw	r3,108(sp)
 8009904:	e0fff40e 	bge	fp,r3,80098d8 <__alt_data_end+0xfc0098d8>
 8009908:	1000101e 	bne	r2,zero,800994c <___vfiprintf_internal_r+0xca0>
 800990c:	843ffc04 	addi	r16,r16,-16
 8009910:	01400044 	movi	r5,1
 8009914:	0009883a 	mov	r4,zero
 8009918:	d811883a 	mov	r8,sp
 800991c:	ac3ff316 	blt	r21,r16,80098ec <__alt_data_end+0xfc0098ec>
 8009920:	d8c02317 	ldw	r3,140(sp)
 8009924:	1405883a 	add	r2,r2,r16
 8009928:	44000115 	stw	r16,4(r8)
 800992c:	40c00015 	stw	r3,0(r8)
 8009930:	d8801c15 	stw	r2,112(sp)
 8009934:	d9401b15 	stw	r5,108(sp)
 8009938:	00c001c4 	movi	r3,7
 800993c:	19401916 	blt	r3,r5,80099a4 <___vfiprintf_internal_r+0xcf8>
 8009940:	42000204 	addi	r8,r8,8
 8009944:	29400044 	addi	r5,r5,1
 8009948:	003e5506 	br	80092a0 <__alt_data_end+0xfc0092a0>
 800994c:	d9402017 	ldw	r5,128(sp)
 8009950:	d9002117 	ldw	r4,132(sp)
 8009954:	d9801a04 	addi	r6,sp,104
 8009958:	8008b980 	call	8008b98 <__sprint_r.part.0>
 800995c:	10000b1e 	bne	r2,zero,800998c <___vfiprintf_internal_r+0xce0>
 8009960:	d9001b17 	ldw	r4,108(sp)
 8009964:	d8801c17 	ldw	r2,112(sp)
 8009968:	d811883a 	mov	r8,sp
 800996c:	21400044 	addi	r5,r4,1
 8009970:	003fdc06 	br	80098e4 <__alt_data_end+0xfc0098e4>
 8009974:	d8801c17 	ldw	r2,112(sp)
 8009978:	10000426 	beq	r2,zero,800998c <___vfiprintf_internal_r+0xce0>
 800997c:	d9402017 	ldw	r5,128(sp)
 8009980:	d9002117 	ldw	r4,132(sp)
 8009984:	d9801a04 	addi	r6,sp,104
 8009988:	8008b980 	call	8008b98 <__sprint_r.part.0>
 800998c:	d9402017 	ldw	r5,128(sp)
 8009990:	2880030b 	ldhu	r2,12(r5)
 8009994:	1080100c 	andi	r2,r2,64
 8009998:	10014d1e 	bne	r2,zero,8009ed0 <___vfiprintf_internal_r+0x1224>
 800999c:	d8802417 	ldw	r2,144(sp)
 80099a0:	003d9706 	br	8009000 <__alt_data_end+0xfc009000>
 80099a4:	1000d21e 	bne	r2,zero,8009cf0 <___vfiprintf_internal_r+0x1044>
 80099a8:	00c00044 	movi	r3,1
 80099ac:	a005883a 	mov	r2,r20
 80099b0:	ddc00015 	stw	r23,0(sp)
 80099b4:	dd000115 	stw	r20,4(sp)
 80099b8:	dd001c15 	stw	r20,112(sp)
 80099bc:	d8c01b15 	stw	r3,108(sp)
 80099c0:	d811883a 	mov	r8,sp
 80099c4:	42000204 	addi	r8,r8,8
 80099c8:	8c40010c 	andi	r17,r17,4
 80099cc:	88004026 	beq	r17,zero,8009ad0 <___vfiprintf_internal_r+0xe24>
 80099d0:	d9002517 	ldw	r4,148(sp)
 80099d4:	24e3c83a 	sub	r17,r4,r19
 80099d8:	04403d0e 	bge	zero,r17,8009ad0 <___vfiprintf_internal_r+0xe24>
 80099dc:	04000404 	movi	r16,16
 80099e0:	8441a90e 	bge	r16,r17,800a088 <___vfiprintf_internal_r+0x13dc>
 80099e4:	00c20074 	movhi	r3,2049
 80099e8:	18c6af04 	addi	r3,r3,6844
 80099ec:	d9001b17 	ldw	r4,108(sp)
 80099f0:	d8c02315 	stw	r3,140(sp)
 80099f4:	050001c4 	movi	r20,7
 80099f8:	dd402117 	ldw	r21,132(sp)
 80099fc:	ddc02017 	ldw	r23,128(sp)
 8009a00:	00000506 	br	8009a18 <___vfiprintf_internal_r+0xd6c>
 8009a04:	21400084 	addi	r5,r4,2
 8009a08:	42000204 	addi	r8,r8,8
 8009a0c:	1809883a 	mov	r4,r3
 8009a10:	8c7ffc04 	addi	r17,r17,-16
 8009a14:	84400f0e 	bge	r16,r17,8009a54 <___vfiprintf_internal_r+0xda8>
 8009a18:	01420074 	movhi	r5,2049
 8009a1c:	10800404 	addi	r2,r2,16
 8009a20:	20c00044 	addi	r3,r4,1
 8009a24:	2946af04 	addi	r5,r5,6844
 8009a28:	41400015 	stw	r5,0(r8)
 8009a2c:	44000115 	stw	r16,4(r8)
 8009a30:	d8801c15 	stw	r2,112(sp)
 8009a34:	d8c01b15 	stw	r3,108(sp)
 8009a38:	a0fff20e 	bge	r20,r3,8009a04 <__alt_data_end+0xfc009a04>
 8009a3c:	1000141e 	bne	r2,zero,8009a90 <___vfiprintf_internal_r+0xde4>
 8009a40:	8c7ffc04 	addi	r17,r17,-16
 8009a44:	01400044 	movi	r5,1
 8009a48:	0009883a 	mov	r4,zero
 8009a4c:	d811883a 	mov	r8,sp
 8009a50:	847ff116 	blt	r16,r17,8009a18 <__alt_data_end+0xfc009a18>
 8009a54:	d8c02317 	ldw	r3,140(sp)
 8009a58:	1445883a 	add	r2,r2,r17
 8009a5c:	44400115 	stw	r17,4(r8)
 8009a60:	40c00015 	stw	r3,0(r8)
 8009a64:	d8801c15 	stw	r2,112(sp)
 8009a68:	d9401b15 	stw	r5,108(sp)
 8009a6c:	00c001c4 	movi	r3,7
 8009a70:	1940170e 	bge	r3,r5,8009ad0 <___vfiprintf_internal_r+0xe24>
 8009a74:	1000101e 	bne	r2,zero,8009ab8 <___vfiprintf_internal_r+0xe0c>
 8009a78:	d8802517 	ldw	r2,148(sp)
 8009a7c:	14c11616 	blt	r2,r19,8009ed8 <___vfiprintf_internal_r+0x122c>
 8009a80:	d9002417 	ldw	r4,144(sp)
 8009a84:	2089883a 	add	r4,r4,r2
 8009a88:	d9002415 	stw	r4,144(sp)
 8009a8c:	003e1806 	br	80092f0 <__alt_data_end+0xfc0092f0>
 8009a90:	d9801a04 	addi	r6,sp,104
 8009a94:	b80b883a 	mov	r5,r23
 8009a98:	a809883a 	mov	r4,r21
 8009a9c:	8008b980 	call	8008b98 <__sprint_r.part.0>
 8009aa0:	103fba1e 	bne	r2,zero,800998c <__alt_data_end+0xfc00998c>
 8009aa4:	d9001b17 	ldw	r4,108(sp)
 8009aa8:	d8801c17 	ldw	r2,112(sp)
 8009aac:	d811883a 	mov	r8,sp
 8009ab0:	21400044 	addi	r5,r4,1
 8009ab4:	003fd606 	br	8009a10 <__alt_data_end+0xfc009a10>
 8009ab8:	d9402017 	ldw	r5,128(sp)
 8009abc:	d9002117 	ldw	r4,132(sp)
 8009ac0:	d9801a04 	addi	r6,sp,104
 8009ac4:	8008b980 	call	8008b98 <__sprint_r.part.0>
 8009ac8:	103fb01e 	bne	r2,zero,800998c <__alt_data_end+0xfc00998c>
 8009acc:	d8801c17 	ldw	r2,112(sp)
 8009ad0:	d8c02517 	ldw	r3,148(sp)
 8009ad4:	1cc0010e 	bge	r3,r19,8009adc <___vfiprintf_internal_r+0xe30>
 8009ad8:	9807883a 	mov	r3,r19
 8009adc:	d9002417 	ldw	r4,144(sp)
 8009ae0:	20c9883a 	add	r4,r4,r3
 8009ae4:	d9002415 	stw	r4,144(sp)
 8009ae8:	103e0126 	beq	r2,zero,80092f0 <__alt_data_end+0xfc0092f0>
 8009aec:	d9402017 	ldw	r5,128(sp)
 8009af0:	d9002117 	ldw	r4,132(sp)
 8009af4:	d9801a04 	addi	r6,sp,104
 8009af8:	8008b980 	call	8008b98 <__sprint_r.part.0>
 8009afc:	103dfc26 	beq	r2,zero,80092f0 <__alt_data_end+0xfc0092f0>
 8009b00:	003fa206 	br	800998c <__alt_data_end+0xfc00998c>
 8009b04:	d9402017 	ldw	r5,128(sp)
 8009b08:	d9002117 	ldw	r4,132(sp)
 8009b0c:	d9801a04 	addi	r6,sp,104
 8009b10:	d9c02b15 	stw	r7,172(sp)
 8009b14:	8008b980 	call	8008b98 <__sprint_r.part.0>
 8009b18:	d9c02b17 	ldw	r7,172(sp)
 8009b1c:	103f9b1e 	bne	r2,zero,800998c <__alt_data_end+0xfc00998c>
 8009b20:	d9001b17 	ldw	r4,108(sp)
 8009b24:	d8801c17 	ldw	r2,112(sp)
 8009b28:	d811883a 	mov	r8,sp
 8009b2c:	21800044 	addi	r6,r4,1
 8009b30:	003dbf06 	br	8009230 <__alt_data_end+0xfc009230>
 8009b34:	1000d81e 	bne	r2,zero,8009e98 <___vfiprintf_internal_r+0x11ec>
 8009b38:	d9001d87 	ldb	r4,118(sp)
 8009b3c:	20000a26 	beq	r4,zero,8009b68 <___vfiprintf_internal_r+0xebc>
 8009b40:	00800044 	movi	r2,1
 8009b44:	d9001d84 	addi	r4,sp,118
 8009b48:	100b883a 	mov	r5,r2
 8009b4c:	d9000015 	stw	r4,0(sp)
 8009b50:	d8800115 	stw	r2,4(sp)
 8009b54:	d811883a 	mov	r8,sp
 8009b58:	2809883a 	mov	r4,r5
 8009b5c:	42000204 	addi	r8,r8,8
 8009b60:	29400044 	addi	r5,r5,1
 8009b64:	003d9506 	br	80091bc <__alt_data_end+0xfc0091bc>
 8009b68:	3800fd26 	beq	r7,zero,8009f60 <___vfiprintf_internal_r+0x12b4>
 8009b6c:	00800084 	movi	r2,2
 8009b70:	d9001d04 	addi	r4,sp,116
 8009b74:	d9000015 	stw	r4,0(sp)
 8009b78:	d8800115 	stw	r2,4(sp)
 8009b7c:	01400044 	movi	r5,1
 8009b80:	d811883a 	mov	r8,sp
 8009b84:	2809883a 	mov	r4,r5
 8009b88:	42000204 	addi	r8,r8,8
 8009b8c:	29400044 	addi	r5,r5,1
 8009b90:	003f4606 	br	80098ac <__alt_data_end+0xfc0098ac>
 8009b94:	d8802517 	ldw	r2,148(sp)
 8009b98:	14c0010e 	bge	r2,r19,8009ba0 <___vfiprintf_internal_r+0xef4>
 8009b9c:	9805883a 	mov	r2,r19
 8009ba0:	d9402417 	ldw	r5,144(sp)
 8009ba4:	288b883a 	add	r5,r5,r2
 8009ba8:	d9402415 	stw	r5,144(sp)
 8009bac:	003dd006 	br	80092f0 <__alt_data_end+0xfc0092f0>
 8009bb0:	d8001d85 	stb	zero,118(sp)
 8009bb4:	80005d16 	blt	r16,zero,8009d2c <___vfiprintf_internal_r+0x1080>
 8009bb8:	00ffdfc4 	movi	r3,-129
 8009bbc:	9d04b03a 	or	r2,r19,r20
 8009bc0:	88e2703a 	and	r17,r17,r3
 8009bc4:	103d3726 	beq	r2,zero,80090a4 <__alt_data_end+0xfc0090a4>
 8009bc8:	002b883a 	mov	r21,zero
 8009bcc:	d9002617 	ldw	r4,152(sp)
 8009bd0:	ddc01a04 	addi	r23,sp,104
 8009bd4:	988003cc 	andi	r2,r19,15
 8009bd8:	a006973a 	slli	r3,r20,28
 8009bdc:	2085883a 	add	r2,r4,r2
 8009be0:	9826d13a 	srli	r19,r19,4
 8009be4:	10800003 	ldbu	r2,0(r2)
 8009be8:	a028d13a 	srli	r20,r20,4
 8009bec:	bdffffc4 	addi	r23,r23,-1
 8009bf0:	1ce6b03a 	or	r19,r3,r19
 8009bf4:	b8800005 	stb	r2,0(r23)
 8009bf8:	9d04b03a 	or	r2,r19,r20
 8009bfc:	103ff51e 	bne	r2,zero,8009bd4 <__alt_data_end+0xfc009bd4>
 8009c00:	d8801e17 	ldw	r2,120(sp)
 8009c04:	15e9c83a 	sub	r20,r2,r23
 8009c08:	003d2b06 	br	80090b8 <__alt_data_end+0xfc0090b8>
 8009c0c:	d9402017 	ldw	r5,128(sp)
 8009c10:	d9002117 	ldw	r4,132(sp)
 8009c14:	d9801a04 	addi	r6,sp,104
 8009c18:	8008b980 	call	8008b98 <__sprint_r.part.0>
 8009c1c:	103f5b1e 	bne	r2,zero,800998c <__alt_data_end+0xfc00998c>
 8009c20:	d8801c17 	ldw	r2,112(sp)
 8009c24:	d811883a 	mov	r8,sp
 8009c28:	003f6706 	br	80099c8 <__alt_data_end+0xfc0099c8>
 8009c2c:	d9402017 	ldw	r5,128(sp)
 8009c30:	d9002117 	ldw	r4,132(sp)
 8009c34:	d9801a04 	addi	r6,sp,104
 8009c38:	8008b980 	call	8008b98 <__sprint_r.part.0>
 8009c3c:	103f531e 	bne	r2,zero,800998c <__alt_data_end+0xfc00998c>
 8009c40:	d811883a 	mov	r8,sp
 8009c44:	003cd906 	br	8008fac <__alt_data_end+0xfc008fac>
 8009c48:	10803fcc 	andi	r2,r2,255
 8009c4c:	1080201c 	xori	r2,r2,128
 8009c50:	10bfe004 	addi	r2,r2,-128
 8009c54:	00c00c04 	movi	r3,48
 8009c58:	10ffe926 	beq	r2,r3,8009c00 <__alt_data_end+0xfc009c00>
 8009c5c:	b8ffffc5 	stb	r3,-1(r23)
 8009c60:	d8c01e17 	ldw	r3,120(sp)
 8009c64:	b8bfffc4 	addi	r2,r23,-1
 8009c68:	102f883a 	mov	r23,r2
 8009c6c:	18a9c83a 	sub	r20,r3,r2
 8009c70:	003d1106 	br	80090b8 <__alt_data_end+0xfc0090b8>
 8009c74:	d9402017 	ldw	r5,128(sp)
 8009c78:	d9002117 	ldw	r4,132(sp)
 8009c7c:	d9801a04 	addi	r6,sp,104
 8009c80:	d8c02a15 	stw	r3,168(sp)
 8009c84:	d9c02b15 	stw	r7,172(sp)
 8009c88:	8008b980 	call	8008b98 <__sprint_r.part.0>
 8009c8c:	d8c02a17 	ldw	r3,168(sp)
 8009c90:	d9c02b17 	ldw	r7,172(sp)
 8009c94:	103f3d1e 	bne	r2,zero,800998c <__alt_data_end+0xfc00998c>
 8009c98:	d9001b17 	ldw	r4,108(sp)
 8009c9c:	d8801c17 	ldw	r2,112(sp)
 8009ca0:	d811883a 	mov	r8,sp
 8009ca4:	21400044 	addi	r5,r4,1
 8009ca8:	003d4406 	br	80091bc <__alt_data_end+0xfc0091bc>
 8009cac:	d9402017 	ldw	r5,128(sp)
 8009cb0:	d9002117 	ldw	r4,132(sp)
 8009cb4:	d9801a04 	addi	r6,sp,104
 8009cb8:	d8c02a15 	stw	r3,168(sp)
 8009cbc:	8008b980 	call	8008b98 <__sprint_r.part.0>
 8009cc0:	d8c02a17 	ldw	r3,168(sp)
 8009cc4:	103f311e 	bne	r2,zero,800998c <__alt_data_end+0xfc00998c>
 8009cc8:	d9001b17 	ldw	r4,108(sp)
 8009ccc:	d8801c17 	ldw	r2,112(sp)
 8009cd0:	d811883a 	mov	r8,sp
 8009cd4:	21400044 	addi	r5,r4,1
 8009cd8:	003ef406 	br	80098ac <__alt_data_end+0xfc0098ac>
 8009cdc:	1000bd1e 	bne	r2,zero,8009fd4 <___vfiprintf_internal_r+0x1328>
 8009ce0:	01400044 	movi	r5,1
 8009ce4:	0009883a 	mov	r4,zero
 8009ce8:	d811883a 	mov	r8,sp
 8009cec:	003ef106 	br	80098b4 <__alt_data_end+0xfc0098b4>
 8009cf0:	d9402017 	ldw	r5,128(sp)
 8009cf4:	d9002117 	ldw	r4,132(sp)
 8009cf8:	d9801a04 	addi	r6,sp,104
 8009cfc:	8008b980 	call	8008b98 <__sprint_r.part.0>
 8009d00:	103f221e 	bne	r2,zero,800998c <__alt_data_end+0xfc00998c>
 8009d04:	d9401b17 	ldw	r5,108(sp)
 8009d08:	d8801c17 	ldw	r2,112(sp)
 8009d0c:	d811883a 	mov	r8,sp
 8009d10:	29400044 	addi	r5,r5,1
 8009d14:	003d6206 	br	80092a0 <__alt_data_end+0xfc0092a0>
 8009d18:	01420074 	movhi	r5,2049
 8009d1c:	29464a04 	addi	r5,r5,6440
 8009d20:	d9402615 	stw	r5,152(sp)
 8009d24:	d8c02215 	stw	r3,136(sp)
 8009d28:	1023883a 	mov	r17,r2
 8009d2c:	9d04b03a 	or	r2,r19,r20
 8009d30:	103fa51e 	bne	r2,zero,8009bc8 <__alt_data_end+0xfc009bc8>
 8009d34:	002b883a 	mov	r21,zero
 8009d38:	00800084 	movi	r2,2
 8009d3c:	003e4a06 	br	8009668 <__alt_data_end+0xfc009668>
 8009d40:	01420074 	movhi	r5,2049
 8009d44:	29464a04 	addi	r5,r5,6440
 8009d48:	002b883a 	mov	r21,zero
 8009d4c:	d9402615 	stw	r5,152(sp)
 8009d50:	003f9e06 	br	8009bcc <__alt_data_end+0xfc009bcc>
 8009d54:	d9402217 	ldw	r5,136(sp)
 8009d58:	d8001d85 	stb	zero,118(sp)
 8009d5c:	0029883a 	mov	r20,zero
 8009d60:	28800104 	addi	r2,r5,4
 8009d64:	2cc00017 	ldw	r19,0(r5)
 8009d68:	803e3a16 	blt	r16,zero,8009654 <__alt_data_end+0xfc009654>
 8009d6c:	00ffdfc4 	movi	r3,-129
 8009d70:	d8802215 	stw	r2,136(sp)
 8009d74:	88e2703a 	and	r17,r17,r3
 8009d78:	002b883a 	mov	r21,zero
 8009d7c:	983e9b26 	beq	r19,zero,80097ec <__alt_data_end+0xfc0097ec>
 8009d80:	00800244 	movi	r2,9
 8009d84:	14fdc936 	bltu	r2,r19,80094ac <__alt_data_end+0xfc0094ac>
 8009d88:	003e9a06 	br	80097f4 <__alt_data_end+0xfc0097f4>
 8009d8c:	00800c04 	movi	r2,48
 8009d90:	d8c01d45 	stb	r3,117(sp)
 8009d94:	d8801d05 	stb	r2,116(sp)
 8009d98:	d8001d85 	stb	zero,118(sp)
 8009d9c:	88c00094 	ori	r3,r17,2
 8009da0:	80009c16 	blt	r16,zero,800a014 <___vfiprintf_internal_r+0x1368>
 8009da4:	00bfdfc4 	movi	r2,-129
 8009da8:	88a2703a 	and	r17,r17,r2
 8009dac:	8c400094 	ori	r17,r17,2
 8009db0:	002b883a 	mov	r21,zero
 8009db4:	003f8506 	br	8009bcc <__alt_data_end+0xfc009bcc>
 8009db8:	b029883a 	mov	r20,r22
 8009dbc:	003c0b06 	br	8008dec <__alt_data_end+0xfc008dec>
 8009dc0:	04e7c83a 	sub	r19,zero,r19
 8009dc4:	05400b44 	movi	r21,45
 8009dc8:	9804c03a 	cmpne	r2,r19,zero
 8009dcc:	0529c83a 	sub	r20,zero,r20
 8009dd0:	dd401d85 	stb	r21,118(sp)
 8009dd4:	a0a9c83a 	sub	r20,r20,r2
 8009dd8:	80009716 	blt	r16,zero,800a038 <___vfiprintf_internal_r+0x138c>
 8009ddc:	00bfdfc4 	movi	r2,-129
 8009de0:	88a2703a 	and	r17,r17,r2
 8009de4:	003db006 	br	80094a8 <__alt_data_end+0xfc0094a8>
 8009de8:	b0c00007 	ldb	r3,0(r22)
 8009dec:	003c0c06 	br	8008e20 <__alt_data_end+0xfc008e20>
 8009df0:	8880100c 	andi	r2,r17,64
 8009df4:	d8001d85 	stb	zero,118(sp)
 8009df8:	1000461e 	bne	r2,zero,8009f14 <___vfiprintf_internal_r+0x1268>
 8009dfc:	d9002217 	ldw	r4,136(sp)
 8009e00:	0029883a 	mov	r20,zero
 8009e04:	20800104 	addi	r2,r4,4
 8009e08:	24c00017 	ldw	r19,0(r4)
 8009e0c:	803df80e 	bge	r16,zero,80095f0 <__alt_data_end+0xfc0095f0>
 8009e10:	9d06b03a 	or	r3,r19,r20
 8009e14:	d8802215 	stw	r2,136(sp)
 8009e18:	183d5e1e 	bne	r3,zero,8009394 <__alt_data_end+0xfc009394>
 8009e1c:	002b883a 	mov	r21,zero
 8009e20:	0005883a 	mov	r2,zero
 8009e24:	003e1006 	br	8009668 <__alt_data_end+0xfc009668>
 8009e28:	8880040c 	andi	r2,r17,16
 8009e2c:	1000321e 	bne	r2,zero,8009ef8 <___vfiprintf_internal_r+0x124c>
 8009e30:	8c40100c 	andi	r17,r17,64
 8009e34:	88008d26 	beq	r17,zero,800a06c <___vfiprintf_internal_r+0x13c0>
 8009e38:	d9402217 	ldw	r5,136(sp)
 8009e3c:	d8c02417 	ldw	r3,144(sp)
 8009e40:	28800017 	ldw	r2,0(r5)
 8009e44:	29400104 	addi	r5,r5,4
 8009e48:	d9402215 	stw	r5,136(sp)
 8009e4c:	10c0000d 	sth	r3,0(r2)
 8009e50:	003bca06 	br	8008d7c <__alt_data_end+0xfc008d7c>
 8009e54:	8880100c 	andi	r2,r17,64
 8009e58:	10003a26 	beq	r2,zero,8009f44 <___vfiprintf_internal_r+0x1298>
 8009e5c:	d8802217 	ldw	r2,136(sp)
 8009e60:	14c0000f 	ldh	r19,0(r2)
 8009e64:	10800104 	addi	r2,r2,4
 8009e68:	d8802215 	stw	r2,136(sp)
 8009e6c:	9829d7fa 	srai	r20,r19,31
 8009e70:	a005883a 	mov	r2,r20
 8009e74:	003d8506 	br	800948c <__alt_data_end+0xfc00948c>
 8009e78:	8880100c 	andi	r2,r17,64
 8009e7c:	10002b26 	beq	r2,zero,8009f2c <___vfiprintf_internal_r+0x1280>
 8009e80:	d8802217 	ldw	r2,136(sp)
 8009e84:	0029883a 	mov	r20,zero
 8009e88:	14c0000b 	ldhu	r19,0(r2)
 8009e8c:	10800104 	addi	r2,r2,4
 8009e90:	d8802215 	stw	r2,136(sp)
 8009e94:	003d5d06 	br	800940c <__alt_data_end+0xfc00940c>
 8009e98:	d9402017 	ldw	r5,128(sp)
 8009e9c:	d9002117 	ldw	r4,132(sp)
 8009ea0:	d9801a04 	addi	r6,sp,104
 8009ea4:	d8c02a15 	stw	r3,168(sp)
 8009ea8:	d9c02b15 	stw	r7,172(sp)
 8009eac:	8008b980 	call	8008b98 <__sprint_r.part.0>
 8009eb0:	d8c02a17 	ldw	r3,168(sp)
 8009eb4:	d9c02b17 	ldw	r7,172(sp)
 8009eb8:	103eb41e 	bne	r2,zero,800998c <__alt_data_end+0xfc00998c>
 8009ebc:	d9001b17 	ldw	r4,108(sp)
 8009ec0:	d8801c17 	ldw	r2,112(sp)
 8009ec4:	d811883a 	mov	r8,sp
 8009ec8:	21400044 	addi	r5,r4,1
 8009ecc:	003e6706 	br	800986c <__alt_data_end+0xfc00986c>
 8009ed0:	00bfffc4 	movi	r2,-1
 8009ed4:	003c4a06 	br	8009000 <__alt_data_end+0xfc009000>
 8009ed8:	9805883a 	mov	r2,r19
 8009edc:	003ee806 	br	8009a80 <__alt_data_end+0xfc009a80>
 8009ee0:	d8c02217 	ldw	r3,136(sp)
 8009ee4:	0029883a 	mov	r20,zero
 8009ee8:	18800104 	addi	r2,r3,4
 8009eec:	1cc0000b 	ldhu	r19,0(r3)
 8009ef0:	803f9e0e 	bge	r16,zero,8009d6c <__alt_data_end+0xfc009d6c>
 8009ef4:	003dd706 	br	8009654 <__alt_data_end+0xfc009654>
 8009ef8:	d8c02217 	ldw	r3,136(sp)
 8009efc:	d9002417 	ldw	r4,144(sp)
 8009f00:	18800017 	ldw	r2,0(r3)
 8009f04:	18c00104 	addi	r3,r3,4
 8009f08:	d8c02215 	stw	r3,136(sp)
 8009f0c:	11000015 	stw	r4,0(r2)
 8009f10:	003b9a06 	br	8008d7c <__alt_data_end+0xfc008d7c>
 8009f14:	d8c02217 	ldw	r3,136(sp)
 8009f18:	0029883a 	mov	r20,zero
 8009f1c:	18800104 	addi	r2,r3,4
 8009f20:	1cc0000b 	ldhu	r19,0(r3)
 8009f24:	803db20e 	bge	r16,zero,80095f0 <__alt_data_end+0xfc0095f0>
 8009f28:	003fb906 	br	8009e10 <__alt_data_end+0xfc009e10>
 8009f2c:	d9002217 	ldw	r4,136(sp)
 8009f30:	0029883a 	mov	r20,zero
 8009f34:	24c00017 	ldw	r19,0(r4)
 8009f38:	21000104 	addi	r4,r4,4
 8009f3c:	d9002215 	stw	r4,136(sp)
 8009f40:	003d3206 	br	800940c <__alt_data_end+0xfc00940c>
 8009f44:	d8c02217 	ldw	r3,136(sp)
 8009f48:	1cc00017 	ldw	r19,0(r3)
 8009f4c:	18c00104 	addi	r3,r3,4
 8009f50:	d8c02215 	stw	r3,136(sp)
 8009f54:	9829d7fa 	srai	r20,r19,31
 8009f58:	a005883a 	mov	r2,r20
 8009f5c:	003d4b06 	br	800948c <__alt_data_end+0xfc00948c>
 8009f60:	0009883a 	mov	r4,zero
 8009f64:	01400044 	movi	r5,1
 8009f68:	d811883a 	mov	r8,sp
 8009f6c:	003e4f06 	br	80098ac <__alt_data_end+0xfc0098ac>
 8009f70:	d8c02215 	stw	r3,136(sp)
 8009f74:	002b883a 	mov	r21,zero
 8009f78:	003db806 	br	800965c <__alt_data_end+0xfc00965c>
 8009f7c:	d811883a 	mov	r8,sp
 8009f80:	003e9606 	br	80099dc <__alt_data_end+0xfc0099dc>
 8009f84:	01020074 	movhi	r4,2049
 8009f88:	2106ab04 	addi	r4,r4,6828
 8009f8c:	d9002315 	stw	r4,140(sp)
 8009f90:	003e6306 	br	8009920 <__alt_data_end+0xfc009920>
 8009f94:	b0c00043 	ldbu	r3,1(r22)
 8009f98:	8c400814 	ori	r17,r17,32
 8009f9c:	b5800044 	addi	r22,r22,1
 8009fa0:	18c03fcc 	andi	r3,r3,255
 8009fa4:	18c0201c 	xori	r3,r3,128
 8009fa8:	18ffe004 	addi	r3,r3,-128
 8009fac:	003b9c06 	br	8008e20 <__alt_data_end+0xfc008e20>
 8009fb0:	b809883a 	mov	r4,r23
 8009fb4:	da002a15 	stw	r8,168(sp)
 8009fb8:	800141c0 	call	800141c <strlen>
 8009fbc:	1029883a 	mov	r20,r2
 8009fc0:	dd401d83 	ldbu	r21,118(sp)
 8009fc4:	df002215 	stw	fp,136(sp)
 8009fc8:	0021883a 	mov	r16,zero
 8009fcc:	da002a17 	ldw	r8,168(sp)
 8009fd0:	003c3906 	br	80090b8 <__alt_data_end+0xfc0090b8>
 8009fd4:	d9402017 	ldw	r5,128(sp)
 8009fd8:	d9002117 	ldw	r4,132(sp)
 8009fdc:	d9801a04 	addi	r6,sp,104
 8009fe0:	8008b980 	call	8008b98 <__sprint_r.part.0>
 8009fe4:	103e691e 	bne	r2,zero,800998c <__alt_data_end+0xfc00998c>
 8009fe8:	d9001b17 	ldw	r4,108(sp)
 8009fec:	d8801c17 	ldw	r2,112(sp)
 8009ff0:	d811883a 	mov	r8,sp
 8009ff4:	21400044 	addi	r5,r4,1
 8009ff8:	003e2e06 	br	80098b4 <__alt_data_end+0xfc0098b4>
 8009ffc:	01020074 	movhi	r4,2049
 800a000:	2106af04 	addi	r4,r4,6844
 800a004:	d9002315 	stw	r4,140(sp)
 800a008:	d9001b17 	ldw	r4,108(sp)
 800a00c:	21000044 	addi	r4,r4,1
 800a010:	003c5e06 	br	800918c <__alt_data_end+0xfc00918c>
 800a014:	002b883a 	mov	r21,zero
 800a018:	00800084 	movi	r2,2
 800a01c:	10803fcc 	andi	r2,r2,255
 800a020:	01000044 	movi	r4,1
 800a024:	11002b26 	beq	r2,r4,800a0d4 <___vfiprintf_internal_r+0x1428>
 800a028:	01000084 	movi	r4,2
 800a02c:	11002b1e 	bne	r2,r4,800a0dc <___vfiprintf_internal_r+0x1430>
 800a030:	1823883a 	mov	r17,r3
 800a034:	003ee506 	br	8009bcc <__alt_data_end+0xfc009bcc>
 800a038:	8807883a 	mov	r3,r17
 800a03c:	00800044 	movi	r2,1
 800a040:	003ff606 	br	800a01c <__alt_data_end+0xfc00a01c>
 800a044:	00800184 	movi	r2,6
 800a048:	1400012e 	bgeu	r2,r16,800a050 <___vfiprintf_internal_r+0x13a4>
 800a04c:	1021883a 	mov	r16,r2
 800a050:	8029883a 	mov	r20,r16
 800a054:	8027883a 	mov	r19,r16
 800a058:	80002216 	blt	r16,zero,800a0e4 <___vfiprintf_internal_r+0x1438>
 800a05c:	05c20074 	movhi	r23,2049
 800a060:	df002215 	stw	fp,136(sp)
 800a064:	bdc64f04 	addi	r23,r23,6460
 800a068:	003cfb06 	br	8009458 <__alt_data_end+0xfc009458>
 800a06c:	d9002217 	ldw	r4,136(sp)
 800a070:	d9402417 	ldw	r5,144(sp)
 800a074:	20800017 	ldw	r2,0(r4)
 800a078:	21000104 	addi	r4,r4,4
 800a07c:	d9002215 	stw	r4,136(sp)
 800a080:	11400015 	stw	r5,0(r2)
 800a084:	003b3d06 	br	8008d7c <__alt_data_end+0xfc008d7c>
 800a088:	01420074 	movhi	r5,2049
 800a08c:	2946af04 	addi	r5,r5,6844
 800a090:	d9402315 	stw	r5,140(sp)
 800a094:	d9401b17 	ldw	r5,108(sp)
 800a098:	29400044 	addi	r5,r5,1
 800a09c:	003e6d06 	br	8009a54 <__alt_data_end+0xfc009a54>
 800a0a0:	8029883a 	mov	r20,r16
 800a0a4:	dd401d83 	ldbu	r21,118(sp)
 800a0a8:	df002215 	stw	fp,136(sp)
 800a0ac:	0021883a 	mov	r16,zero
 800a0b0:	003c0106 	br	80090b8 <__alt_data_end+0xfc0090b8>
 800a0b4:	00c20074 	movhi	r3,2049
 800a0b8:	18c6ab04 	addi	r3,r3,6828
 800a0bc:	d8c02315 	stw	r3,140(sp)
 800a0c0:	280d883a 	mov	r6,r5
 800a0c4:	003c6906 	br	800926c <__alt_data_end+0xfc00926c>
 800a0c8:	802d883a 	mov	r22,r16
 800a0cc:	0021883a 	mov	r16,zero
 800a0d0:	003b5406 	br	8008e24 <__alt_data_end+0xfc008e24>
 800a0d4:	1823883a 	mov	r17,r3
 800a0d8:	003cf306 	br	80094a8 <__alt_data_end+0xfc0094a8>
 800a0dc:	1823883a 	mov	r17,r3
 800a0e0:	003cad06 	br	8009398 <__alt_data_end+0xfc009398>
 800a0e4:	0027883a 	mov	r19,zero
 800a0e8:	003fdc06 	br	800a05c <__alt_data_end+0xfc00a05c>
 800a0ec:	d9402217 	ldw	r5,136(sp)
 800a0f0:	8005883a 	mov	r2,r16
 800a0f4:	b0c00043 	ldbu	r3,1(r22)
 800a0f8:	2c000017 	ldw	r16,0(r5)
 800a0fc:	29000104 	addi	r4,r5,4
 800a100:	d9002215 	stw	r4,136(sp)
 800a104:	102d883a 	mov	r22,r2
 800a108:	803fa50e 	bge	r16,zero,8009fa0 <__alt_data_end+0xfc009fa0>
 800a10c:	18c03fcc 	andi	r3,r3,255
 800a110:	18c0201c 	xori	r3,r3,128
 800a114:	043fffc4 	movi	r16,-1
 800a118:	18ffe004 	addi	r3,r3,-128
 800a11c:	003b4006 	br	8008e20 <__alt_data_end+0xfc008e20>
 800a120:	d9402303 	ldbu	r5,140(sp)
 800a124:	d9401d85 	stb	r5,118(sp)
 800a128:	003cae06 	br	80093e4 <__alt_data_end+0xfc0093e4>
 800a12c:	d8c02303 	ldbu	r3,140(sp)
 800a130:	d8c01d85 	stb	r3,118(sp)
 800a134:	003d1406 	br	8009588 <__alt_data_end+0xfc009588>
 800a138:	d8c02303 	ldbu	r3,140(sp)
 800a13c:	d8c01d85 	stb	r3,118(sp)
 800a140:	003cca06 	br	800946c <__alt_data_end+0xfc00946c>
 800a144:	8880004c 	andi	r2,r17,1
 800a148:	002b883a 	mov	r21,zero
 800a14c:	10000526 	beq	r2,zero,800a164 <___vfiprintf_internal_r+0x14b8>
 800a150:	00800c04 	movi	r2,48
 800a154:	d88019c5 	stb	r2,103(sp)
 800a158:	dd002817 	ldw	r20,160(sp)
 800a15c:	ddc019c4 	addi	r23,sp,103
 800a160:	003bd506 	br	80090b8 <__alt_data_end+0xfc0090b8>
 800a164:	0029883a 	mov	r20,zero
 800a168:	ddc01a04 	addi	r23,sp,104
 800a16c:	003bd206 	br	80090b8 <__alt_data_end+0xfc0090b8>
 800a170:	d9002303 	ldbu	r4,140(sp)
 800a174:	d9001d85 	stb	r4,118(sp)
 800a178:	003da606 	br	8009814 <__alt_data_end+0xfc009814>
 800a17c:	d8c02303 	ldbu	r3,140(sp)
 800a180:	d8c01d85 	stb	r3,118(sp)
 800a184:	003c7606 	br	8009360 <__alt_data_end+0xfc009360>
 800a188:	d8c02303 	ldbu	r3,140(sp)
 800a18c:	d8c01d85 	stb	r3,118(sp)
 800a190:	003c6506 	br	8009328 <__alt_data_end+0xfc009328>
 800a194:	d9002303 	ldbu	r4,140(sp)
 800a198:	d9001d85 	stb	r4,118(sp)
 800a19c:	003d3d06 	br	8009694 <__alt_data_end+0xfc009694>
 800a1a0:	d8c02303 	ldbu	r3,140(sp)
 800a1a4:	d8c01d85 	stb	r3,118(sp)
 800a1a8:	003d1d06 	br	8009620 <__alt_data_end+0xfc009620>
 800a1ac:	d8c02303 	ldbu	r3,140(sp)
 800a1b0:	d8c01d85 	stb	r3,118(sp)
 800a1b4:	003d0306 	br	80095c4 <__alt_data_end+0xfc0095c4>

0800a1b8 <__vfiprintf_internal>:
 800a1b8:	00820074 	movhi	r2,2049
 800a1bc:	10896304 	addi	r2,r2,9612
 800a1c0:	300f883a 	mov	r7,r6
 800a1c4:	280d883a 	mov	r6,r5
 800a1c8:	200b883a 	mov	r5,r4
 800a1cc:	11000017 	ldw	r4,0(r2)
 800a1d0:	8008cac1 	jmpi	8008cac <___vfiprintf_internal_r>

0800a1d4 <__sbprintf>:
 800a1d4:	2880030b 	ldhu	r2,12(r5)
 800a1d8:	2ac01917 	ldw	r11,100(r5)
 800a1dc:	2a80038b 	ldhu	r10,14(r5)
 800a1e0:	2a400717 	ldw	r9,28(r5)
 800a1e4:	2a000917 	ldw	r8,36(r5)
 800a1e8:	defee204 	addi	sp,sp,-1144
 800a1ec:	00c10004 	movi	r3,1024
 800a1f0:	dc011a15 	stw	r16,1128(sp)
 800a1f4:	10bfff4c 	andi	r2,r2,65533
 800a1f8:	2821883a 	mov	r16,r5
 800a1fc:	d8cb883a 	add	r5,sp,r3
 800a200:	dc811c15 	stw	r18,1136(sp)
 800a204:	dc411b15 	stw	r17,1132(sp)
 800a208:	dfc11d15 	stw	ra,1140(sp)
 800a20c:	2025883a 	mov	r18,r4
 800a210:	d881030d 	sth	r2,1036(sp)
 800a214:	dac11915 	stw	r11,1124(sp)
 800a218:	da81038d 	sth	r10,1038(sp)
 800a21c:	da410715 	stw	r9,1052(sp)
 800a220:	da010915 	stw	r8,1060(sp)
 800a224:	dec10015 	stw	sp,1024(sp)
 800a228:	dec10415 	stw	sp,1040(sp)
 800a22c:	d8c10215 	stw	r3,1032(sp)
 800a230:	d8c10515 	stw	r3,1044(sp)
 800a234:	d8010615 	stw	zero,1048(sp)
 800a238:	8008cac0 	call	8008cac <___vfiprintf_internal_r>
 800a23c:	1023883a 	mov	r17,r2
 800a240:	10000416 	blt	r2,zero,800a254 <__sbprintf+0x80>
 800a244:	d9410004 	addi	r5,sp,1024
 800a248:	9009883a 	mov	r4,r18
 800a24c:	80054880 	call	8005488 <_fflush_r>
 800a250:	10000d1e 	bne	r2,zero,800a288 <__sbprintf+0xb4>
 800a254:	d881030b 	ldhu	r2,1036(sp)
 800a258:	1080100c 	andi	r2,r2,64
 800a25c:	10000326 	beq	r2,zero,800a26c <__sbprintf+0x98>
 800a260:	8080030b 	ldhu	r2,12(r16)
 800a264:	10801014 	ori	r2,r2,64
 800a268:	8080030d 	sth	r2,12(r16)
 800a26c:	8805883a 	mov	r2,r17
 800a270:	dfc11d17 	ldw	ra,1140(sp)
 800a274:	dc811c17 	ldw	r18,1136(sp)
 800a278:	dc411b17 	ldw	r17,1132(sp)
 800a27c:	dc011a17 	ldw	r16,1128(sp)
 800a280:	dec11e04 	addi	sp,sp,1144
 800a284:	f800283a 	ret
 800a288:	047fffc4 	movi	r17,-1
 800a28c:	003ff106 	br	800a254 <__alt_data_end+0xfc00a254>

0800a290 <_write_r>:
 800a290:	defffd04 	addi	sp,sp,-12
 800a294:	2805883a 	mov	r2,r5
 800a298:	dc000015 	stw	r16,0(sp)
 800a29c:	04020074 	movhi	r16,2049
 800a2a0:	dc400115 	stw	r17,4(sp)
 800a2a4:	300b883a 	mov	r5,r6
 800a2a8:	840c2904 	addi	r16,r16,12452
 800a2ac:	2023883a 	mov	r17,r4
 800a2b0:	380d883a 	mov	r6,r7
 800a2b4:	1009883a 	mov	r4,r2
 800a2b8:	dfc00215 	stw	ra,8(sp)
 800a2bc:	80000015 	stw	zero,0(r16)
 800a2c0:	800ea080 	call	800ea08 <write>
 800a2c4:	00ffffc4 	movi	r3,-1
 800a2c8:	10c00526 	beq	r2,r3,800a2e0 <_write_r+0x50>
 800a2cc:	dfc00217 	ldw	ra,8(sp)
 800a2d0:	dc400117 	ldw	r17,4(sp)
 800a2d4:	dc000017 	ldw	r16,0(sp)
 800a2d8:	dec00304 	addi	sp,sp,12
 800a2dc:	f800283a 	ret
 800a2e0:	80c00017 	ldw	r3,0(r16)
 800a2e4:	183ff926 	beq	r3,zero,800a2cc <__alt_data_end+0xfc00a2cc>
 800a2e8:	88c00015 	stw	r3,0(r17)
 800a2ec:	003ff706 	br	800a2cc <__alt_data_end+0xfc00a2cc>

0800a2f0 <_close_r>:
 800a2f0:	defffd04 	addi	sp,sp,-12
 800a2f4:	dc000015 	stw	r16,0(sp)
 800a2f8:	04020074 	movhi	r16,2049
 800a2fc:	dc400115 	stw	r17,4(sp)
 800a300:	840c2904 	addi	r16,r16,12452
 800a304:	2023883a 	mov	r17,r4
 800a308:	2809883a 	mov	r4,r5
 800a30c:	dfc00215 	stw	ra,8(sp)
 800a310:	80000015 	stw	zero,0(r16)
 800a314:	800e1cc0 	call	800e1cc <close>
 800a318:	00ffffc4 	movi	r3,-1
 800a31c:	10c00526 	beq	r2,r3,800a334 <_close_r+0x44>
 800a320:	dfc00217 	ldw	ra,8(sp)
 800a324:	dc400117 	ldw	r17,4(sp)
 800a328:	dc000017 	ldw	r16,0(sp)
 800a32c:	dec00304 	addi	sp,sp,12
 800a330:	f800283a 	ret
 800a334:	80c00017 	ldw	r3,0(r16)
 800a338:	183ff926 	beq	r3,zero,800a320 <__alt_data_end+0xfc00a320>
 800a33c:	88c00015 	stw	r3,0(r17)
 800a340:	003ff706 	br	800a320 <__alt_data_end+0xfc00a320>

0800a344 <_calloc_r>:
 800a344:	defffe04 	addi	sp,sp,-8
 800a348:	2805883a 	mov	r2,r5
 800a34c:	dc000015 	stw	r16,0(sp)
 800a350:	300b883a 	mov	r5,r6
 800a354:	2021883a 	mov	r16,r4
 800a358:	1009883a 	mov	r4,r2
 800a35c:	dfc00115 	stw	ra,4(sp)
 800a360:	80012b40 	call	80012b4 <__mulsi3>
 800a364:	100b883a 	mov	r5,r2
 800a368:	8009883a 	mov	r4,r16
 800a36c:	80065e00 	call	80065e0 <_malloc_r>
 800a370:	10002926 	beq	r2,zero,800a418 <_calloc_r+0xd4>
 800a374:	11bfff17 	ldw	r6,-4(r2)
 800a378:	1021883a 	mov	r16,r2
 800a37c:	00bfff04 	movi	r2,-4
 800a380:	308c703a 	and	r6,r6,r2
 800a384:	00c00904 	movi	r3,36
 800a388:	308d883a 	add	r6,r6,r2
 800a38c:	19801636 	bltu	r3,r6,800a3e8 <_calloc_r+0xa4>
 800a390:	008004c4 	movi	r2,19
 800a394:	11800b2e 	bgeu	r2,r6,800a3c4 <_calloc_r+0x80>
 800a398:	80000015 	stw	zero,0(r16)
 800a39c:	80000115 	stw	zero,4(r16)
 800a3a0:	008006c4 	movi	r2,27
 800a3a4:	11801a2e 	bgeu	r2,r6,800a410 <_calloc_r+0xcc>
 800a3a8:	80000215 	stw	zero,8(r16)
 800a3ac:	80000315 	stw	zero,12(r16)
 800a3b0:	30c0151e 	bne	r6,r3,800a408 <_calloc_r+0xc4>
 800a3b4:	80000415 	stw	zero,16(r16)
 800a3b8:	80800604 	addi	r2,r16,24
 800a3bc:	80000515 	stw	zero,20(r16)
 800a3c0:	00000106 	br	800a3c8 <_calloc_r+0x84>
 800a3c4:	8005883a 	mov	r2,r16
 800a3c8:	10000015 	stw	zero,0(r2)
 800a3cc:	10000115 	stw	zero,4(r2)
 800a3d0:	10000215 	stw	zero,8(r2)
 800a3d4:	8005883a 	mov	r2,r16
 800a3d8:	dfc00117 	ldw	ra,4(sp)
 800a3dc:	dc000017 	ldw	r16,0(sp)
 800a3e0:	dec00204 	addi	sp,sp,8
 800a3e4:	f800283a 	ret
 800a3e8:	000b883a 	mov	r5,zero
 800a3ec:	8009883a 	mov	r4,r16
 800a3f0:	80071740 	call	8007174 <memset>
 800a3f4:	8005883a 	mov	r2,r16
 800a3f8:	dfc00117 	ldw	ra,4(sp)
 800a3fc:	dc000017 	ldw	r16,0(sp)
 800a400:	dec00204 	addi	sp,sp,8
 800a404:	f800283a 	ret
 800a408:	80800404 	addi	r2,r16,16
 800a40c:	003fee06 	br	800a3c8 <__alt_data_end+0xfc00a3c8>
 800a410:	80800204 	addi	r2,r16,8
 800a414:	003fec06 	br	800a3c8 <__alt_data_end+0xfc00a3c8>
 800a418:	0005883a 	mov	r2,zero
 800a41c:	003fee06 	br	800a3d8 <__alt_data_end+0xfc00a3d8>

0800a420 <_fclose_r>:
 800a420:	28003926 	beq	r5,zero,800a508 <_fclose_r+0xe8>
 800a424:	defffc04 	addi	sp,sp,-16
 800a428:	dc400115 	stw	r17,4(sp)
 800a42c:	dc000015 	stw	r16,0(sp)
 800a430:	dfc00315 	stw	ra,12(sp)
 800a434:	dc800215 	stw	r18,8(sp)
 800a438:	2023883a 	mov	r17,r4
 800a43c:	2821883a 	mov	r16,r5
 800a440:	20000226 	beq	r4,zero,800a44c <_fclose_r+0x2c>
 800a444:	20800e17 	ldw	r2,56(r4)
 800a448:	10002726 	beq	r2,zero,800a4e8 <_fclose_r+0xc8>
 800a44c:	8080030f 	ldh	r2,12(r16)
 800a450:	1000071e 	bne	r2,zero,800a470 <_fclose_r+0x50>
 800a454:	0005883a 	mov	r2,zero
 800a458:	dfc00317 	ldw	ra,12(sp)
 800a45c:	dc800217 	ldw	r18,8(sp)
 800a460:	dc400117 	ldw	r17,4(sp)
 800a464:	dc000017 	ldw	r16,0(sp)
 800a468:	dec00404 	addi	sp,sp,16
 800a46c:	f800283a 	ret
 800a470:	800b883a 	mov	r5,r16
 800a474:	8809883a 	mov	r4,r17
 800a478:	800526c0 	call	800526c <__sflush_r>
 800a47c:	1025883a 	mov	r18,r2
 800a480:	80800b17 	ldw	r2,44(r16)
 800a484:	10000426 	beq	r2,zero,800a498 <_fclose_r+0x78>
 800a488:	81400717 	ldw	r5,28(r16)
 800a48c:	8809883a 	mov	r4,r17
 800a490:	103ee83a 	callr	r2
 800a494:	10001616 	blt	r2,zero,800a4f0 <_fclose_r+0xd0>
 800a498:	8080030b 	ldhu	r2,12(r16)
 800a49c:	1080200c 	andi	r2,r2,128
 800a4a0:	1000151e 	bne	r2,zero,800a4f8 <_fclose_r+0xd8>
 800a4a4:	81400c17 	ldw	r5,48(r16)
 800a4a8:	28000526 	beq	r5,zero,800a4c0 <_fclose_r+0xa0>
 800a4ac:	80801004 	addi	r2,r16,64
 800a4b0:	28800226 	beq	r5,r2,800a4bc <_fclose_r+0x9c>
 800a4b4:	8809883a 	mov	r4,r17
 800a4b8:	80059e80 	call	80059e8 <_free_r>
 800a4bc:	80000c15 	stw	zero,48(r16)
 800a4c0:	81401117 	ldw	r5,68(r16)
 800a4c4:	28000326 	beq	r5,zero,800a4d4 <_fclose_r+0xb4>
 800a4c8:	8809883a 	mov	r4,r17
 800a4cc:	80059e80 	call	80059e8 <_free_r>
 800a4d0:	80001115 	stw	zero,68(r16)
 800a4d4:	80058840 	call	8005884 <__sfp_lock_acquire>
 800a4d8:	8000030d 	sth	zero,12(r16)
 800a4dc:	80058880 	call	8005888 <__sfp_lock_release>
 800a4e0:	9005883a 	mov	r2,r18
 800a4e4:	003fdc06 	br	800a458 <__alt_data_end+0xfc00a458>
 800a4e8:	80058740 	call	8005874 <__sinit>
 800a4ec:	003fd706 	br	800a44c <__alt_data_end+0xfc00a44c>
 800a4f0:	04bfffc4 	movi	r18,-1
 800a4f4:	003fe806 	br	800a498 <__alt_data_end+0xfc00a498>
 800a4f8:	81400417 	ldw	r5,16(r16)
 800a4fc:	8809883a 	mov	r4,r17
 800a500:	80059e80 	call	80059e8 <_free_r>
 800a504:	003fe706 	br	800a4a4 <__alt_data_end+0xfc00a4a4>
 800a508:	0005883a 	mov	r2,zero
 800a50c:	f800283a 	ret

0800a510 <fclose>:
 800a510:	00820074 	movhi	r2,2049
 800a514:	10896304 	addi	r2,r2,9612
 800a518:	200b883a 	mov	r5,r4
 800a51c:	11000017 	ldw	r4,0(r2)
 800a520:	800a4201 	jmpi	800a420 <_fclose_r>

0800a524 <__fputwc>:
 800a524:	defff804 	addi	sp,sp,-32
 800a528:	dcc00415 	stw	r19,16(sp)
 800a52c:	dc800315 	stw	r18,12(sp)
 800a530:	dc000115 	stw	r16,4(sp)
 800a534:	dfc00715 	stw	ra,28(sp)
 800a538:	dd400615 	stw	r21,24(sp)
 800a53c:	dd000515 	stw	r20,20(sp)
 800a540:	dc400215 	stw	r17,8(sp)
 800a544:	2027883a 	mov	r19,r4
 800a548:	2825883a 	mov	r18,r5
 800a54c:	3021883a 	mov	r16,r6
 800a550:	80063d00 	call	80063d0 <__locale_mb_cur_max>
 800a554:	00c00044 	movi	r3,1
 800a558:	10c03e26 	beq	r2,r3,800a654 <__fputwc+0x130>
 800a55c:	81c01704 	addi	r7,r16,92
 800a560:	900d883a 	mov	r6,r18
 800a564:	d80b883a 	mov	r5,sp
 800a568:	9809883a 	mov	r4,r19
 800a56c:	800a9f40 	call	800a9f4 <_wcrtomb_r>
 800a570:	1029883a 	mov	r20,r2
 800a574:	00bfffc4 	movi	r2,-1
 800a578:	a0802026 	beq	r20,r2,800a5fc <__fputwc+0xd8>
 800a57c:	d9400003 	ldbu	r5,0(sp)
 800a580:	a0001c26 	beq	r20,zero,800a5f4 <__fputwc+0xd0>
 800a584:	0023883a 	mov	r17,zero
 800a588:	05400284 	movi	r21,10
 800a58c:	00000906 	br	800a5b4 <__fputwc+0x90>
 800a590:	80800017 	ldw	r2,0(r16)
 800a594:	11400005 	stb	r5,0(r2)
 800a598:	80c00017 	ldw	r3,0(r16)
 800a59c:	18c00044 	addi	r3,r3,1
 800a5a0:	80c00015 	stw	r3,0(r16)
 800a5a4:	8c400044 	addi	r17,r17,1
 800a5a8:	dc45883a 	add	r2,sp,r17
 800a5ac:	8d00112e 	bgeu	r17,r20,800a5f4 <__fputwc+0xd0>
 800a5b0:	11400003 	ldbu	r5,0(r2)
 800a5b4:	80c00217 	ldw	r3,8(r16)
 800a5b8:	18ffffc4 	addi	r3,r3,-1
 800a5bc:	80c00215 	stw	r3,8(r16)
 800a5c0:	183ff30e 	bge	r3,zero,800a590 <__alt_data_end+0xfc00a590>
 800a5c4:	80800617 	ldw	r2,24(r16)
 800a5c8:	18801916 	blt	r3,r2,800a630 <__fputwc+0x10c>
 800a5cc:	80800017 	ldw	r2,0(r16)
 800a5d0:	11400005 	stb	r5,0(r2)
 800a5d4:	80800017 	ldw	r2,0(r16)
 800a5d8:	10c00003 	ldbu	r3,0(r2)
 800a5dc:	10800044 	addi	r2,r2,1
 800a5e0:	1d402326 	beq	r3,r21,800a670 <__fputwc+0x14c>
 800a5e4:	80800015 	stw	r2,0(r16)
 800a5e8:	8c400044 	addi	r17,r17,1
 800a5ec:	dc45883a 	add	r2,sp,r17
 800a5f0:	8d3fef36 	bltu	r17,r20,800a5b0 <__alt_data_end+0xfc00a5b0>
 800a5f4:	9005883a 	mov	r2,r18
 800a5f8:	00000406 	br	800a60c <__fputwc+0xe8>
 800a5fc:	80c0030b 	ldhu	r3,12(r16)
 800a600:	a005883a 	mov	r2,r20
 800a604:	18c01014 	ori	r3,r3,64
 800a608:	80c0030d 	sth	r3,12(r16)
 800a60c:	dfc00717 	ldw	ra,28(sp)
 800a610:	dd400617 	ldw	r21,24(sp)
 800a614:	dd000517 	ldw	r20,20(sp)
 800a618:	dcc00417 	ldw	r19,16(sp)
 800a61c:	dc800317 	ldw	r18,12(sp)
 800a620:	dc400217 	ldw	r17,8(sp)
 800a624:	dc000117 	ldw	r16,4(sp)
 800a628:	dec00804 	addi	sp,sp,32
 800a62c:	f800283a 	ret
 800a630:	800d883a 	mov	r6,r16
 800a634:	29403fcc 	andi	r5,r5,255
 800a638:	9809883a 	mov	r4,r19
 800a63c:	800a89c0 	call	800a89c <__swbuf_r>
 800a640:	10bfffe0 	cmpeqi	r2,r2,-1
 800a644:	10803fcc 	andi	r2,r2,255
 800a648:	103fd626 	beq	r2,zero,800a5a4 <__alt_data_end+0xfc00a5a4>
 800a64c:	00bfffc4 	movi	r2,-1
 800a650:	003fee06 	br	800a60c <__alt_data_end+0xfc00a60c>
 800a654:	90ffffc4 	addi	r3,r18,-1
 800a658:	01003f84 	movi	r4,254
 800a65c:	20ffbf36 	bltu	r4,r3,800a55c <__alt_data_end+0xfc00a55c>
 800a660:	900b883a 	mov	r5,r18
 800a664:	dc800005 	stb	r18,0(sp)
 800a668:	1029883a 	mov	r20,r2
 800a66c:	003fc506 	br	800a584 <__alt_data_end+0xfc00a584>
 800a670:	800d883a 	mov	r6,r16
 800a674:	a80b883a 	mov	r5,r21
 800a678:	9809883a 	mov	r4,r19
 800a67c:	800a89c0 	call	800a89c <__swbuf_r>
 800a680:	10bfffe0 	cmpeqi	r2,r2,-1
 800a684:	003fef06 	br	800a644 <__alt_data_end+0xfc00a644>

0800a688 <_fputwc_r>:
 800a688:	3080030b 	ldhu	r2,12(r6)
 800a68c:	10c8000c 	andi	r3,r2,8192
 800a690:	1800051e 	bne	r3,zero,800a6a8 <_fputwc_r+0x20>
 800a694:	30c01917 	ldw	r3,100(r6)
 800a698:	10880014 	ori	r2,r2,8192
 800a69c:	3080030d 	sth	r2,12(r6)
 800a6a0:	18880014 	ori	r2,r3,8192
 800a6a4:	30801915 	stw	r2,100(r6)
 800a6a8:	800a5241 	jmpi	800a524 <__fputwc>

0800a6ac <fputwc>:
 800a6ac:	00820074 	movhi	r2,2049
 800a6b0:	defffc04 	addi	sp,sp,-16
 800a6b4:	10896304 	addi	r2,r2,9612
 800a6b8:	dc000115 	stw	r16,4(sp)
 800a6bc:	14000017 	ldw	r16,0(r2)
 800a6c0:	dc400215 	stw	r17,8(sp)
 800a6c4:	dfc00315 	stw	ra,12(sp)
 800a6c8:	2023883a 	mov	r17,r4
 800a6cc:	80000226 	beq	r16,zero,800a6d8 <fputwc+0x2c>
 800a6d0:	80800e17 	ldw	r2,56(r16)
 800a6d4:	10001026 	beq	r2,zero,800a718 <fputwc+0x6c>
 800a6d8:	2880030b 	ldhu	r2,12(r5)
 800a6dc:	10c8000c 	andi	r3,r2,8192
 800a6e0:	1800051e 	bne	r3,zero,800a6f8 <fputwc+0x4c>
 800a6e4:	28c01917 	ldw	r3,100(r5)
 800a6e8:	10880014 	ori	r2,r2,8192
 800a6ec:	2880030d 	sth	r2,12(r5)
 800a6f0:	18880014 	ori	r2,r3,8192
 800a6f4:	28801915 	stw	r2,100(r5)
 800a6f8:	280d883a 	mov	r6,r5
 800a6fc:	8009883a 	mov	r4,r16
 800a700:	880b883a 	mov	r5,r17
 800a704:	dfc00317 	ldw	ra,12(sp)
 800a708:	dc400217 	ldw	r17,8(sp)
 800a70c:	dc000117 	ldw	r16,4(sp)
 800a710:	dec00404 	addi	sp,sp,16
 800a714:	800a5241 	jmpi	800a524 <__fputwc>
 800a718:	8009883a 	mov	r4,r16
 800a71c:	d9400015 	stw	r5,0(sp)
 800a720:	80058740 	call	8005874 <__sinit>
 800a724:	d9400017 	ldw	r5,0(sp)
 800a728:	003feb06 	br	800a6d8 <__alt_data_end+0xfc00a6d8>

0800a72c <_fstat_r>:
 800a72c:	defffd04 	addi	sp,sp,-12
 800a730:	2805883a 	mov	r2,r5
 800a734:	dc000015 	stw	r16,0(sp)
 800a738:	04020074 	movhi	r16,2049
 800a73c:	dc400115 	stw	r17,4(sp)
 800a740:	840c2904 	addi	r16,r16,12452
 800a744:	2023883a 	mov	r17,r4
 800a748:	300b883a 	mov	r5,r6
 800a74c:	1009883a 	mov	r4,r2
 800a750:	dfc00215 	stw	ra,8(sp)
 800a754:	80000015 	stw	zero,0(r16)
 800a758:	800e30c0 	call	800e30c <fstat>
 800a75c:	00ffffc4 	movi	r3,-1
 800a760:	10c00526 	beq	r2,r3,800a778 <_fstat_r+0x4c>
 800a764:	dfc00217 	ldw	ra,8(sp)
 800a768:	dc400117 	ldw	r17,4(sp)
 800a76c:	dc000017 	ldw	r16,0(sp)
 800a770:	dec00304 	addi	sp,sp,12
 800a774:	f800283a 	ret
 800a778:	80c00017 	ldw	r3,0(r16)
 800a77c:	183ff926 	beq	r3,zero,800a764 <__alt_data_end+0xfc00a764>
 800a780:	88c00015 	stw	r3,0(r17)
 800a784:	003ff706 	br	800a764 <__alt_data_end+0xfc00a764>

0800a788 <_isatty_r>:
 800a788:	defffd04 	addi	sp,sp,-12
 800a78c:	dc000015 	stw	r16,0(sp)
 800a790:	04020074 	movhi	r16,2049
 800a794:	dc400115 	stw	r17,4(sp)
 800a798:	840c2904 	addi	r16,r16,12452
 800a79c:	2023883a 	mov	r17,r4
 800a7a0:	2809883a 	mov	r4,r5
 800a7a4:	dfc00215 	stw	ra,8(sp)
 800a7a8:	80000015 	stw	zero,0(r16)
 800a7ac:	800e4000 	call	800e400 <isatty>
 800a7b0:	00ffffc4 	movi	r3,-1
 800a7b4:	10c00526 	beq	r2,r3,800a7cc <_isatty_r+0x44>
 800a7b8:	dfc00217 	ldw	ra,8(sp)
 800a7bc:	dc400117 	ldw	r17,4(sp)
 800a7c0:	dc000017 	ldw	r16,0(sp)
 800a7c4:	dec00304 	addi	sp,sp,12
 800a7c8:	f800283a 	ret
 800a7cc:	80c00017 	ldw	r3,0(r16)
 800a7d0:	183ff926 	beq	r3,zero,800a7b8 <__alt_data_end+0xfc00a7b8>
 800a7d4:	88c00015 	stw	r3,0(r17)
 800a7d8:	003ff706 	br	800a7b8 <__alt_data_end+0xfc00a7b8>

0800a7dc <_lseek_r>:
 800a7dc:	defffd04 	addi	sp,sp,-12
 800a7e0:	2805883a 	mov	r2,r5
 800a7e4:	dc000015 	stw	r16,0(sp)
 800a7e8:	04020074 	movhi	r16,2049
 800a7ec:	dc400115 	stw	r17,4(sp)
 800a7f0:	300b883a 	mov	r5,r6
 800a7f4:	840c2904 	addi	r16,r16,12452
 800a7f8:	2023883a 	mov	r17,r4
 800a7fc:	380d883a 	mov	r6,r7
 800a800:	1009883a 	mov	r4,r2
 800a804:	dfc00215 	stw	ra,8(sp)
 800a808:	80000015 	stw	zero,0(r16)
 800a80c:	800e5d40 	call	800e5d4 <lseek>
 800a810:	00ffffc4 	movi	r3,-1
 800a814:	10c00526 	beq	r2,r3,800a82c <_lseek_r+0x50>
 800a818:	dfc00217 	ldw	ra,8(sp)
 800a81c:	dc400117 	ldw	r17,4(sp)
 800a820:	dc000017 	ldw	r16,0(sp)
 800a824:	dec00304 	addi	sp,sp,12
 800a828:	f800283a 	ret
 800a82c:	80c00017 	ldw	r3,0(r16)
 800a830:	183ff926 	beq	r3,zero,800a818 <__alt_data_end+0xfc00a818>
 800a834:	88c00015 	stw	r3,0(r17)
 800a838:	003ff706 	br	800a818 <__alt_data_end+0xfc00a818>

0800a83c <_read_r>:
 800a83c:	defffd04 	addi	sp,sp,-12
 800a840:	2805883a 	mov	r2,r5
 800a844:	dc000015 	stw	r16,0(sp)
 800a848:	04020074 	movhi	r16,2049
 800a84c:	dc400115 	stw	r17,4(sp)
 800a850:	300b883a 	mov	r5,r6
 800a854:	840c2904 	addi	r16,r16,12452
 800a858:	2023883a 	mov	r17,r4
 800a85c:	380d883a 	mov	r6,r7
 800a860:	1009883a 	mov	r4,r2
 800a864:	dfc00215 	stw	ra,8(sp)
 800a868:	80000015 	stw	zero,0(r16)
 800a86c:	800e7940 	call	800e794 <read>
 800a870:	00ffffc4 	movi	r3,-1
 800a874:	10c00526 	beq	r2,r3,800a88c <_read_r+0x50>
 800a878:	dfc00217 	ldw	ra,8(sp)
 800a87c:	dc400117 	ldw	r17,4(sp)
 800a880:	dc000017 	ldw	r16,0(sp)
 800a884:	dec00304 	addi	sp,sp,12
 800a888:	f800283a 	ret
 800a88c:	80c00017 	ldw	r3,0(r16)
 800a890:	183ff926 	beq	r3,zero,800a878 <__alt_data_end+0xfc00a878>
 800a894:	88c00015 	stw	r3,0(r17)
 800a898:	003ff706 	br	800a878 <__alt_data_end+0xfc00a878>

0800a89c <__swbuf_r>:
 800a89c:	defffb04 	addi	sp,sp,-20
 800a8a0:	dcc00315 	stw	r19,12(sp)
 800a8a4:	dc800215 	stw	r18,8(sp)
 800a8a8:	dc000015 	stw	r16,0(sp)
 800a8ac:	dfc00415 	stw	ra,16(sp)
 800a8b0:	dc400115 	stw	r17,4(sp)
 800a8b4:	2025883a 	mov	r18,r4
 800a8b8:	2827883a 	mov	r19,r5
 800a8bc:	3021883a 	mov	r16,r6
 800a8c0:	20000226 	beq	r4,zero,800a8cc <__swbuf_r+0x30>
 800a8c4:	20800e17 	ldw	r2,56(r4)
 800a8c8:	10004226 	beq	r2,zero,800a9d4 <__swbuf_r+0x138>
 800a8cc:	80800617 	ldw	r2,24(r16)
 800a8d0:	8100030b 	ldhu	r4,12(r16)
 800a8d4:	80800215 	stw	r2,8(r16)
 800a8d8:	2080020c 	andi	r2,r4,8
 800a8dc:	10003626 	beq	r2,zero,800a9b8 <__swbuf_r+0x11c>
 800a8e0:	80c00417 	ldw	r3,16(r16)
 800a8e4:	18003426 	beq	r3,zero,800a9b8 <__swbuf_r+0x11c>
 800a8e8:	2088000c 	andi	r2,r4,8192
 800a8ec:	9c403fcc 	andi	r17,r19,255
 800a8f0:	10001a26 	beq	r2,zero,800a95c <__swbuf_r+0xc0>
 800a8f4:	80800017 	ldw	r2,0(r16)
 800a8f8:	81000517 	ldw	r4,20(r16)
 800a8fc:	10c7c83a 	sub	r3,r2,r3
 800a900:	1900200e 	bge	r3,r4,800a984 <__swbuf_r+0xe8>
 800a904:	18c00044 	addi	r3,r3,1
 800a908:	81000217 	ldw	r4,8(r16)
 800a90c:	11400044 	addi	r5,r2,1
 800a910:	81400015 	stw	r5,0(r16)
 800a914:	213fffc4 	addi	r4,r4,-1
 800a918:	81000215 	stw	r4,8(r16)
 800a91c:	14c00005 	stb	r19,0(r2)
 800a920:	80800517 	ldw	r2,20(r16)
 800a924:	10c01e26 	beq	r2,r3,800a9a0 <__swbuf_r+0x104>
 800a928:	8080030b 	ldhu	r2,12(r16)
 800a92c:	1080004c 	andi	r2,r2,1
 800a930:	10000226 	beq	r2,zero,800a93c <__swbuf_r+0xa0>
 800a934:	00800284 	movi	r2,10
 800a938:	88801926 	beq	r17,r2,800a9a0 <__swbuf_r+0x104>
 800a93c:	8805883a 	mov	r2,r17
 800a940:	dfc00417 	ldw	ra,16(sp)
 800a944:	dcc00317 	ldw	r19,12(sp)
 800a948:	dc800217 	ldw	r18,8(sp)
 800a94c:	dc400117 	ldw	r17,4(sp)
 800a950:	dc000017 	ldw	r16,0(sp)
 800a954:	dec00504 	addi	sp,sp,20
 800a958:	f800283a 	ret
 800a95c:	81401917 	ldw	r5,100(r16)
 800a960:	00b7ffc4 	movi	r2,-8193
 800a964:	21080014 	ori	r4,r4,8192
 800a968:	2884703a 	and	r2,r5,r2
 800a96c:	80801915 	stw	r2,100(r16)
 800a970:	80800017 	ldw	r2,0(r16)
 800a974:	8100030d 	sth	r4,12(r16)
 800a978:	81000517 	ldw	r4,20(r16)
 800a97c:	10c7c83a 	sub	r3,r2,r3
 800a980:	193fe016 	blt	r3,r4,800a904 <__alt_data_end+0xfc00a904>
 800a984:	800b883a 	mov	r5,r16
 800a988:	9009883a 	mov	r4,r18
 800a98c:	80054880 	call	8005488 <_fflush_r>
 800a990:	1000071e 	bne	r2,zero,800a9b0 <__swbuf_r+0x114>
 800a994:	80800017 	ldw	r2,0(r16)
 800a998:	00c00044 	movi	r3,1
 800a99c:	003fda06 	br	800a908 <__alt_data_end+0xfc00a908>
 800a9a0:	800b883a 	mov	r5,r16
 800a9a4:	9009883a 	mov	r4,r18
 800a9a8:	80054880 	call	8005488 <_fflush_r>
 800a9ac:	103fe326 	beq	r2,zero,800a93c <__alt_data_end+0xfc00a93c>
 800a9b0:	00bfffc4 	movi	r2,-1
 800a9b4:	003fe206 	br	800a940 <__alt_data_end+0xfc00a940>
 800a9b8:	800b883a 	mov	r5,r16
 800a9bc:	9009883a 	mov	r4,r18
 800a9c0:	80038680 	call	8003868 <__swsetup_r>
 800a9c4:	103ffa1e 	bne	r2,zero,800a9b0 <__alt_data_end+0xfc00a9b0>
 800a9c8:	8100030b 	ldhu	r4,12(r16)
 800a9cc:	80c00417 	ldw	r3,16(r16)
 800a9d0:	003fc506 	br	800a8e8 <__alt_data_end+0xfc00a8e8>
 800a9d4:	80058740 	call	8005874 <__sinit>
 800a9d8:	003fbc06 	br	800a8cc <__alt_data_end+0xfc00a8cc>

0800a9dc <__swbuf>:
 800a9dc:	00820074 	movhi	r2,2049
 800a9e0:	10896304 	addi	r2,r2,9612
 800a9e4:	280d883a 	mov	r6,r5
 800a9e8:	200b883a 	mov	r5,r4
 800a9ec:	11000017 	ldw	r4,0(r2)
 800a9f0:	800a89c1 	jmpi	800a89c <__swbuf_r>

0800a9f4 <_wcrtomb_r>:
 800a9f4:	defff604 	addi	sp,sp,-40
 800a9f8:	00820074 	movhi	r2,2049
 800a9fc:	dc800815 	stw	r18,32(sp)
 800aa00:	dc400715 	stw	r17,28(sp)
 800aa04:	dc000615 	stw	r16,24(sp)
 800aa08:	10896704 	addi	r2,r2,9628
 800aa0c:	dfc00915 	stw	ra,36(sp)
 800aa10:	2021883a 	mov	r16,r4
 800aa14:	3823883a 	mov	r17,r7
 800aa18:	14800017 	ldw	r18,0(r2)
 800aa1c:	28001426 	beq	r5,zero,800aa70 <_wcrtomb_r+0x7c>
 800aa20:	d9400415 	stw	r5,16(sp)
 800aa24:	d9800515 	stw	r6,20(sp)
 800aa28:	80063c40 	call	80063c4 <__locale_charset>
 800aa2c:	d9800517 	ldw	r6,20(sp)
 800aa30:	d9400417 	ldw	r5,16(sp)
 800aa34:	100f883a 	mov	r7,r2
 800aa38:	dc400015 	stw	r17,0(sp)
 800aa3c:	8009883a 	mov	r4,r16
 800aa40:	903ee83a 	callr	r18
 800aa44:	00ffffc4 	movi	r3,-1
 800aa48:	10c0031e 	bne	r2,r3,800aa58 <_wcrtomb_r+0x64>
 800aa4c:	88000015 	stw	zero,0(r17)
 800aa50:	00c02284 	movi	r3,138
 800aa54:	80c00015 	stw	r3,0(r16)
 800aa58:	dfc00917 	ldw	ra,36(sp)
 800aa5c:	dc800817 	ldw	r18,32(sp)
 800aa60:	dc400717 	ldw	r17,28(sp)
 800aa64:	dc000617 	ldw	r16,24(sp)
 800aa68:	dec00a04 	addi	sp,sp,40
 800aa6c:	f800283a 	ret
 800aa70:	80063c40 	call	80063c4 <__locale_charset>
 800aa74:	100f883a 	mov	r7,r2
 800aa78:	dc400015 	stw	r17,0(sp)
 800aa7c:	000d883a 	mov	r6,zero
 800aa80:	d9400104 	addi	r5,sp,4
 800aa84:	8009883a 	mov	r4,r16
 800aa88:	903ee83a 	callr	r18
 800aa8c:	003fed06 	br	800aa44 <__alt_data_end+0xfc00aa44>

0800aa90 <wcrtomb>:
 800aa90:	defff604 	addi	sp,sp,-40
 800aa94:	00820074 	movhi	r2,2049
 800aa98:	dc800615 	stw	r18,24(sp)
 800aa9c:	dc400515 	stw	r17,20(sp)
 800aaa0:	10896304 	addi	r2,r2,9612
 800aaa4:	dfc00915 	stw	ra,36(sp)
 800aaa8:	dd000815 	stw	r20,32(sp)
 800aaac:	dcc00715 	stw	r19,28(sp)
 800aab0:	dc000415 	stw	r16,16(sp)
 800aab4:	3025883a 	mov	r18,r6
 800aab8:	14400017 	ldw	r17,0(r2)
 800aabc:	20001926 	beq	r4,zero,800ab24 <wcrtomb+0x94>
 800aac0:	00820074 	movhi	r2,2049
 800aac4:	10896704 	addi	r2,r2,9628
 800aac8:	15000017 	ldw	r20,0(r2)
 800aacc:	2021883a 	mov	r16,r4
 800aad0:	2827883a 	mov	r19,r5
 800aad4:	80063c40 	call	80063c4 <__locale_charset>
 800aad8:	100f883a 	mov	r7,r2
 800aadc:	dc800015 	stw	r18,0(sp)
 800aae0:	980d883a 	mov	r6,r19
 800aae4:	800b883a 	mov	r5,r16
 800aae8:	8809883a 	mov	r4,r17
 800aaec:	a03ee83a 	callr	r20
 800aaf0:	00ffffc4 	movi	r3,-1
 800aaf4:	10c0031e 	bne	r2,r3,800ab04 <wcrtomb+0x74>
 800aaf8:	90000015 	stw	zero,0(r18)
 800aafc:	00c02284 	movi	r3,138
 800ab00:	88c00015 	stw	r3,0(r17)
 800ab04:	dfc00917 	ldw	ra,36(sp)
 800ab08:	dd000817 	ldw	r20,32(sp)
 800ab0c:	dcc00717 	ldw	r19,28(sp)
 800ab10:	dc800617 	ldw	r18,24(sp)
 800ab14:	dc400517 	ldw	r17,20(sp)
 800ab18:	dc000417 	ldw	r16,16(sp)
 800ab1c:	dec00a04 	addi	sp,sp,40
 800ab20:	f800283a 	ret
 800ab24:	00820074 	movhi	r2,2049
 800ab28:	10896704 	addi	r2,r2,9628
 800ab2c:	14000017 	ldw	r16,0(r2)
 800ab30:	80063c40 	call	80063c4 <__locale_charset>
 800ab34:	100f883a 	mov	r7,r2
 800ab38:	dc800015 	stw	r18,0(sp)
 800ab3c:	000d883a 	mov	r6,zero
 800ab40:	d9400104 	addi	r5,sp,4
 800ab44:	8809883a 	mov	r4,r17
 800ab48:	803ee83a 	callr	r16
 800ab4c:	003fe806 	br	800aaf0 <__alt_data_end+0xfc00aaf0>

0800ab50 <__ascii_wctomb>:
 800ab50:	28000526 	beq	r5,zero,800ab68 <__ascii_wctomb+0x18>
 800ab54:	00803fc4 	movi	r2,255
 800ab58:	11800536 	bltu	r2,r6,800ab70 <__ascii_wctomb+0x20>
 800ab5c:	29800005 	stb	r6,0(r5)
 800ab60:	00800044 	movi	r2,1
 800ab64:	f800283a 	ret
 800ab68:	0005883a 	mov	r2,zero
 800ab6c:	f800283a 	ret
 800ab70:	00802284 	movi	r2,138
 800ab74:	20800015 	stw	r2,0(r4)
 800ab78:	00bfffc4 	movi	r2,-1
 800ab7c:	f800283a 	ret

0800ab80 <_wctomb_r>:
 800ab80:	00820074 	movhi	r2,2049
 800ab84:	defff904 	addi	sp,sp,-28
 800ab88:	10896704 	addi	r2,r2,9628
 800ab8c:	dfc00615 	stw	ra,24(sp)
 800ab90:	dc400515 	stw	r17,20(sp)
 800ab94:	dc000415 	stw	r16,16(sp)
 800ab98:	3823883a 	mov	r17,r7
 800ab9c:	14000017 	ldw	r16,0(r2)
 800aba0:	d9000115 	stw	r4,4(sp)
 800aba4:	d9400215 	stw	r5,8(sp)
 800aba8:	d9800315 	stw	r6,12(sp)
 800abac:	80063c40 	call	80063c4 <__locale_charset>
 800abb0:	d9800317 	ldw	r6,12(sp)
 800abb4:	d9400217 	ldw	r5,8(sp)
 800abb8:	d9000117 	ldw	r4,4(sp)
 800abbc:	100f883a 	mov	r7,r2
 800abc0:	dc400015 	stw	r17,0(sp)
 800abc4:	803ee83a 	callr	r16
 800abc8:	dfc00617 	ldw	ra,24(sp)
 800abcc:	dc400517 	ldw	r17,20(sp)
 800abd0:	dc000417 	ldw	r16,16(sp)
 800abd4:	dec00704 	addi	sp,sp,28
 800abd8:	f800283a 	ret

0800abdc <__udivdi3>:
 800abdc:	defff404 	addi	sp,sp,-48
 800abe0:	dcc00515 	stw	r19,20(sp)
 800abe4:	dc000215 	stw	r16,8(sp)
 800abe8:	dfc00b15 	stw	ra,44(sp)
 800abec:	df000a15 	stw	fp,40(sp)
 800abf0:	ddc00915 	stw	r23,36(sp)
 800abf4:	dd800815 	stw	r22,32(sp)
 800abf8:	dd400715 	stw	r21,28(sp)
 800abfc:	dd000615 	stw	r20,24(sp)
 800ac00:	dc800415 	stw	r18,16(sp)
 800ac04:	dc400315 	stw	r17,12(sp)
 800ac08:	2027883a 	mov	r19,r4
 800ac0c:	2821883a 	mov	r16,r5
 800ac10:	3800461e 	bne	r7,zero,800ad2c <__udivdi3+0x150>
 800ac14:	3023883a 	mov	r17,r6
 800ac18:	2025883a 	mov	r18,r4
 800ac1c:	2980572e 	bgeu	r5,r6,800ad7c <__udivdi3+0x1a0>
 800ac20:	00bfffd4 	movui	r2,65535
 800ac24:	282d883a 	mov	r22,r5
 800ac28:	1180b236 	bltu	r2,r6,800aef4 <__udivdi3+0x318>
 800ac2c:	00803fc4 	movi	r2,255
 800ac30:	1185803a 	cmpltu	r2,r2,r6
 800ac34:	100490fa 	slli	r2,r2,3
 800ac38:	3086d83a 	srl	r3,r6,r2
 800ac3c:	01020074 	movhi	r4,2049
 800ac40:	21060004 	addi	r4,r4,6144
 800ac44:	20c7883a 	add	r3,r4,r3
 800ac48:	18c00003 	ldbu	r3,0(r3)
 800ac4c:	1885883a 	add	r2,r3,r2
 800ac50:	00c00804 	movi	r3,32
 800ac54:	1887c83a 	sub	r3,r3,r2
 800ac58:	18000526 	beq	r3,zero,800ac70 <__udivdi3+0x94>
 800ac5c:	80e0983a 	sll	r16,r16,r3
 800ac60:	9884d83a 	srl	r2,r19,r2
 800ac64:	30e2983a 	sll	r17,r6,r3
 800ac68:	98e4983a 	sll	r18,r19,r3
 800ac6c:	142cb03a 	or	r22,r2,r16
 800ac70:	882ad43a 	srli	r21,r17,16
 800ac74:	b009883a 	mov	r4,r22
 800ac78:	8d3fffcc 	andi	r20,r17,65535
 800ac7c:	a80b883a 	mov	r5,r21
 800ac80:	800b8f80 	call	800b8f8 <__umodsi3>
 800ac84:	b009883a 	mov	r4,r22
 800ac88:	a80b883a 	mov	r5,r21
 800ac8c:	1027883a 	mov	r19,r2
 800ac90:	800b8940 	call	800b894 <__udivsi3>
 800ac94:	100b883a 	mov	r5,r2
 800ac98:	a009883a 	mov	r4,r20
 800ac9c:	102d883a 	mov	r22,r2
 800aca0:	80012b40 	call	80012b4 <__mulsi3>
 800aca4:	9826943a 	slli	r19,r19,16
 800aca8:	9006d43a 	srli	r3,r18,16
 800acac:	1cc6b03a 	or	r3,r3,r19
 800acb0:	1880052e 	bgeu	r3,r2,800acc8 <__udivdi3+0xec>
 800acb4:	1c47883a 	add	r3,r3,r17
 800acb8:	b13fffc4 	addi	r4,r22,-1
 800acbc:	1c400136 	bltu	r3,r17,800acc4 <__udivdi3+0xe8>
 800acc0:	18814236 	bltu	r3,r2,800b1cc <__udivdi3+0x5f0>
 800acc4:	202d883a 	mov	r22,r4
 800acc8:	18a1c83a 	sub	r16,r3,r2
 800accc:	8009883a 	mov	r4,r16
 800acd0:	a80b883a 	mov	r5,r21
 800acd4:	800b8f80 	call	800b8f8 <__umodsi3>
 800acd8:	1027883a 	mov	r19,r2
 800acdc:	8009883a 	mov	r4,r16
 800ace0:	a80b883a 	mov	r5,r21
 800ace4:	9826943a 	slli	r19,r19,16
 800ace8:	800b8940 	call	800b894 <__udivsi3>
 800acec:	100b883a 	mov	r5,r2
 800acf0:	a009883a 	mov	r4,r20
 800acf4:	94bfffcc 	andi	r18,r18,65535
 800acf8:	1021883a 	mov	r16,r2
 800acfc:	94e4b03a 	or	r18,r18,r19
 800ad00:	80012b40 	call	80012b4 <__mulsi3>
 800ad04:	9080052e 	bgeu	r18,r2,800ad1c <__udivdi3+0x140>
 800ad08:	8ca5883a 	add	r18,r17,r18
 800ad0c:	80ffffc4 	addi	r3,r16,-1
 800ad10:	94410c36 	bltu	r18,r17,800b144 <__udivdi3+0x568>
 800ad14:	90810b2e 	bgeu	r18,r2,800b144 <__udivdi3+0x568>
 800ad18:	843fff84 	addi	r16,r16,-2
 800ad1c:	b004943a 	slli	r2,r22,16
 800ad20:	0007883a 	mov	r3,zero
 800ad24:	1404b03a 	or	r2,r2,r16
 800ad28:	00005e06 	br	800aea4 <__udivdi3+0x2c8>
 800ad2c:	29c05b36 	bltu	r5,r7,800ae9c <__udivdi3+0x2c0>
 800ad30:	00bfffd4 	movui	r2,65535
 800ad34:	11c0672e 	bgeu	r2,r7,800aed4 <__udivdi3+0x2f8>
 800ad38:	00804034 	movhi	r2,256
 800ad3c:	10bfffc4 	addi	r2,r2,-1
 800ad40:	11c10a36 	bltu	r2,r7,800b16c <__udivdi3+0x590>
 800ad44:	00800404 	movi	r2,16
 800ad48:	3886d83a 	srl	r3,r7,r2
 800ad4c:	01020074 	movhi	r4,2049
 800ad50:	21060004 	addi	r4,r4,6144
 800ad54:	20c7883a 	add	r3,r4,r3
 800ad58:	18c00003 	ldbu	r3,0(r3)
 800ad5c:	05c00804 	movi	r23,32
 800ad60:	1885883a 	add	r2,r3,r2
 800ad64:	b8afc83a 	sub	r23,r23,r2
 800ad68:	b800671e 	bne	r23,zero,800af08 <__udivdi3+0x32c>
 800ad6c:	3c010536 	bltu	r7,r16,800b184 <__udivdi3+0x5a8>
 800ad70:	9985403a 	cmpgeu	r2,r19,r6
 800ad74:	0007883a 	mov	r3,zero
 800ad78:	00004a06 	br	800aea4 <__udivdi3+0x2c8>
 800ad7c:	3000041e 	bne	r6,zero,800ad90 <__udivdi3+0x1b4>
 800ad80:	000b883a 	mov	r5,zero
 800ad84:	01000044 	movi	r4,1
 800ad88:	800b8940 	call	800b894 <__udivsi3>
 800ad8c:	1023883a 	mov	r17,r2
 800ad90:	00bfffd4 	movui	r2,65535
 800ad94:	1440532e 	bgeu	r2,r17,800aee4 <__udivdi3+0x308>
 800ad98:	00804034 	movhi	r2,256
 800ad9c:	10bfffc4 	addi	r2,r2,-1
 800ada0:	1440f436 	bltu	r2,r17,800b174 <__udivdi3+0x598>
 800ada4:	00800404 	movi	r2,16
 800ada8:	8886d83a 	srl	r3,r17,r2
 800adac:	01020074 	movhi	r4,2049
 800adb0:	21060004 	addi	r4,r4,6144
 800adb4:	20c7883a 	add	r3,r4,r3
 800adb8:	18c00003 	ldbu	r3,0(r3)
 800adbc:	1885883a 	add	r2,r3,r2
 800adc0:	00c00804 	movi	r3,32
 800adc4:	1887c83a 	sub	r3,r3,r2
 800adc8:	1800a51e 	bne	r3,zero,800b060 <__udivdi3+0x484>
 800adcc:	882ad43a 	srli	r21,r17,16
 800add0:	8461c83a 	sub	r16,r16,r17
 800add4:	8d3fffcc 	andi	r20,r17,65535
 800add8:	00c00044 	movi	r3,1
 800addc:	a80b883a 	mov	r5,r21
 800ade0:	8009883a 	mov	r4,r16
 800ade4:	d8c00115 	stw	r3,4(sp)
 800ade8:	800b8f80 	call	800b8f8 <__umodsi3>
 800adec:	a80b883a 	mov	r5,r21
 800adf0:	8009883a 	mov	r4,r16
 800adf4:	1027883a 	mov	r19,r2
 800adf8:	800b8940 	call	800b894 <__udivsi3>
 800adfc:	a00b883a 	mov	r5,r20
 800ae00:	1009883a 	mov	r4,r2
 800ae04:	102d883a 	mov	r22,r2
 800ae08:	80012b40 	call	80012b4 <__mulsi3>
 800ae0c:	9826943a 	slli	r19,r19,16
 800ae10:	900ed43a 	srli	r7,r18,16
 800ae14:	d8c00117 	ldw	r3,4(sp)
 800ae18:	3cceb03a 	or	r7,r7,r19
 800ae1c:	3880052e 	bgeu	r7,r2,800ae34 <__udivdi3+0x258>
 800ae20:	3c4f883a 	add	r7,r7,r17
 800ae24:	b13fffc4 	addi	r4,r22,-1
 800ae28:	3c400136 	bltu	r7,r17,800ae30 <__udivdi3+0x254>
 800ae2c:	3880e436 	bltu	r7,r2,800b1c0 <__udivdi3+0x5e4>
 800ae30:	202d883a 	mov	r22,r4
 800ae34:	38a1c83a 	sub	r16,r7,r2
 800ae38:	8009883a 	mov	r4,r16
 800ae3c:	a80b883a 	mov	r5,r21
 800ae40:	d8c00115 	stw	r3,4(sp)
 800ae44:	800b8f80 	call	800b8f8 <__umodsi3>
 800ae48:	1027883a 	mov	r19,r2
 800ae4c:	8009883a 	mov	r4,r16
 800ae50:	a80b883a 	mov	r5,r21
 800ae54:	9826943a 	slli	r19,r19,16
 800ae58:	800b8940 	call	800b894 <__udivsi3>
 800ae5c:	a00b883a 	mov	r5,r20
 800ae60:	1009883a 	mov	r4,r2
 800ae64:	94bfffcc 	andi	r18,r18,65535
 800ae68:	1021883a 	mov	r16,r2
 800ae6c:	94e4b03a 	or	r18,r18,r19
 800ae70:	80012b40 	call	80012b4 <__mulsi3>
 800ae74:	d8c00117 	ldw	r3,4(sp)
 800ae78:	9080052e 	bgeu	r18,r2,800ae90 <__udivdi3+0x2b4>
 800ae7c:	8ca5883a 	add	r18,r17,r18
 800ae80:	813fffc4 	addi	r4,r16,-1
 800ae84:	9440ad36 	bltu	r18,r17,800b13c <__udivdi3+0x560>
 800ae88:	9080ac2e 	bgeu	r18,r2,800b13c <__udivdi3+0x560>
 800ae8c:	843fff84 	addi	r16,r16,-2
 800ae90:	b004943a 	slli	r2,r22,16
 800ae94:	1404b03a 	or	r2,r2,r16
 800ae98:	00000206 	br	800aea4 <__udivdi3+0x2c8>
 800ae9c:	0007883a 	mov	r3,zero
 800aea0:	0005883a 	mov	r2,zero
 800aea4:	dfc00b17 	ldw	ra,44(sp)
 800aea8:	df000a17 	ldw	fp,40(sp)
 800aeac:	ddc00917 	ldw	r23,36(sp)
 800aeb0:	dd800817 	ldw	r22,32(sp)
 800aeb4:	dd400717 	ldw	r21,28(sp)
 800aeb8:	dd000617 	ldw	r20,24(sp)
 800aebc:	dcc00517 	ldw	r19,20(sp)
 800aec0:	dc800417 	ldw	r18,16(sp)
 800aec4:	dc400317 	ldw	r17,12(sp)
 800aec8:	dc000217 	ldw	r16,8(sp)
 800aecc:	dec00c04 	addi	sp,sp,48
 800aed0:	f800283a 	ret
 800aed4:	00803fc4 	movi	r2,255
 800aed8:	11c5803a 	cmpltu	r2,r2,r7
 800aedc:	100490fa 	slli	r2,r2,3
 800aee0:	003f9906 	br	800ad48 <__alt_data_end+0xfc00ad48>
 800aee4:	00803fc4 	movi	r2,255
 800aee8:	1445803a 	cmpltu	r2,r2,r17
 800aeec:	100490fa 	slli	r2,r2,3
 800aef0:	003fad06 	br	800ada8 <__alt_data_end+0xfc00ada8>
 800aef4:	00804034 	movhi	r2,256
 800aef8:	10bfffc4 	addi	r2,r2,-1
 800aefc:	11809f36 	bltu	r2,r6,800b17c <__udivdi3+0x5a0>
 800af00:	00800404 	movi	r2,16
 800af04:	003f4c06 	br	800ac38 <__alt_data_end+0xfc00ac38>
 800af08:	3dce983a 	sll	r7,r7,r23
 800af0c:	30b8d83a 	srl	fp,r6,r2
 800af10:	80a2d83a 	srl	r17,r16,r2
 800af14:	35cc983a 	sll	r6,r6,r23
 800af18:	3f38b03a 	or	fp,r7,fp
 800af1c:	e024d43a 	srli	r18,fp,16
 800af20:	9884d83a 	srl	r2,r19,r2
 800af24:	85e0983a 	sll	r16,r16,r23
 800af28:	8809883a 	mov	r4,r17
 800af2c:	900b883a 	mov	r5,r18
 800af30:	d9800015 	stw	r6,0(sp)
 800af34:	1420b03a 	or	r16,r2,r16
 800af38:	800b8f80 	call	800b8f8 <__umodsi3>
 800af3c:	900b883a 	mov	r5,r18
 800af40:	8809883a 	mov	r4,r17
 800af44:	1029883a 	mov	r20,r2
 800af48:	e5bfffcc 	andi	r22,fp,65535
 800af4c:	800b8940 	call	800b894 <__udivsi3>
 800af50:	100b883a 	mov	r5,r2
 800af54:	b009883a 	mov	r4,r22
 800af58:	102b883a 	mov	r21,r2
 800af5c:	80012b40 	call	80012b4 <__mulsi3>
 800af60:	a028943a 	slli	r20,r20,16
 800af64:	8006d43a 	srli	r3,r16,16
 800af68:	1d06b03a 	or	r3,r3,r20
 800af6c:	1880042e 	bgeu	r3,r2,800af80 <__udivdi3+0x3a4>
 800af70:	1f07883a 	add	r3,r3,fp
 800af74:	a93fffc4 	addi	r4,r21,-1
 800af78:	1f00892e 	bgeu	r3,fp,800b1a0 <__udivdi3+0x5c4>
 800af7c:	202b883a 	mov	r21,r4
 800af80:	18a3c83a 	sub	r17,r3,r2
 800af84:	8809883a 	mov	r4,r17
 800af88:	900b883a 	mov	r5,r18
 800af8c:	800b8f80 	call	800b8f8 <__umodsi3>
 800af90:	1029883a 	mov	r20,r2
 800af94:	8809883a 	mov	r4,r17
 800af98:	900b883a 	mov	r5,r18
 800af9c:	a028943a 	slli	r20,r20,16
 800afa0:	800b8940 	call	800b894 <__udivsi3>
 800afa4:	100b883a 	mov	r5,r2
 800afa8:	b009883a 	mov	r4,r22
 800afac:	843fffcc 	andi	r16,r16,65535
 800afb0:	1023883a 	mov	r17,r2
 800afb4:	8520b03a 	or	r16,r16,r20
 800afb8:	80012b40 	call	80012b4 <__mulsi3>
 800afbc:	8080042e 	bgeu	r16,r2,800afd0 <__udivdi3+0x3f4>
 800afc0:	8721883a 	add	r16,r16,fp
 800afc4:	88ffffc4 	addi	r3,r17,-1
 800afc8:	8700712e 	bgeu	r16,fp,800b190 <__udivdi3+0x5b4>
 800afcc:	1823883a 	mov	r17,r3
 800afd0:	a80e943a 	slli	r7,r21,16
 800afd4:	d8c00017 	ldw	r3,0(sp)
 800afd8:	80a1c83a 	sub	r16,r16,r2
 800afdc:	3c64b03a 	or	r18,r7,r17
 800afe0:	1d3fffcc 	andi	r20,r3,65535
 800afe4:	9022d43a 	srli	r17,r18,16
 800afe8:	95bfffcc 	andi	r22,r18,65535
 800afec:	a00b883a 	mov	r5,r20
 800aff0:	b009883a 	mov	r4,r22
 800aff4:	182ad43a 	srli	r21,r3,16
 800aff8:	80012b40 	call	80012b4 <__mulsi3>
 800affc:	a00b883a 	mov	r5,r20
 800b000:	8809883a 	mov	r4,r17
 800b004:	1039883a 	mov	fp,r2
 800b008:	80012b40 	call	80012b4 <__mulsi3>
 800b00c:	8809883a 	mov	r4,r17
 800b010:	a80b883a 	mov	r5,r21
 800b014:	1029883a 	mov	r20,r2
 800b018:	80012b40 	call	80012b4 <__mulsi3>
 800b01c:	a80b883a 	mov	r5,r21
 800b020:	b009883a 	mov	r4,r22
 800b024:	1023883a 	mov	r17,r2
 800b028:	80012b40 	call	80012b4 <__mulsi3>
 800b02c:	e006d43a 	srli	r3,fp,16
 800b030:	1505883a 	add	r2,r2,r20
 800b034:	1887883a 	add	r3,r3,r2
 800b038:	1d00022e 	bgeu	r3,r20,800b044 <__udivdi3+0x468>
 800b03c:	00800074 	movhi	r2,1
 800b040:	88a3883a 	add	r17,r17,r2
 800b044:	1804d43a 	srli	r2,r3,16
 800b048:	1463883a 	add	r17,r2,r17
 800b04c:	84404436 	bltu	r16,r17,800b160 <__udivdi3+0x584>
 800b050:	84403e26 	beq	r16,r17,800b14c <__udivdi3+0x570>
 800b054:	9005883a 	mov	r2,r18
 800b058:	0007883a 	mov	r3,zero
 800b05c:	003f9106 	br	800aea4 <__alt_data_end+0xfc00aea4>
 800b060:	88e2983a 	sll	r17,r17,r3
 800b064:	80aed83a 	srl	r23,r16,r2
 800b068:	80e0983a 	sll	r16,r16,r3
 800b06c:	882ad43a 	srli	r21,r17,16
 800b070:	9884d83a 	srl	r2,r19,r2
 800b074:	b809883a 	mov	r4,r23
 800b078:	a80b883a 	mov	r5,r21
 800b07c:	98e4983a 	sll	r18,r19,r3
 800b080:	142cb03a 	or	r22,r2,r16
 800b084:	800b8f80 	call	800b8f8 <__umodsi3>
 800b088:	b809883a 	mov	r4,r23
 800b08c:	a80b883a 	mov	r5,r21
 800b090:	1027883a 	mov	r19,r2
 800b094:	8d3fffcc 	andi	r20,r17,65535
 800b098:	800b8940 	call	800b894 <__udivsi3>
 800b09c:	a009883a 	mov	r4,r20
 800b0a0:	100b883a 	mov	r5,r2
 800b0a4:	102f883a 	mov	r23,r2
 800b0a8:	80012b40 	call	80012b4 <__mulsi3>
 800b0ac:	9826943a 	slli	r19,r19,16
 800b0b0:	b008d43a 	srli	r4,r22,16
 800b0b4:	24c8b03a 	or	r4,r4,r19
 800b0b8:	2080062e 	bgeu	r4,r2,800b0d4 <__udivdi3+0x4f8>
 800b0bc:	2449883a 	add	r4,r4,r17
 800b0c0:	b8ffffc4 	addi	r3,r23,-1
 800b0c4:	24403c36 	bltu	r4,r17,800b1b8 <__udivdi3+0x5dc>
 800b0c8:	20803b2e 	bgeu	r4,r2,800b1b8 <__udivdi3+0x5dc>
 800b0cc:	bdffff84 	addi	r23,r23,-2
 800b0d0:	2449883a 	add	r4,r4,r17
 800b0d4:	20a1c83a 	sub	r16,r4,r2
 800b0d8:	a80b883a 	mov	r5,r21
 800b0dc:	8009883a 	mov	r4,r16
 800b0e0:	800b8f80 	call	800b8f8 <__umodsi3>
 800b0e4:	a80b883a 	mov	r5,r21
 800b0e8:	8009883a 	mov	r4,r16
 800b0ec:	1027883a 	mov	r19,r2
 800b0f0:	800b8940 	call	800b894 <__udivsi3>
 800b0f4:	a009883a 	mov	r4,r20
 800b0f8:	100b883a 	mov	r5,r2
 800b0fc:	9826943a 	slli	r19,r19,16
 800b100:	1039883a 	mov	fp,r2
 800b104:	80012b40 	call	80012b4 <__mulsi3>
 800b108:	b13fffcc 	andi	r4,r22,65535
 800b10c:	24c8b03a 	or	r4,r4,r19
 800b110:	2080062e 	bgeu	r4,r2,800b12c <__udivdi3+0x550>
 800b114:	2449883a 	add	r4,r4,r17
 800b118:	e0ffffc4 	addi	r3,fp,-1
 800b11c:	24402436 	bltu	r4,r17,800b1b0 <__udivdi3+0x5d4>
 800b120:	2080232e 	bgeu	r4,r2,800b1b0 <__udivdi3+0x5d4>
 800b124:	e73fff84 	addi	fp,fp,-2
 800b128:	2449883a 	add	r4,r4,r17
 800b12c:	b82e943a 	slli	r23,r23,16
 800b130:	20a1c83a 	sub	r16,r4,r2
 800b134:	bf06b03a 	or	r3,r23,fp
 800b138:	003f2806 	br	800addc <__alt_data_end+0xfc00addc>
 800b13c:	2021883a 	mov	r16,r4
 800b140:	003f5306 	br	800ae90 <__alt_data_end+0xfc00ae90>
 800b144:	1821883a 	mov	r16,r3
 800b148:	003ef406 	br	800ad1c <__alt_data_end+0xfc00ad1c>
 800b14c:	1806943a 	slli	r3,r3,16
 800b150:	9de6983a 	sll	r19,r19,r23
 800b154:	e73fffcc 	andi	fp,fp,65535
 800b158:	1f07883a 	add	r3,r3,fp
 800b15c:	98ffbd2e 	bgeu	r19,r3,800b054 <__alt_data_end+0xfc00b054>
 800b160:	90bfffc4 	addi	r2,r18,-1
 800b164:	0007883a 	mov	r3,zero
 800b168:	003f4e06 	br	800aea4 <__alt_data_end+0xfc00aea4>
 800b16c:	00800604 	movi	r2,24
 800b170:	003ef506 	br	800ad48 <__alt_data_end+0xfc00ad48>
 800b174:	00800604 	movi	r2,24
 800b178:	003f0b06 	br	800ada8 <__alt_data_end+0xfc00ada8>
 800b17c:	00800604 	movi	r2,24
 800b180:	003ead06 	br	800ac38 <__alt_data_end+0xfc00ac38>
 800b184:	0007883a 	mov	r3,zero
 800b188:	00800044 	movi	r2,1
 800b18c:	003f4506 	br	800aea4 <__alt_data_end+0xfc00aea4>
 800b190:	80bf8e2e 	bgeu	r16,r2,800afcc <__alt_data_end+0xfc00afcc>
 800b194:	8c7fff84 	addi	r17,r17,-2
 800b198:	8721883a 	add	r16,r16,fp
 800b19c:	003f8c06 	br	800afd0 <__alt_data_end+0xfc00afd0>
 800b1a0:	18bf762e 	bgeu	r3,r2,800af7c <__alt_data_end+0xfc00af7c>
 800b1a4:	ad7fff84 	addi	r21,r21,-2
 800b1a8:	1f07883a 	add	r3,r3,fp
 800b1ac:	003f7406 	br	800af80 <__alt_data_end+0xfc00af80>
 800b1b0:	1839883a 	mov	fp,r3
 800b1b4:	003fdd06 	br	800b12c <__alt_data_end+0xfc00b12c>
 800b1b8:	182f883a 	mov	r23,r3
 800b1bc:	003fc506 	br	800b0d4 <__alt_data_end+0xfc00b0d4>
 800b1c0:	b5bfff84 	addi	r22,r22,-2
 800b1c4:	3c4f883a 	add	r7,r7,r17
 800b1c8:	003f1a06 	br	800ae34 <__alt_data_end+0xfc00ae34>
 800b1cc:	b5bfff84 	addi	r22,r22,-2
 800b1d0:	1c47883a 	add	r3,r3,r17
 800b1d4:	003ebc06 	br	800acc8 <__alt_data_end+0xfc00acc8>

0800b1d8 <__umoddi3>:
 800b1d8:	defff304 	addi	sp,sp,-52
 800b1dc:	df000b15 	stw	fp,44(sp)
 800b1e0:	dc400415 	stw	r17,16(sp)
 800b1e4:	dc000315 	stw	r16,12(sp)
 800b1e8:	dfc00c15 	stw	ra,48(sp)
 800b1ec:	ddc00a15 	stw	r23,40(sp)
 800b1f0:	dd800915 	stw	r22,36(sp)
 800b1f4:	dd400815 	stw	r21,32(sp)
 800b1f8:	dd000715 	stw	r20,28(sp)
 800b1fc:	dcc00615 	stw	r19,24(sp)
 800b200:	dc800515 	stw	r18,20(sp)
 800b204:	2021883a 	mov	r16,r4
 800b208:	2823883a 	mov	r17,r5
 800b20c:	2839883a 	mov	fp,r5
 800b210:	3800401e 	bne	r7,zero,800b314 <__umoddi3+0x13c>
 800b214:	3027883a 	mov	r19,r6
 800b218:	2029883a 	mov	r20,r4
 800b21c:	2980552e 	bgeu	r5,r6,800b374 <__umoddi3+0x19c>
 800b220:	00bfffd4 	movui	r2,65535
 800b224:	1180a236 	bltu	r2,r6,800b4b0 <__umoddi3+0x2d8>
 800b228:	01003fc4 	movi	r4,255
 800b22c:	2189803a 	cmpltu	r4,r4,r6
 800b230:	200890fa 	slli	r4,r4,3
 800b234:	3104d83a 	srl	r2,r6,r4
 800b238:	00c20074 	movhi	r3,2049
 800b23c:	18c60004 	addi	r3,r3,6144
 800b240:	1885883a 	add	r2,r3,r2
 800b244:	10c00003 	ldbu	r3,0(r2)
 800b248:	00800804 	movi	r2,32
 800b24c:	1909883a 	add	r4,r3,r4
 800b250:	1125c83a 	sub	r18,r2,r4
 800b254:	90000526 	beq	r18,zero,800b26c <__umoddi3+0x94>
 800b258:	8ca2983a 	sll	r17,r17,r18
 800b25c:	8108d83a 	srl	r4,r16,r4
 800b260:	34a6983a 	sll	r19,r6,r18
 800b264:	84a8983a 	sll	r20,r16,r18
 800b268:	2478b03a 	or	fp,r4,r17
 800b26c:	982cd43a 	srli	r22,r19,16
 800b270:	e009883a 	mov	r4,fp
 800b274:	9dffffcc 	andi	r23,r19,65535
 800b278:	b00b883a 	mov	r5,r22
 800b27c:	800b8f80 	call	800b8f8 <__umodsi3>
 800b280:	b00b883a 	mov	r5,r22
 800b284:	e009883a 	mov	r4,fp
 800b288:	102b883a 	mov	r21,r2
 800b28c:	800b8940 	call	800b894 <__udivsi3>
 800b290:	100b883a 	mov	r5,r2
 800b294:	b809883a 	mov	r4,r23
 800b298:	80012b40 	call	80012b4 <__mulsi3>
 800b29c:	a82a943a 	slli	r21,r21,16
 800b2a0:	a006d43a 	srli	r3,r20,16
 800b2a4:	1d46b03a 	or	r3,r3,r21
 800b2a8:	1880032e 	bgeu	r3,r2,800b2b8 <__umoddi3+0xe0>
 800b2ac:	1cc7883a 	add	r3,r3,r19
 800b2b0:	1cc00136 	bltu	r3,r19,800b2b8 <__umoddi3+0xe0>
 800b2b4:	18813136 	bltu	r3,r2,800b77c <__umoddi3+0x5a4>
 800b2b8:	18a1c83a 	sub	r16,r3,r2
 800b2bc:	b00b883a 	mov	r5,r22
 800b2c0:	8009883a 	mov	r4,r16
 800b2c4:	800b8f80 	call	800b8f8 <__umodsi3>
 800b2c8:	b00b883a 	mov	r5,r22
 800b2cc:	8009883a 	mov	r4,r16
 800b2d0:	1023883a 	mov	r17,r2
 800b2d4:	800b8940 	call	800b894 <__udivsi3>
 800b2d8:	100b883a 	mov	r5,r2
 800b2dc:	b809883a 	mov	r4,r23
 800b2e0:	8822943a 	slli	r17,r17,16
 800b2e4:	80012b40 	call	80012b4 <__mulsi3>
 800b2e8:	a0ffffcc 	andi	r3,r20,65535
 800b2ec:	1c46b03a 	or	r3,r3,r17
 800b2f0:	1880042e 	bgeu	r3,r2,800b304 <__umoddi3+0x12c>
 800b2f4:	1cc7883a 	add	r3,r3,r19
 800b2f8:	1cc00236 	bltu	r3,r19,800b304 <__umoddi3+0x12c>
 800b2fc:	1880012e 	bgeu	r3,r2,800b304 <__umoddi3+0x12c>
 800b300:	1cc7883a 	add	r3,r3,r19
 800b304:	1885c83a 	sub	r2,r3,r2
 800b308:	1484d83a 	srl	r2,r2,r18
 800b30c:	0007883a 	mov	r3,zero
 800b310:	00005306 	br	800b460 <__umoddi3+0x288>
 800b314:	29c05036 	bltu	r5,r7,800b458 <__umoddi3+0x280>
 800b318:	00bfffd4 	movui	r2,65535
 800b31c:	11c05c2e 	bgeu	r2,r7,800b490 <__umoddi3+0x2b8>
 800b320:	00804034 	movhi	r2,256
 800b324:	10bfffc4 	addi	r2,r2,-1
 800b328:	11c10636 	bltu	r2,r7,800b744 <__umoddi3+0x56c>
 800b32c:	01000404 	movi	r4,16
 800b330:	3904d83a 	srl	r2,r7,r4
 800b334:	00c20074 	movhi	r3,2049
 800b338:	18c60004 	addi	r3,r3,6144
 800b33c:	1885883a 	add	r2,r3,r2
 800b340:	14c00003 	ldbu	r19,0(r2)
 800b344:	00c00804 	movi	r3,32
 800b348:	9927883a 	add	r19,r19,r4
 800b34c:	1ce9c83a 	sub	r20,r3,r19
 800b350:	a0005c1e 	bne	r20,zero,800b4c4 <__umoddi3+0x2ec>
 800b354:	3c400136 	bltu	r7,r17,800b35c <__umoddi3+0x184>
 800b358:	81810a36 	bltu	r16,r6,800b784 <__umoddi3+0x5ac>
 800b35c:	8185c83a 	sub	r2,r16,r6
 800b360:	89e3c83a 	sub	r17,r17,r7
 800b364:	8089803a 	cmpltu	r4,r16,r2
 800b368:	8939c83a 	sub	fp,r17,r4
 800b36c:	e007883a 	mov	r3,fp
 800b370:	00003b06 	br	800b460 <__umoddi3+0x288>
 800b374:	3000041e 	bne	r6,zero,800b388 <__umoddi3+0x1b0>
 800b378:	000b883a 	mov	r5,zero
 800b37c:	01000044 	movi	r4,1
 800b380:	800b8940 	call	800b894 <__udivsi3>
 800b384:	1027883a 	mov	r19,r2
 800b388:	00bfffd4 	movui	r2,65535
 800b38c:	14c0442e 	bgeu	r2,r19,800b4a0 <__umoddi3+0x2c8>
 800b390:	00804034 	movhi	r2,256
 800b394:	10bfffc4 	addi	r2,r2,-1
 800b398:	14c0ec36 	bltu	r2,r19,800b74c <__umoddi3+0x574>
 800b39c:	00800404 	movi	r2,16
 800b3a0:	9886d83a 	srl	r3,r19,r2
 800b3a4:	01020074 	movhi	r4,2049
 800b3a8:	21060004 	addi	r4,r4,6144
 800b3ac:	20c7883a 	add	r3,r4,r3
 800b3b0:	18c00003 	ldbu	r3,0(r3)
 800b3b4:	1887883a 	add	r3,r3,r2
 800b3b8:	00800804 	movi	r2,32
 800b3bc:	10e5c83a 	sub	r18,r2,r3
 800b3c0:	9000ab1e 	bne	r18,zero,800b670 <__umoddi3+0x498>
 800b3c4:	982cd43a 	srli	r22,r19,16
 800b3c8:	8ce3c83a 	sub	r17,r17,r19
 800b3cc:	9dffffcc 	andi	r23,r19,65535
 800b3d0:	b00b883a 	mov	r5,r22
 800b3d4:	8809883a 	mov	r4,r17
 800b3d8:	800b8f80 	call	800b8f8 <__umodsi3>
 800b3dc:	b00b883a 	mov	r5,r22
 800b3e0:	8809883a 	mov	r4,r17
 800b3e4:	102b883a 	mov	r21,r2
 800b3e8:	800b8940 	call	800b894 <__udivsi3>
 800b3ec:	b80b883a 	mov	r5,r23
 800b3f0:	1009883a 	mov	r4,r2
 800b3f4:	80012b40 	call	80012b4 <__mulsi3>
 800b3f8:	a82a943a 	slli	r21,r21,16
 800b3fc:	a006d43a 	srli	r3,r20,16
 800b400:	1d46b03a 	or	r3,r3,r21
 800b404:	1880042e 	bgeu	r3,r2,800b418 <__umoddi3+0x240>
 800b408:	1cc7883a 	add	r3,r3,r19
 800b40c:	1cc00236 	bltu	r3,r19,800b418 <__umoddi3+0x240>
 800b410:	1880012e 	bgeu	r3,r2,800b418 <__umoddi3+0x240>
 800b414:	1cc7883a 	add	r3,r3,r19
 800b418:	18a1c83a 	sub	r16,r3,r2
 800b41c:	b00b883a 	mov	r5,r22
 800b420:	8009883a 	mov	r4,r16
 800b424:	800b8f80 	call	800b8f8 <__umodsi3>
 800b428:	1023883a 	mov	r17,r2
 800b42c:	b00b883a 	mov	r5,r22
 800b430:	8009883a 	mov	r4,r16
 800b434:	800b8940 	call	800b894 <__udivsi3>
 800b438:	8822943a 	slli	r17,r17,16
 800b43c:	b80b883a 	mov	r5,r23
 800b440:	1009883a 	mov	r4,r2
 800b444:	80012b40 	call	80012b4 <__mulsi3>
 800b448:	a53fffcc 	andi	r20,r20,65535
 800b44c:	a446b03a 	or	r3,r20,r17
 800b450:	18bfac2e 	bgeu	r3,r2,800b304 <__alt_data_end+0xfc00b304>
 800b454:	003fa706 	br	800b2f4 <__alt_data_end+0xfc00b2f4>
 800b458:	2005883a 	mov	r2,r4
 800b45c:	2807883a 	mov	r3,r5
 800b460:	dfc00c17 	ldw	ra,48(sp)
 800b464:	df000b17 	ldw	fp,44(sp)
 800b468:	ddc00a17 	ldw	r23,40(sp)
 800b46c:	dd800917 	ldw	r22,36(sp)
 800b470:	dd400817 	ldw	r21,32(sp)
 800b474:	dd000717 	ldw	r20,28(sp)
 800b478:	dcc00617 	ldw	r19,24(sp)
 800b47c:	dc800517 	ldw	r18,20(sp)
 800b480:	dc400417 	ldw	r17,16(sp)
 800b484:	dc000317 	ldw	r16,12(sp)
 800b488:	dec00d04 	addi	sp,sp,52
 800b48c:	f800283a 	ret
 800b490:	04c03fc4 	movi	r19,255
 800b494:	99c9803a 	cmpltu	r4,r19,r7
 800b498:	200890fa 	slli	r4,r4,3
 800b49c:	003fa406 	br	800b330 <__alt_data_end+0xfc00b330>
 800b4a0:	00803fc4 	movi	r2,255
 800b4a4:	14c5803a 	cmpltu	r2,r2,r19
 800b4a8:	100490fa 	slli	r2,r2,3
 800b4ac:	003fbc06 	br	800b3a0 <__alt_data_end+0xfc00b3a0>
 800b4b0:	00804034 	movhi	r2,256
 800b4b4:	10bfffc4 	addi	r2,r2,-1
 800b4b8:	1180a636 	bltu	r2,r6,800b754 <__umoddi3+0x57c>
 800b4bc:	01000404 	movi	r4,16
 800b4c0:	003f5c06 	br	800b234 <__alt_data_end+0xfc00b234>
 800b4c4:	3d0e983a 	sll	r7,r7,r20
 800b4c8:	34ead83a 	srl	r21,r6,r19
 800b4cc:	8cc6d83a 	srl	r3,r17,r19
 800b4d0:	8d10983a 	sll	r8,r17,r20
 800b4d4:	3d6ab03a 	or	r21,r7,r21
 800b4d8:	a82cd43a 	srli	r22,r21,16
 800b4dc:	84e2d83a 	srl	r17,r16,r19
 800b4e0:	1809883a 	mov	r4,r3
 800b4e4:	b00b883a 	mov	r5,r22
 800b4e8:	8a22b03a 	or	r17,r17,r8
 800b4ec:	3524983a 	sll	r18,r6,r20
 800b4f0:	dc400015 	stw	r17,0(sp)
 800b4f4:	d8c00115 	stw	r3,4(sp)
 800b4f8:	800b8f80 	call	800b8f8 <__umodsi3>
 800b4fc:	d8c00117 	ldw	r3,4(sp)
 800b500:	b00b883a 	mov	r5,r22
 800b504:	1039883a 	mov	fp,r2
 800b508:	1809883a 	mov	r4,r3
 800b50c:	800b8940 	call	800b894 <__udivsi3>
 800b510:	adffffcc 	andi	r23,r21,65535
 800b514:	100b883a 	mov	r5,r2
 800b518:	b809883a 	mov	r4,r23
 800b51c:	1023883a 	mov	r17,r2
 800b520:	80012b40 	call	80012b4 <__mulsi3>
 800b524:	d9400017 	ldw	r5,0(sp)
 800b528:	e008943a 	slli	r4,fp,16
 800b52c:	8520983a 	sll	r16,r16,r20
 800b530:	2806d43a 	srli	r3,r5,16
 800b534:	1906b03a 	or	r3,r3,r4
 800b538:	1880042e 	bgeu	r3,r2,800b54c <__umoddi3+0x374>
 800b53c:	1d47883a 	add	r3,r3,r21
 800b540:	893fffc4 	addi	r4,r17,-1
 800b544:	1d40892e 	bgeu	r3,r21,800b76c <__umoddi3+0x594>
 800b548:	2023883a 	mov	r17,r4
 800b54c:	18b9c83a 	sub	fp,r3,r2
 800b550:	b00b883a 	mov	r5,r22
 800b554:	e009883a 	mov	r4,fp
 800b558:	800b8f80 	call	800b8f8 <__umodsi3>
 800b55c:	b00b883a 	mov	r5,r22
 800b560:	e009883a 	mov	r4,fp
 800b564:	d8800215 	stw	r2,8(sp)
 800b568:	800b8940 	call	800b894 <__udivsi3>
 800b56c:	100b883a 	mov	r5,r2
 800b570:	b809883a 	mov	r4,r23
 800b574:	102d883a 	mov	r22,r2
 800b578:	80012b40 	call	80012b4 <__mulsi3>
 800b57c:	d9800217 	ldw	r6,8(sp)
 800b580:	d8c00017 	ldw	r3,0(sp)
 800b584:	300c943a 	slli	r6,r6,16
 800b588:	1a3fffcc 	andi	r8,r3,65535
 800b58c:	4190b03a 	or	r8,r8,r6
 800b590:	4080042e 	bgeu	r8,r2,800b5a4 <__umoddi3+0x3cc>
 800b594:	4551883a 	add	r8,r8,r21
 800b598:	b0ffffc4 	addi	r3,r22,-1
 800b59c:	45406f2e 	bgeu	r8,r21,800b75c <__umoddi3+0x584>
 800b5a0:	182d883a 	mov	r22,r3
 800b5a4:	880e943a 	slli	r7,r17,16
 800b5a8:	9006d43a 	srli	r3,r18,16
 800b5ac:	91bfffcc 	andi	r6,r18,65535
 800b5b0:	3dacb03a 	or	r22,r7,r22
 800b5b4:	b02ed43a 	srli	r23,r22,16
 800b5b8:	b5bfffcc 	andi	r22,r22,65535
 800b5bc:	300b883a 	mov	r5,r6
 800b5c0:	b009883a 	mov	r4,r22
 800b5c4:	40a3c83a 	sub	r17,r8,r2
 800b5c8:	d8c00115 	stw	r3,4(sp)
 800b5cc:	d9800215 	stw	r6,8(sp)
 800b5d0:	80012b40 	call	80012b4 <__mulsi3>
 800b5d4:	d9800217 	ldw	r6,8(sp)
 800b5d8:	b809883a 	mov	r4,r23
 800b5dc:	1039883a 	mov	fp,r2
 800b5e0:	300b883a 	mov	r5,r6
 800b5e4:	80012b40 	call	80012b4 <__mulsi3>
 800b5e8:	d8c00117 	ldw	r3,4(sp)
 800b5ec:	b809883a 	mov	r4,r23
 800b5f0:	d8800215 	stw	r2,8(sp)
 800b5f4:	180b883a 	mov	r5,r3
 800b5f8:	80012b40 	call	80012b4 <__mulsi3>
 800b5fc:	d8c00117 	ldw	r3,4(sp)
 800b600:	b009883a 	mov	r4,r22
 800b604:	102f883a 	mov	r23,r2
 800b608:	180b883a 	mov	r5,r3
 800b60c:	80012b40 	call	80012b4 <__mulsi3>
 800b610:	d9800217 	ldw	r6,8(sp)
 800b614:	e006d43a 	srli	r3,fp,16
 800b618:	1185883a 	add	r2,r2,r6
 800b61c:	1885883a 	add	r2,r3,r2
 800b620:	1180022e 	bgeu	r2,r6,800b62c <__umoddi3+0x454>
 800b624:	00c00074 	movhi	r3,1
 800b628:	b8ef883a 	add	r23,r23,r3
 800b62c:	1006d43a 	srli	r3,r2,16
 800b630:	1004943a 	slli	r2,r2,16
 800b634:	e73fffcc 	andi	fp,fp,65535
 800b638:	1dc7883a 	add	r3,r3,r23
 800b63c:	1739883a 	add	fp,r2,fp
 800b640:	88c03a36 	bltu	r17,r3,800b72c <__umoddi3+0x554>
 800b644:	88c05126 	beq	r17,r3,800b78c <__umoddi3+0x5b4>
 800b648:	88c9c83a 	sub	r4,r17,r3
 800b64c:	e00f883a 	mov	r7,fp
 800b650:	81cfc83a 	sub	r7,r16,r7
 800b654:	81c7803a 	cmpltu	r3,r16,r7
 800b658:	20c7c83a 	sub	r3,r4,r3
 800b65c:	1cc4983a 	sll	r2,r3,r19
 800b660:	3d0ed83a 	srl	r7,r7,r20
 800b664:	1d06d83a 	srl	r3,r3,r20
 800b668:	11c4b03a 	or	r2,r2,r7
 800b66c:	003f7c06 	br	800b460 <__alt_data_end+0xfc00b460>
 800b670:	9ca6983a 	sll	r19,r19,r18
 800b674:	88f8d83a 	srl	fp,r17,r3
 800b678:	80c4d83a 	srl	r2,r16,r3
 800b67c:	982cd43a 	srli	r22,r19,16
 800b680:	8ca2983a 	sll	r17,r17,r18
 800b684:	e009883a 	mov	r4,fp
 800b688:	b00b883a 	mov	r5,r22
 800b68c:	146ab03a 	or	r21,r2,r17
 800b690:	800b8f80 	call	800b8f8 <__umodsi3>
 800b694:	b00b883a 	mov	r5,r22
 800b698:	e009883a 	mov	r4,fp
 800b69c:	1029883a 	mov	r20,r2
 800b6a0:	9dffffcc 	andi	r23,r19,65535
 800b6a4:	800b8940 	call	800b894 <__udivsi3>
 800b6a8:	b809883a 	mov	r4,r23
 800b6ac:	100b883a 	mov	r5,r2
 800b6b0:	80012b40 	call	80012b4 <__mulsi3>
 800b6b4:	a008943a 	slli	r4,r20,16
 800b6b8:	a806d43a 	srli	r3,r21,16
 800b6bc:	84a8983a 	sll	r20,r16,r18
 800b6c0:	1906b03a 	or	r3,r3,r4
 800b6c4:	1880042e 	bgeu	r3,r2,800b6d8 <__umoddi3+0x500>
 800b6c8:	1cc7883a 	add	r3,r3,r19
 800b6cc:	1cc00236 	bltu	r3,r19,800b6d8 <__umoddi3+0x500>
 800b6d0:	1880012e 	bgeu	r3,r2,800b6d8 <__umoddi3+0x500>
 800b6d4:	1cc7883a 	add	r3,r3,r19
 800b6d8:	18a3c83a 	sub	r17,r3,r2
 800b6dc:	b00b883a 	mov	r5,r22
 800b6e0:	8809883a 	mov	r4,r17
 800b6e4:	800b8f80 	call	800b8f8 <__umodsi3>
 800b6e8:	b00b883a 	mov	r5,r22
 800b6ec:	8809883a 	mov	r4,r17
 800b6f0:	1021883a 	mov	r16,r2
 800b6f4:	800b8940 	call	800b894 <__udivsi3>
 800b6f8:	100b883a 	mov	r5,r2
 800b6fc:	b809883a 	mov	r4,r23
 800b700:	8020943a 	slli	r16,r16,16
 800b704:	80012b40 	call	80012b4 <__mulsi3>
 800b708:	a8ffffcc 	andi	r3,r21,65535
 800b70c:	1c06b03a 	or	r3,r3,r16
 800b710:	1880042e 	bgeu	r3,r2,800b724 <__umoddi3+0x54c>
 800b714:	1cc7883a 	add	r3,r3,r19
 800b718:	1cc00236 	bltu	r3,r19,800b724 <__umoddi3+0x54c>
 800b71c:	1880012e 	bgeu	r3,r2,800b724 <__umoddi3+0x54c>
 800b720:	1cc7883a 	add	r3,r3,r19
 800b724:	18a3c83a 	sub	r17,r3,r2
 800b728:	003f2906 	br	800b3d0 <__alt_data_end+0xfc00b3d0>
 800b72c:	e48fc83a 	sub	r7,fp,r18
 800b730:	1d49c83a 	sub	r4,r3,r21
 800b734:	e1f9803a 	cmpltu	fp,fp,r7
 800b738:	2739c83a 	sub	fp,r4,fp
 800b73c:	8f09c83a 	sub	r4,r17,fp
 800b740:	003fc306 	br	800b650 <__alt_data_end+0xfc00b650>
 800b744:	01000604 	movi	r4,24
 800b748:	003ef906 	br	800b330 <__alt_data_end+0xfc00b330>
 800b74c:	00800604 	movi	r2,24
 800b750:	003f1306 	br	800b3a0 <__alt_data_end+0xfc00b3a0>
 800b754:	01000604 	movi	r4,24
 800b758:	003eb606 	br	800b234 <__alt_data_end+0xfc00b234>
 800b75c:	40bf902e 	bgeu	r8,r2,800b5a0 <__alt_data_end+0xfc00b5a0>
 800b760:	b5bfff84 	addi	r22,r22,-2
 800b764:	4551883a 	add	r8,r8,r21
 800b768:	003f8e06 	br	800b5a4 <__alt_data_end+0xfc00b5a4>
 800b76c:	18bf762e 	bgeu	r3,r2,800b548 <__alt_data_end+0xfc00b548>
 800b770:	8c7fff84 	addi	r17,r17,-2
 800b774:	1d47883a 	add	r3,r3,r21
 800b778:	003f7406 	br	800b54c <__alt_data_end+0xfc00b54c>
 800b77c:	1cc7883a 	add	r3,r3,r19
 800b780:	003ecd06 	br	800b2b8 <__alt_data_end+0xfc00b2b8>
 800b784:	8005883a 	mov	r2,r16
 800b788:	003ef806 	br	800b36c <__alt_data_end+0xfc00b36c>
 800b78c:	873fe736 	bltu	r16,fp,800b72c <__alt_data_end+0xfc00b72c>
 800b790:	e00f883a 	mov	r7,fp
 800b794:	0009883a 	mov	r4,zero
 800b798:	003fad06 	br	800b650 <__alt_data_end+0xfc00b650>

0800b79c <__divsi3>:
 800b79c:	20001b16 	blt	r4,zero,800b80c <__divsi3+0x70>
 800b7a0:	000f883a 	mov	r7,zero
 800b7a4:	28001616 	blt	r5,zero,800b800 <__divsi3+0x64>
 800b7a8:	200d883a 	mov	r6,r4
 800b7ac:	29001a2e 	bgeu	r5,r4,800b818 <__divsi3+0x7c>
 800b7b0:	00800804 	movi	r2,32
 800b7b4:	00c00044 	movi	r3,1
 800b7b8:	00000106 	br	800b7c0 <__divsi3+0x24>
 800b7bc:	10000d26 	beq	r2,zero,800b7f4 <__divsi3+0x58>
 800b7c0:	294b883a 	add	r5,r5,r5
 800b7c4:	10bfffc4 	addi	r2,r2,-1
 800b7c8:	18c7883a 	add	r3,r3,r3
 800b7cc:	293ffb36 	bltu	r5,r4,800b7bc <__alt_data_end+0xfc00b7bc>
 800b7d0:	0005883a 	mov	r2,zero
 800b7d4:	18000726 	beq	r3,zero,800b7f4 <__divsi3+0x58>
 800b7d8:	0005883a 	mov	r2,zero
 800b7dc:	31400236 	bltu	r6,r5,800b7e8 <__divsi3+0x4c>
 800b7e0:	314dc83a 	sub	r6,r6,r5
 800b7e4:	10c4b03a 	or	r2,r2,r3
 800b7e8:	1806d07a 	srli	r3,r3,1
 800b7ec:	280ad07a 	srli	r5,r5,1
 800b7f0:	183ffa1e 	bne	r3,zero,800b7dc <__alt_data_end+0xfc00b7dc>
 800b7f4:	38000126 	beq	r7,zero,800b7fc <__divsi3+0x60>
 800b7f8:	0085c83a 	sub	r2,zero,r2
 800b7fc:	f800283a 	ret
 800b800:	014bc83a 	sub	r5,zero,r5
 800b804:	39c0005c 	xori	r7,r7,1
 800b808:	003fe706 	br	800b7a8 <__alt_data_end+0xfc00b7a8>
 800b80c:	0109c83a 	sub	r4,zero,r4
 800b810:	01c00044 	movi	r7,1
 800b814:	003fe306 	br	800b7a4 <__alt_data_end+0xfc00b7a4>
 800b818:	00c00044 	movi	r3,1
 800b81c:	003fee06 	br	800b7d8 <__alt_data_end+0xfc00b7d8>

0800b820 <__modsi3>:
 800b820:	20001716 	blt	r4,zero,800b880 <__modsi3+0x60>
 800b824:	000f883a 	mov	r7,zero
 800b828:	2005883a 	mov	r2,r4
 800b82c:	28001216 	blt	r5,zero,800b878 <__modsi3+0x58>
 800b830:	2900162e 	bgeu	r5,r4,800b88c <__modsi3+0x6c>
 800b834:	01800804 	movi	r6,32
 800b838:	00c00044 	movi	r3,1
 800b83c:	00000106 	br	800b844 <__modsi3+0x24>
 800b840:	30000a26 	beq	r6,zero,800b86c <__modsi3+0x4c>
 800b844:	294b883a 	add	r5,r5,r5
 800b848:	31bfffc4 	addi	r6,r6,-1
 800b84c:	18c7883a 	add	r3,r3,r3
 800b850:	293ffb36 	bltu	r5,r4,800b840 <__alt_data_end+0xfc00b840>
 800b854:	18000526 	beq	r3,zero,800b86c <__modsi3+0x4c>
 800b858:	1806d07a 	srli	r3,r3,1
 800b85c:	11400136 	bltu	r2,r5,800b864 <__modsi3+0x44>
 800b860:	1145c83a 	sub	r2,r2,r5
 800b864:	280ad07a 	srli	r5,r5,1
 800b868:	183ffb1e 	bne	r3,zero,800b858 <__alt_data_end+0xfc00b858>
 800b86c:	38000126 	beq	r7,zero,800b874 <__modsi3+0x54>
 800b870:	0085c83a 	sub	r2,zero,r2
 800b874:	f800283a 	ret
 800b878:	014bc83a 	sub	r5,zero,r5
 800b87c:	003fec06 	br	800b830 <__alt_data_end+0xfc00b830>
 800b880:	0109c83a 	sub	r4,zero,r4
 800b884:	01c00044 	movi	r7,1
 800b888:	003fe706 	br	800b828 <__alt_data_end+0xfc00b828>
 800b88c:	00c00044 	movi	r3,1
 800b890:	003ff106 	br	800b858 <__alt_data_end+0xfc00b858>

0800b894 <__udivsi3>:
 800b894:	200d883a 	mov	r6,r4
 800b898:	2900152e 	bgeu	r5,r4,800b8f0 <__udivsi3+0x5c>
 800b89c:	28001416 	blt	r5,zero,800b8f0 <__udivsi3+0x5c>
 800b8a0:	00800804 	movi	r2,32
 800b8a4:	00c00044 	movi	r3,1
 800b8a8:	00000206 	br	800b8b4 <__udivsi3+0x20>
 800b8ac:	10000e26 	beq	r2,zero,800b8e8 <__udivsi3+0x54>
 800b8b0:	28000516 	blt	r5,zero,800b8c8 <__udivsi3+0x34>
 800b8b4:	294b883a 	add	r5,r5,r5
 800b8b8:	10bfffc4 	addi	r2,r2,-1
 800b8bc:	18c7883a 	add	r3,r3,r3
 800b8c0:	293ffa36 	bltu	r5,r4,800b8ac <__alt_data_end+0xfc00b8ac>
 800b8c4:	18000826 	beq	r3,zero,800b8e8 <__udivsi3+0x54>
 800b8c8:	0005883a 	mov	r2,zero
 800b8cc:	31400236 	bltu	r6,r5,800b8d8 <__udivsi3+0x44>
 800b8d0:	314dc83a 	sub	r6,r6,r5
 800b8d4:	10c4b03a 	or	r2,r2,r3
 800b8d8:	1806d07a 	srli	r3,r3,1
 800b8dc:	280ad07a 	srli	r5,r5,1
 800b8e0:	183ffa1e 	bne	r3,zero,800b8cc <__alt_data_end+0xfc00b8cc>
 800b8e4:	f800283a 	ret
 800b8e8:	0005883a 	mov	r2,zero
 800b8ec:	f800283a 	ret
 800b8f0:	00c00044 	movi	r3,1
 800b8f4:	003ff406 	br	800b8c8 <__alt_data_end+0xfc00b8c8>

0800b8f8 <__umodsi3>:
 800b8f8:	2005883a 	mov	r2,r4
 800b8fc:	2900122e 	bgeu	r5,r4,800b948 <__umodsi3+0x50>
 800b900:	28001116 	blt	r5,zero,800b948 <__umodsi3+0x50>
 800b904:	01800804 	movi	r6,32
 800b908:	00c00044 	movi	r3,1
 800b90c:	00000206 	br	800b918 <__umodsi3+0x20>
 800b910:	30000c26 	beq	r6,zero,800b944 <__umodsi3+0x4c>
 800b914:	28000516 	blt	r5,zero,800b92c <__umodsi3+0x34>
 800b918:	294b883a 	add	r5,r5,r5
 800b91c:	31bfffc4 	addi	r6,r6,-1
 800b920:	18c7883a 	add	r3,r3,r3
 800b924:	293ffa36 	bltu	r5,r4,800b910 <__alt_data_end+0xfc00b910>
 800b928:	18000626 	beq	r3,zero,800b944 <__umodsi3+0x4c>
 800b92c:	1806d07a 	srli	r3,r3,1
 800b930:	11400136 	bltu	r2,r5,800b938 <__umodsi3+0x40>
 800b934:	1145c83a 	sub	r2,r2,r5
 800b938:	280ad07a 	srli	r5,r5,1
 800b93c:	183ffb1e 	bne	r3,zero,800b92c <__alt_data_end+0xfc00b92c>
 800b940:	f800283a 	ret
 800b944:	f800283a 	ret
 800b948:	00c00044 	movi	r3,1
 800b94c:	003ff706 	br	800b92c <__alt_data_end+0xfc00b92c>

0800b950 <__adddf3>:
 800b950:	02c00434 	movhi	r11,16
 800b954:	5affffc4 	addi	r11,r11,-1
 800b958:	2806d7fa 	srli	r3,r5,31
 800b95c:	2ad4703a 	and	r10,r5,r11
 800b960:	3ad2703a 	and	r9,r7,r11
 800b964:	3804d53a 	srli	r2,r7,20
 800b968:	3018d77a 	srli	r12,r6,29
 800b96c:	280ad53a 	srli	r5,r5,20
 800b970:	501490fa 	slli	r10,r10,3
 800b974:	2010d77a 	srli	r8,r4,29
 800b978:	481290fa 	slli	r9,r9,3
 800b97c:	380ed7fa 	srli	r7,r7,31
 800b980:	defffb04 	addi	sp,sp,-20
 800b984:	dc800215 	stw	r18,8(sp)
 800b988:	dc400115 	stw	r17,4(sp)
 800b98c:	dc000015 	stw	r16,0(sp)
 800b990:	dfc00415 	stw	ra,16(sp)
 800b994:	dcc00315 	stw	r19,12(sp)
 800b998:	1c803fcc 	andi	r18,r3,255
 800b99c:	2c01ffcc 	andi	r16,r5,2047
 800b9a0:	5210b03a 	or	r8,r10,r8
 800b9a4:	202290fa 	slli	r17,r4,3
 800b9a8:	1081ffcc 	andi	r2,r2,2047
 800b9ac:	4b12b03a 	or	r9,r9,r12
 800b9b0:	300c90fa 	slli	r6,r6,3
 800b9b4:	91c07526 	beq	r18,r7,800bb8c <__adddf3+0x23c>
 800b9b8:	8087c83a 	sub	r3,r16,r2
 800b9bc:	00c0ab0e 	bge	zero,r3,800bc6c <__adddf3+0x31c>
 800b9c0:	10002a1e 	bne	r2,zero,800ba6c <__adddf3+0x11c>
 800b9c4:	4984b03a 	or	r2,r9,r6
 800b9c8:	1000961e 	bne	r2,zero,800bc24 <__adddf3+0x2d4>
 800b9cc:	888001cc 	andi	r2,r17,7
 800b9d0:	10000726 	beq	r2,zero,800b9f0 <__adddf3+0xa0>
 800b9d4:	888003cc 	andi	r2,r17,15
 800b9d8:	00c00104 	movi	r3,4
 800b9dc:	10c00426 	beq	r2,r3,800b9f0 <__adddf3+0xa0>
 800b9e0:	88c7883a 	add	r3,r17,r3
 800b9e4:	1c63803a 	cmpltu	r17,r3,r17
 800b9e8:	4451883a 	add	r8,r8,r17
 800b9ec:	1823883a 	mov	r17,r3
 800b9f0:	4080202c 	andhi	r2,r8,128
 800b9f4:	10005926 	beq	r2,zero,800bb5c <__adddf3+0x20c>
 800b9f8:	84000044 	addi	r16,r16,1
 800b9fc:	0081ffc4 	movi	r2,2047
 800ba00:	8080ba26 	beq	r16,r2,800bcec <__adddf3+0x39c>
 800ba04:	00bfe034 	movhi	r2,65408
 800ba08:	10bfffc4 	addi	r2,r2,-1
 800ba0c:	4090703a 	and	r8,r8,r2
 800ba10:	4004977a 	slli	r2,r8,29
 800ba14:	4010927a 	slli	r8,r8,9
 800ba18:	8822d0fa 	srli	r17,r17,3
 800ba1c:	8401ffcc 	andi	r16,r16,2047
 800ba20:	4010d33a 	srli	r8,r8,12
 800ba24:	9007883a 	mov	r3,r18
 800ba28:	1444b03a 	or	r2,r2,r17
 800ba2c:	8401ffcc 	andi	r16,r16,2047
 800ba30:	8020953a 	slli	r16,r16,20
 800ba34:	18c03fcc 	andi	r3,r3,255
 800ba38:	01000434 	movhi	r4,16
 800ba3c:	213fffc4 	addi	r4,r4,-1
 800ba40:	180697fa 	slli	r3,r3,31
 800ba44:	4110703a 	and	r8,r8,r4
 800ba48:	4410b03a 	or	r8,r8,r16
 800ba4c:	40c6b03a 	or	r3,r8,r3
 800ba50:	dfc00417 	ldw	ra,16(sp)
 800ba54:	dcc00317 	ldw	r19,12(sp)
 800ba58:	dc800217 	ldw	r18,8(sp)
 800ba5c:	dc400117 	ldw	r17,4(sp)
 800ba60:	dc000017 	ldw	r16,0(sp)
 800ba64:	dec00504 	addi	sp,sp,20
 800ba68:	f800283a 	ret
 800ba6c:	0081ffc4 	movi	r2,2047
 800ba70:	80bfd626 	beq	r16,r2,800b9cc <__alt_data_end+0xfc00b9cc>
 800ba74:	4a402034 	orhi	r9,r9,128
 800ba78:	00800e04 	movi	r2,56
 800ba7c:	10c09f16 	blt	r2,r3,800bcfc <__adddf3+0x3ac>
 800ba80:	008007c4 	movi	r2,31
 800ba84:	10c0c216 	blt	r2,r3,800bd90 <__adddf3+0x440>
 800ba88:	00800804 	movi	r2,32
 800ba8c:	10c5c83a 	sub	r2,r2,r3
 800ba90:	488a983a 	sll	r5,r9,r2
 800ba94:	30c8d83a 	srl	r4,r6,r3
 800ba98:	3084983a 	sll	r2,r6,r2
 800ba9c:	48c6d83a 	srl	r3,r9,r3
 800baa0:	290cb03a 	or	r6,r5,r4
 800baa4:	1004c03a 	cmpne	r2,r2,zero
 800baa8:	308cb03a 	or	r6,r6,r2
 800baac:	898dc83a 	sub	r6,r17,r6
 800bab0:	89a3803a 	cmpltu	r17,r17,r6
 800bab4:	40d1c83a 	sub	r8,r8,r3
 800bab8:	4451c83a 	sub	r8,r8,r17
 800babc:	3023883a 	mov	r17,r6
 800bac0:	4080202c 	andhi	r2,r8,128
 800bac4:	10002326 	beq	r2,zero,800bb54 <__adddf3+0x204>
 800bac8:	04c02034 	movhi	r19,128
 800bacc:	9cffffc4 	addi	r19,r19,-1
 800bad0:	44e6703a 	and	r19,r8,r19
 800bad4:	98007626 	beq	r19,zero,800bcb0 <__adddf3+0x360>
 800bad8:	9809883a 	mov	r4,r19
 800badc:	80012500 	call	8001250 <__clzsi2>
 800bae0:	10fffe04 	addi	r3,r2,-8
 800bae4:	010007c4 	movi	r4,31
 800bae8:	20c07716 	blt	r4,r3,800bcc8 <__adddf3+0x378>
 800baec:	00800804 	movi	r2,32
 800baf0:	10c5c83a 	sub	r2,r2,r3
 800baf4:	8884d83a 	srl	r2,r17,r2
 800baf8:	98d0983a 	sll	r8,r19,r3
 800bafc:	88e2983a 	sll	r17,r17,r3
 800bb00:	1204b03a 	or	r2,r2,r8
 800bb04:	1c007416 	blt	r3,r16,800bcd8 <__adddf3+0x388>
 800bb08:	1c21c83a 	sub	r16,r3,r16
 800bb0c:	82000044 	addi	r8,r16,1
 800bb10:	00c007c4 	movi	r3,31
 800bb14:	1a009116 	blt	r3,r8,800bd5c <__adddf3+0x40c>
 800bb18:	00c00804 	movi	r3,32
 800bb1c:	1a07c83a 	sub	r3,r3,r8
 800bb20:	8a08d83a 	srl	r4,r17,r8
 800bb24:	88e2983a 	sll	r17,r17,r3
 800bb28:	10c6983a 	sll	r3,r2,r3
 800bb2c:	1210d83a 	srl	r8,r2,r8
 800bb30:	8804c03a 	cmpne	r2,r17,zero
 800bb34:	1906b03a 	or	r3,r3,r4
 800bb38:	18a2b03a 	or	r17,r3,r2
 800bb3c:	0021883a 	mov	r16,zero
 800bb40:	003fa206 	br	800b9cc <__alt_data_end+0xfc00b9cc>
 800bb44:	1890b03a 	or	r8,r3,r2
 800bb48:	40017d26 	beq	r8,zero,800c140 <__adddf3+0x7f0>
 800bb4c:	1011883a 	mov	r8,r2
 800bb50:	1823883a 	mov	r17,r3
 800bb54:	888001cc 	andi	r2,r17,7
 800bb58:	103f9e1e 	bne	r2,zero,800b9d4 <__alt_data_end+0xfc00b9d4>
 800bb5c:	4004977a 	slli	r2,r8,29
 800bb60:	8822d0fa 	srli	r17,r17,3
 800bb64:	4010d0fa 	srli	r8,r8,3
 800bb68:	9007883a 	mov	r3,r18
 800bb6c:	1444b03a 	or	r2,r2,r17
 800bb70:	0101ffc4 	movi	r4,2047
 800bb74:	81002426 	beq	r16,r4,800bc08 <__adddf3+0x2b8>
 800bb78:	8120703a 	and	r16,r16,r4
 800bb7c:	01000434 	movhi	r4,16
 800bb80:	213fffc4 	addi	r4,r4,-1
 800bb84:	4110703a 	and	r8,r8,r4
 800bb88:	003fa806 	br	800ba2c <__alt_data_end+0xfc00ba2c>
 800bb8c:	8089c83a 	sub	r4,r16,r2
 800bb90:	01005e0e 	bge	zero,r4,800bd0c <__adddf3+0x3bc>
 800bb94:	10002b26 	beq	r2,zero,800bc44 <__adddf3+0x2f4>
 800bb98:	0081ffc4 	movi	r2,2047
 800bb9c:	80bf8b26 	beq	r16,r2,800b9cc <__alt_data_end+0xfc00b9cc>
 800bba0:	4a402034 	orhi	r9,r9,128
 800bba4:	00800e04 	movi	r2,56
 800bba8:	1100a40e 	bge	r2,r4,800be3c <__adddf3+0x4ec>
 800bbac:	498cb03a 	or	r6,r9,r6
 800bbb0:	300ac03a 	cmpne	r5,r6,zero
 800bbb4:	0013883a 	mov	r9,zero
 800bbb8:	2c4b883a 	add	r5,r5,r17
 800bbbc:	2c63803a 	cmpltu	r17,r5,r17
 800bbc0:	4a11883a 	add	r8,r9,r8
 800bbc4:	8a11883a 	add	r8,r17,r8
 800bbc8:	2823883a 	mov	r17,r5
 800bbcc:	4080202c 	andhi	r2,r8,128
 800bbd0:	103fe026 	beq	r2,zero,800bb54 <__alt_data_end+0xfc00bb54>
 800bbd4:	84000044 	addi	r16,r16,1
 800bbd8:	0081ffc4 	movi	r2,2047
 800bbdc:	8080d226 	beq	r16,r2,800bf28 <__adddf3+0x5d8>
 800bbe0:	00bfe034 	movhi	r2,65408
 800bbe4:	10bfffc4 	addi	r2,r2,-1
 800bbe8:	4090703a 	and	r8,r8,r2
 800bbec:	880ad07a 	srli	r5,r17,1
 800bbf0:	400897fa 	slli	r4,r8,31
 800bbf4:	88c0004c 	andi	r3,r17,1
 800bbf8:	28e2b03a 	or	r17,r5,r3
 800bbfc:	4010d07a 	srli	r8,r8,1
 800bc00:	2462b03a 	or	r17,r4,r17
 800bc04:	003f7106 	br	800b9cc <__alt_data_end+0xfc00b9cc>
 800bc08:	4088b03a 	or	r4,r8,r2
 800bc0c:	20014526 	beq	r4,zero,800c124 <__adddf3+0x7d4>
 800bc10:	01000434 	movhi	r4,16
 800bc14:	42000234 	orhi	r8,r8,8
 800bc18:	213fffc4 	addi	r4,r4,-1
 800bc1c:	4110703a 	and	r8,r8,r4
 800bc20:	003f8206 	br	800ba2c <__alt_data_end+0xfc00ba2c>
 800bc24:	18ffffc4 	addi	r3,r3,-1
 800bc28:	1800491e 	bne	r3,zero,800bd50 <__adddf3+0x400>
 800bc2c:	898bc83a 	sub	r5,r17,r6
 800bc30:	8963803a 	cmpltu	r17,r17,r5
 800bc34:	4251c83a 	sub	r8,r8,r9
 800bc38:	4451c83a 	sub	r8,r8,r17
 800bc3c:	2823883a 	mov	r17,r5
 800bc40:	003f9f06 	br	800bac0 <__alt_data_end+0xfc00bac0>
 800bc44:	4984b03a 	or	r2,r9,r6
 800bc48:	103f6026 	beq	r2,zero,800b9cc <__alt_data_end+0xfc00b9cc>
 800bc4c:	213fffc4 	addi	r4,r4,-1
 800bc50:	2000931e 	bne	r4,zero,800bea0 <__adddf3+0x550>
 800bc54:	898d883a 	add	r6,r17,r6
 800bc58:	3463803a 	cmpltu	r17,r6,r17
 800bc5c:	4251883a 	add	r8,r8,r9
 800bc60:	8a11883a 	add	r8,r17,r8
 800bc64:	3023883a 	mov	r17,r6
 800bc68:	003fd806 	br	800bbcc <__alt_data_end+0xfc00bbcc>
 800bc6c:	1800541e 	bne	r3,zero,800bdc0 <__adddf3+0x470>
 800bc70:	80800044 	addi	r2,r16,1
 800bc74:	1081ffcc 	andi	r2,r2,2047
 800bc78:	00c00044 	movi	r3,1
 800bc7c:	1880a00e 	bge	r3,r2,800bf00 <__adddf3+0x5b0>
 800bc80:	8989c83a 	sub	r4,r17,r6
 800bc84:	8905803a 	cmpltu	r2,r17,r4
 800bc88:	4267c83a 	sub	r19,r8,r9
 800bc8c:	98a7c83a 	sub	r19,r19,r2
 800bc90:	9880202c 	andhi	r2,r19,128
 800bc94:	10006326 	beq	r2,zero,800be24 <__adddf3+0x4d4>
 800bc98:	3463c83a 	sub	r17,r6,r17
 800bc9c:	4a07c83a 	sub	r3,r9,r8
 800bca0:	344d803a 	cmpltu	r6,r6,r17
 800bca4:	19a7c83a 	sub	r19,r3,r6
 800bca8:	3825883a 	mov	r18,r7
 800bcac:	983f8a1e 	bne	r19,zero,800bad8 <__alt_data_end+0xfc00bad8>
 800bcb0:	8809883a 	mov	r4,r17
 800bcb4:	80012500 	call	8001250 <__clzsi2>
 800bcb8:	10800804 	addi	r2,r2,32
 800bcbc:	10fffe04 	addi	r3,r2,-8
 800bcc0:	010007c4 	movi	r4,31
 800bcc4:	20ff890e 	bge	r4,r3,800baec <__alt_data_end+0xfc00baec>
 800bcc8:	10bff604 	addi	r2,r2,-40
 800bccc:	8884983a 	sll	r2,r17,r2
 800bcd0:	0023883a 	mov	r17,zero
 800bcd4:	1c3f8c0e 	bge	r3,r16,800bb08 <__alt_data_end+0xfc00bb08>
 800bcd8:	023fe034 	movhi	r8,65408
 800bcdc:	423fffc4 	addi	r8,r8,-1
 800bce0:	80e1c83a 	sub	r16,r16,r3
 800bce4:	1210703a 	and	r8,r2,r8
 800bce8:	003f3806 	br	800b9cc <__alt_data_end+0xfc00b9cc>
 800bcec:	9007883a 	mov	r3,r18
 800bcf0:	0011883a 	mov	r8,zero
 800bcf4:	0005883a 	mov	r2,zero
 800bcf8:	003f4c06 	br	800ba2c <__alt_data_end+0xfc00ba2c>
 800bcfc:	498cb03a 	or	r6,r9,r6
 800bd00:	300cc03a 	cmpne	r6,r6,zero
 800bd04:	0007883a 	mov	r3,zero
 800bd08:	003f6806 	br	800baac <__alt_data_end+0xfc00baac>
 800bd0c:	20009c1e 	bne	r4,zero,800bf80 <__adddf3+0x630>
 800bd10:	80800044 	addi	r2,r16,1
 800bd14:	1141ffcc 	andi	r5,r2,2047
 800bd18:	01000044 	movi	r4,1
 800bd1c:	2140670e 	bge	r4,r5,800bebc <__adddf3+0x56c>
 800bd20:	0101ffc4 	movi	r4,2047
 800bd24:	11007f26 	beq	r2,r4,800bf24 <__adddf3+0x5d4>
 800bd28:	898d883a 	add	r6,r17,r6
 800bd2c:	4247883a 	add	r3,r8,r9
 800bd30:	3451803a 	cmpltu	r8,r6,r17
 800bd34:	40d1883a 	add	r8,r8,r3
 800bd38:	402297fa 	slli	r17,r8,31
 800bd3c:	300cd07a 	srli	r6,r6,1
 800bd40:	4010d07a 	srli	r8,r8,1
 800bd44:	1021883a 	mov	r16,r2
 800bd48:	89a2b03a 	or	r17,r17,r6
 800bd4c:	003f1f06 	br	800b9cc <__alt_data_end+0xfc00b9cc>
 800bd50:	0081ffc4 	movi	r2,2047
 800bd54:	80bf481e 	bne	r16,r2,800ba78 <__alt_data_end+0xfc00ba78>
 800bd58:	003f1c06 	br	800b9cc <__alt_data_end+0xfc00b9cc>
 800bd5c:	843ff844 	addi	r16,r16,-31
 800bd60:	01000804 	movi	r4,32
 800bd64:	1406d83a 	srl	r3,r2,r16
 800bd68:	41005026 	beq	r8,r4,800beac <__adddf3+0x55c>
 800bd6c:	01001004 	movi	r4,64
 800bd70:	2211c83a 	sub	r8,r4,r8
 800bd74:	1204983a 	sll	r2,r2,r8
 800bd78:	88a2b03a 	or	r17,r17,r2
 800bd7c:	8822c03a 	cmpne	r17,r17,zero
 800bd80:	1c62b03a 	or	r17,r3,r17
 800bd84:	0011883a 	mov	r8,zero
 800bd88:	0021883a 	mov	r16,zero
 800bd8c:	003f7106 	br	800bb54 <__alt_data_end+0xfc00bb54>
 800bd90:	193ff804 	addi	r4,r3,-32
 800bd94:	00800804 	movi	r2,32
 800bd98:	4908d83a 	srl	r4,r9,r4
 800bd9c:	18804526 	beq	r3,r2,800beb4 <__adddf3+0x564>
 800bda0:	00801004 	movi	r2,64
 800bda4:	10c5c83a 	sub	r2,r2,r3
 800bda8:	4886983a 	sll	r3,r9,r2
 800bdac:	198cb03a 	or	r6,r3,r6
 800bdb0:	300cc03a 	cmpne	r6,r6,zero
 800bdb4:	218cb03a 	or	r6,r4,r6
 800bdb8:	0007883a 	mov	r3,zero
 800bdbc:	003f3b06 	br	800baac <__alt_data_end+0xfc00baac>
 800bdc0:	80002a26 	beq	r16,zero,800be6c <__adddf3+0x51c>
 800bdc4:	0101ffc4 	movi	r4,2047
 800bdc8:	11006826 	beq	r2,r4,800bf6c <__adddf3+0x61c>
 800bdcc:	00c7c83a 	sub	r3,zero,r3
 800bdd0:	42002034 	orhi	r8,r8,128
 800bdd4:	01000e04 	movi	r4,56
 800bdd8:	20c07c16 	blt	r4,r3,800bfcc <__adddf3+0x67c>
 800bddc:	010007c4 	movi	r4,31
 800bde0:	20c0da16 	blt	r4,r3,800c14c <__adddf3+0x7fc>
 800bde4:	01000804 	movi	r4,32
 800bde8:	20c9c83a 	sub	r4,r4,r3
 800bdec:	4114983a 	sll	r10,r8,r4
 800bdf0:	88cad83a 	srl	r5,r17,r3
 800bdf4:	8908983a 	sll	r4,r17,r4
 800bdf8:	40c6d83a 	srl	r3,r8,r3
 800bdfc:	5162b03a 	or	r17,r10,r5
 800be00:	2008c03a 	cmpne	r4,r4,zero
 800be04:	8922b03a 	or	r17,r17,r4
 800be08:	3463c83a 	sub	r17,r6,r17
 800be0c:	48c7c83a 	sub	r3,r9,r3
 800be10:	344d803a 	cmpltu	r6,r6,r17
 800be14:	1991c83a 	sub	r8,r3,r6
 800be18:	1021883a 	mov	r16,r2
 800be1c:	3825883a 	mov	r18,r7
 800be20:	003f2706 	br	800bac0 <__alt_data_end+0xfc00bac0>
 800be24:	24d0b03a 	or	r8,r4,r19
 800be28:	40001b1e 	bne	r8,zero,800be98 <__adddf3+0x548>
 800be2c:	0005883a 	mov	r2,zero
 800be30:	0007883a 	mov	r3,zero
 800be34:	0021883a 	mov	r16,zero
 800be38:	003f4d06 	br	800bb70 <__alt_data_end+0xfc00bb70>
 800be3c:	008007c4 	movi	r2,31
 800be40:	11003c16 	blt	r2,r4,800bf34 <__adddf3+0x5e4>
 800be44:	00800804 	movi	r2,32
 800be48:	1105c83a 	sub	r2,r2,r4
 800be4c:	488e983a 	sll	r7,r9,r2
 800be50:	310ad83a 	srl	r5,r6,r4
 800be54:	3084983a 	sll	r2,r6,r2
 800be58:	4912d83a 	srl	r9,r9,r4
 800be5c:	394ab03a 	or	r5,r7,r5
 800be60:	1004c03a 	cmpne	r2,r2,zero
 800be64:	288ab03a 	or	r5,r5,r2
 800be68:	003f5306 	br	800bbb8 <__alt_data_end+0xfc00bbb8>
 800be6c:	4448b03a 	or	r4,r8,r17
 800be70:	20003e26 	beq	r4,zero,800bf6c <__adddf3+0x61c>
 800be74:	00c6303a 	nor	r3,zero,r3
 800be78:	18003a1e 	bne	r3,zero,800bf64 <__adddf3+0x614>
 800be7c:	3463c83a 	sub	r17,r6,r17
 800be80:	4a07c83a 	sub	r3,r9,r8
 800be84:	344d803a 	cmpltu	r6,r6,r17
 800be88:	1991c83a 	sub	r8,r3,r6
 800be8c:	1021883a 	mov	r16,r2
 800be90:	3825883a 	mov	r18,r7
 800be94:	003f0a06 	br	800bac0 <__alt_data_end+0xfc00bac0>
 800be98:	2023883a 	mov	r17,r4
 800be9c:	003f0d06 	br	800bad4 <__alt_data_end+0xfc00bad4>
 800bea0:	0081ffc4 	movi	r2,2047
 800bea4:	80bf3f1e 	bne	r16,r2,800bba4 <__alt_data_end+0xfc00bba4>
 800bea8:	003ec806 	br	800b9cc <__alt_data_end+0xfc00b9cc>
 800beac:	0005883a 	mov	r2,zero
 800beb0:	003fb106 	br	800bd78 <__alt_data_end+0xfc00bd78>
 800beb4:	0007883a 	mov	r3,zero
 800beb8:	003fbc06 	br	800bdac <__alt_data_end+0xfc00bdac>
 800bebc:	4444b03a 	or	r2,r8,r17
 800bec0:	8000871e 	bne	r16,zero,800c0e0 <__adddf3+0x790>
 800bec4:	1000ba26 	beq	r2,zero,800c1b0 <__adddf3+0x860>
 800bec8:	4984b03a 	or	r2,r9,r6
 800becc:	103ebf26 	beq	r2,zero,800b9cc <__alt_data_end+0xfc00b9cc>
 800bed0:	8985883a 	add	r2,r17,r6
 800bed4:	4247883a 	add	r3,r8,r9
 800bed8:	1451803a 	cmpltu	r8,r2,r17
 800bedc:	40d1883a 	add	r8,r8,r3
 800bee0:	40c0202c 	andhi	r3,r8,128
 800bee4:	1023883a 	mov	r17,r2
 800bee8:	183f1a26 	beq	r3,zero,800bb54 <__alt_data_end+0xfc00bb54>
 800beec:	00bfe034 	movhi	r2,65408
 800bef0:	10bfffc4 	addi	r2,r2,-1
 800bef4:	2021883a 	mov	r16,r4
 800bef8:	4090703a 	and	r8,r8,r2
 800befc:	003eb306 	br	800b9cc <__alt_data_end+0xfc00b9cc>
 800bf00:	4444b03a 	or	r2,r8,r17
 800bf04:	8000291e 	bne	r16,zero,800bfac <__adddf3+0x65c>
 800bf08:	10004b1e 	bne	r2,zero,800c038 <__adddf3+0x6e8>
 800bf0c:	4990b03a 	or	r8,r9,r6
 800bf10:	40008b26 	beq	r8,zero,800c140 <__adddf3+0x7f0>
 800bf14:	4811883a 	mov	r8,r9
 800bf18:	3023883a 	mov	r17,r6
 800bf1c:	3825883a 	mov	r18,r7
 800bf20:	003eaa06 	br	800b9cc <__alt_data_end+0xfc00b9cc>
 800bf24:	1021883a 	mov	r16,r2
 800bf28:	0011883a 	mov	r8,zero
 800bf2c:	0005883a 	mov	r2,zero
 800bf30:	003f0f06 	br	800bb70 <__alt_data_end+0xfc00bb70>
 800bf34:	217ff804 	addi	r5,r4,-32
 800bf38:	00800804 	movi	r2,32
 800bf3c:	494ad83a 	srl	r5,r9,r5
 800bf40:	20807d26 	beq	r4,r2,800c138 <__adddf3+0x7e8>
 800bf44:	00801004 	movi	r2,64
 800bf48:	1109c83a 	sub	r4,r2,r4
 800bf4c:	4912983a 	sll	r9,r9,r4
 800bf50:	498cb03a 	or	r6,r9,r6
 800bf54:	300cc03a 	cmpne	r6,r6,zero
 800bf58:	298ab03a 	or	r5,r5,r6
 800bf5c:	0013883a 	mov	r9,zero
 800bf60:	003f1506 	br	800bbb8 <__alt_data_end+0xfc00bbb8>
 800bf64:	0101ffc4 	movi	r4,2047
 800bf68:	113f9a1e 	bne	r2,r4,800bdd4 <__alt_data_end+0xfc00bdd4>
 800bf6c:	4811883a 	mov	r8,r9
 800bf70:	3023883a 	mov	r17,r6
 800bf74:	1021883a 	mov	r16,r2
 800bf78:	3825883a 	mov	r18,r7
 800bf7c:	003e9306 	br	800b9cc <__alt_data_end+0xfc00b9cc>
 800bf80:	8000161e 	bne	r16,zero,800bfdc <__adddf3+0x68c>
 800bf84:	444ab03a 	or	r5,r8,r17
 800bf88:	28005126 	beq	r5,zero,800c0d0 <__adddf3+0x780>
 800bf8c:	0108303a 	nor	r4,zero,r4
 800bf90:	20004d1e 	bne	r4,zero,800c0c8 <__adddf3+0x778>
 800bf94:	89a3883a 	add	r17,r17,r6
 800bf98:	4253883a 	add	r9,r8,r9
 800bf9c:	898d803a 	cmpltu	r6,r17,r6
 800bfa0:	3251883a 	add	r8,r6,r9
 800bfa4:	1021883a 	mov	r16,r2
 800bfa8:	003f0806 	br	800bbcc <__alt_data_end+0xfc00bbcc>
 800bfac:	1000301e 	bne	r2,zero,800c070 <__adddf3+0x720>
 800bfb0:	4984b03a 	or	r2,r9,r6
 800bfb4:	10007126 	beq	r2,zero,800c17c <__adddf3+0x82c>
 800bfb8:	4811883a 	mov	r8,r9
 800bfbc:	3023883a 	mov	r17,r6
 800bfc0:	3825883a 	mov	r18,r7
 800bfc4:	0401ffc4 	movi	r16,2047
 800bfc8:	003e8006 	br	800b9cc <__alt_data_end+0xfc00b9cc>
 800bfcc:	4462b03a 	or	r17,r8,r17
 800bfd0:	8822c03a 	cmpne	r17,r17,zero
 800bfd4:	0007883a 	mov	r3,zero
 800bfd8:	003f8b06 	br	800be08 <__alt_data_end+0xfc00be08>
 800bfdc:	0141ffc4 	movi	r5,2047
 800bfe0:	11403b26 	beq	r2,r5,800c0d0 <__adddf3+0x780>
 800bfe4:	0109c83a 	sub	r4,zero,r4
 800bfe8:	42002034 	orhi	r8,r8,128
 800bfec:	01400e04 	movi	r5,56
 800bff0:	29006716 	blt	r5,r4,800c190 <__adddf3+0x840>
 800bff4:	014007c4 	movi	r5,31
 800bff8:	29007016 	blt	r5,r4,800c1bc <__adddf3+0x86c>
 800bffc:	01400804 	movi	r5,32
 800c000:	290bc83a 	sub	r5,r5,r4
 800c004:	4154983a 	sll	r10,r8,r5
 800c008:	890ed83a 	srl	r7,r17,r4
 800c00c:	894a983a 	sll	r5,r17,r5
 800c010:	4108d83a 	srl	r4,r8,r4
 800c014:	51e2b03a 	or	r17,r10,r7
 800c018:	280ac03a 	cmpne	r5,r5,zero
 800c01c:	8962b03a 	or	r17,r17,r5
 800c020:	89a3883a 	add	r17,r17,r6
 800c024:	2253883a 	add	r9,r4,r9
 800c028:	898d803a 	cmpltu	r6,r17,r6
 800c02c:	3251883a 	add	r8,r6,r9
 800c030:	1021883a 	mov	r16,r2
 800c034:	003ee506 	br	800bbcc <__alt_data_end+0xfc00bbcc>
 800c038:	4984b03a 	or	r2,r9,r6
 800c03c:	103e6326 	beq	r2,zero,800b9cc <__alt_data_end+0xfc00b9cc>
 800c040:	8987c83a 	sub	r3,r17,r6
 800c044:	88c9803a 	cmpltu	r4,r17,r3
 800c048:	4245c83a 	sub	r2,r8,r9
 800c04c:	1105c83a 	sub	r2,r2,r4
 800c050:	1100202c 	andhi	r4,r2,128
 800c054:	203ebb26 	beq	r4,zero,800bb44 <__alt_data_end+0xfc00bb44>
 800c058:	3463c83a 	sub	r17,r6,r17
 800c05c:	4a07c83a 	sub	r3,r9,r8
 800c060:	344d803a 	cmpltu	r6,r6,r17
 800c064:	1991c83a 	sub	r8,r3,r6
 800c068:	3825883a 	mov	r18,r7
 800c06c:	003e5706 	br	800b9cc <__alt_data_end+0xfc00b9cc>
 800c070:	4984b03a 	or	r2,r9,r6
 800c074:	10002e26 	beq	r2,zero,800c130 <__adddf3+0x7e0>
 800c078:	4004d0fa 	srli	r2,r8,3
 800c07c:	8822d0fa 	srli	r17,r17,3
 800c080:	4010977a 	slli	r8,r8,29
 800c084:	10c0022c 	andhi	r3,r2,8
 800c088:	4462b03a 	or	r17,r8,r17
 800c08c:	18000826 	beq	r3,zero,800c0b0 <__adddf3+0x760>
 800c090:	4808d0fa 	srli	r4,r9,3
 800c094:	20c0022c 	andhi	r3,r4,8
 800c098:	1800051e 	bne	r3,zero,800c0b0 <__adddf3+0x760>
 800c09c:	300cd0fa 	srli	r6,r6,3
 800c0a0:	4806977a 	slli	r3,r9,29
 800c0a4:	2005883a 	mov	r2,r4
 800c0a8:	3825883a 	mov	r18,r7
 800c0ac:	19a2b03a 	or	r17,r3,r6
 800c0b0:	8810d77a 	srli	r8,r17,29
 800c0b4:	100490fa 	slli	r2,r2,3
 800c0b8:	882290fa 	slli	r17,r17,3
 800c0bc:	0401ffc4 	movi	r16,2047
 800c0c0:	4090b03a 	or	r8,r8,r2
 800c0c4:	003e4106 	br	800b9cc <__alt_data_end+0xfc00b9cc>
 800c0c8:	0141ffc4 	movi	r5,2047
 800c0cc:	117fc71e 	bne	r2,r5,800bfec <__alt_data_end+0xfc00bfec>
 800c0d0:	4811883a 	mov	r8,r9
 800c0d4:	3023883a 	mov	r17,r6
 800c0d8:	1021883a 	mov	r16,r2
 800c0dc:	003e3b06 	br	800b9cc <__alt_data_end+0xfc00b9cc>
 800c0e0:	10002f26 	beq	r2,zero,800c1a0 <__adddf3+0x850>
 800c0e4:	4984b03a 	or	r2,r9,r6
 800c0e8:	10001126 	beq	r2,zero,800c130 <__adddf3+0x7e0>
 800c0ec:	4004d0fa 	srli	r2,r8,3
 800c0f0:	8822d0fa 	srli	r17,r17,3
 800c0f4:	4010977a 	slli	r8,r8,29
 800c0f8:	10c0022c 	andhi	r3,r2,8
 800c0fc:	4462b03a 	or	r17,r8,r17
 800c100:	183feb26 	beq	r3,zero,800c0b0 <__alt_data_end+0xfc00c0b0>
 800c104:	4808d0fa 	srli	r4,r9,3
 800c108:	20c0022c 	andhi	r3,r4,8
 800c10c:	183fe81e 	bne	r3,zero,800c0b0 <__alt_data_end+0xfc00c0b0>
 800c110:	300cd0fa 	srli	r6,r6,3
 800c114:	4806977a 	slli	r3,r9,29
 800c118:	2005883a 	mov	r2,r4
 800c11c:	19a2b03a 	or	r17,r3,r6
 800c120:	003fe306 	br	800c0b0 <__alt_data_end+0xfc00c0b0>
 800c124:	0011883a 	mov	r8,zero
 800c128:	0005883a 	mov	r2,zero
 800c12c:	003e3f06 	br	800ba2c <__alt_data_end+0xfc00ba2c>
 800c130:	0401ffc4 	movi	r16,2047
 800c134:	003e2506 	br	800b9cc <__alt_data_end+0xfc00b9cc>
 800c138:	0013883a 	mov	r9,zero
 800c13c:	003f8406 	br	800bf50 <__alt_data_end+0xfc00bf50>
 800c140:	0005883a 	mov	r2,zero
 800c144:	0007883a 	mov	r3,zero
 800c148:	003e8906 	br	800bb70 <__alt_data_end+0xfc00bb70>
 800c14c:	197ff804 	addi	r5,r3,-32
 800c150:	01000804 	movi	r4,32
 800c154:	414ad83a 	srl	r5,r8,r5
 800c158:	19002426 	beq	r3,r4,800c1ec <__adddf3+0x89c>
 800c15c:	01001004 	movi	r4,64
 800c160:	20c7c83a 	sub	r3,r4,r3
 800c164:	40c6983a 	sll	r3,r8,r3
 800c168:	1c46b03a 	or	r3,r3,r17
 800c16c:	1806c03a 	cmpne	r3,r3,zero
 800c170:	28e2b03a 	or	r17,r5,r3
 800c174:	0007883a 	mov	r3,zero
 800c178:	003f2306 	br	800be08 <__alt_data_end+0xfc00be08>
 800c17c:	0007883a 	mov	r3,zero
 800c180:	5811883a 	mov	r8,r11
 800c184:	00bfffc4 	movi	r2,-1
 800c188:	0401ffc4 	movi	r16,2047
 800c18c:	003e7806 	br	800bb70 <__alt_data_end+0xfc00bb70>
 800c190:	4462b03a 	or	r17,r8,r17
 800c194:	8822c03a 	cmpne	r17,r17,zero
 800c198:	0009883a 	mov	r4,zero
 800c19c:	003fa006 	br	800c020 <__alt_data_end+0xfc00c020>
 800c1a0:	4811883a 	mov	r8,r9
 800c1a4:	3023883a 	mov	r17,r6
 800c1a8:	0401ffc4 	movi	r16,2047
 800c1ac:	003e0706 	br	800b9cc <__alt_data_end+0xfc00b9cc>
 800c1b0:	4811883a 	mov	r8,r9
 800c1b4:	3023883a 	mov	r17,r6
 800c1b8:	003e0406 	br	800b9cc <__alt_data_end+0xfc00b9cc>
 800c1bc:	21fff804 	addi	r7,r4,-32
 800c1c0:	01400804 	movi	r5,32
 800c1c4:	41ced83a 	srl	r7,r8,r7
 800c1c8:	21400a26 	beq	r4,r5,800c1f4 <__adddf3+0x8a4>
 800c1cc:	01401004 	movi	r5,64
 800c1d0:	2909c83a 	sub	r4,r5,r4
 800c1d4:	4108983a 	sll	r4,r8,r4
 800c1d8:	2448b03a 	or	r4,r4,r17
 800c1dc:	2008c03a 	cmpne	r4,r4,zero
 800c1e0:	3922b03a 	or	r17,r7,r4
 800c1e4:	0009883a 	mov	r4,zero
 800c1e8:	003f8d06 	br	800c020 <__alt_data_end+0xfc00c020>
 800c1ec:	0007883a 	mov	r3,zero
 800c1f0:	003fdd06 	br	800c168 <__alt_data_end+0xfc00c168>
 800c1f4:	0009883a 	mov	r4,zero
 800c1f8:	003ff706 	br	800c1d8 <__alt_data_end+0xfc00c1d8>

0800c1fc <__divdf3>:
 800c1fc:	defff004 	addi	sp,sp,-64
 800c200:	dc800815 	stw	r18,32(sp)
 800c204:	2824d53a 	srli	r18,r5,20
 800c208:	dd800c15 	stw	r22,48(sp)
 800c20c:	282cd7fa 	srli	r22,r5,31
 800c210:	dc000615 	stw	r16,24(sp)
 800c214:	04000434 	movhi	r16,16
 800c218:	843fffc4 	addi	r16,r16,-1
 800c21c:	dfc00f15 	stw	ra,60(sp)
 800c220:	df000e15 	stw	fp,56(sp)
 800c224:	ddc00d15 	stw	r23,52(sp)
 800c228:	dd400b15 	stw	r21,44(sp)
 800c22c:	dd000a15 	stw	r20,40(sp)
 800c230:	dcc00915 	stw	r19,36(sp)
 800c234:	dc400715 	stw	r17,28(sp)
 800c238:	9481ffcc 	andi	r18,r18,2047
 800c23c:	2c20703a 	and	r16,r5,r16
 800c240:	b2003fcc 	andi	r8,r22,255
 800c244:	90006126 	beq	r18,zero,800c3cc <__divdf3+0x1d0>
 800c248:	0081ffc4 	movi	r2,2047
 800c24c:	202b883a 	mov	r21,r4
 800c250:	90803726 	beq	r18,r2,800c330 <__divdf3+0x134>
 800c254:	80800434 	orhi	r2,r16,16
 800c258:	100490fa 	slli	r2,r2,3
 800c25c:	2020d77a 	srli	r16,r4,29
 800c260:	202a90fa 	slli	r21,r4,3
 800c264:	94bf0044 	addi	r18,r18,-1023
 800c268:	80a0b03a 	or	r16,r16,r2
 800c26c:	0013883a 	mov	r9,zero
 800c270:	000b883a 	mov	r5,zero
 800c274:	3806d53a 	srli	r3,r7,20
 800c278:	382ed7fa 	srli	r23,r7,31
 800c27c:	04400434 	movhi	r17,16
 800c280:	8c7fffc4 	addi	r17,r17,-1
 800c284:	18c1ffcc 	andi	r3,r3,2047
 800c288:	3029883a 	mov	r20,r6
 800c28c:	3c62703a 	and	r17,r7,r17
 800c290:	bf003fcc 	andi	fp,r23,255
 800c294:	18006e26 	beq	r3,zero,800c450 <__divdf3+0x254>
 800c298:	0081ffc4 	movi	r2,2047
 800c29c:	18806626 	beq	r3,r2,800c438 <__divdf3+0x23c>
 800c2a0:	88800434 	orhi	r2,r17,16
 800c2a4:	100490fa 	slli	r2,r2,3
 800c2a8:	3022d77a 	srli	r17,r6,29
 800c2ac:	302890fa 	slli	r20,r6,3
 800c2b0:	18ff0044 	addi	r3,r3,-1023
 800c2b4:	88a2b03a 	or	r17,r17,r2
 800c2b8:	000f883a 	mov	r7,zero
 800c2bc:	b5e6f03a 	xor	r19,r22,r23
 800c2c0:	3a4cb03a 	or	r6,r7,r9
 800c2c4:	008003c4 	movi	r2,15
 800c2c8:	9809883a 	mov	r4,r19
 800c2cc:	90c7c83a 	sub	r3,r18,r3
 800c2d0:	9cc03fcc 	andi	r19,r19,255
 800c2d4:	11809636 	bltu	r2,r6,800c530 <__divdf3+0x334>
 800c2d8:	300c90ba 	slli	r6,r6,2
 800c2dc:	00820074 	movhi	r2,2049
 800c2e0:	10b0bc04 	addi	r2,r2,-15632
 800c2e4:	308d883a 	add	r6,r6,r2
 800c2e8:	30800017 	ldw	r2,0(r6)
 800c2ec:	1000683a 	jmp	r2
 800c2f0:	0800c530 	cmpltui	zero,at,788
 800c2f4:	0800c368 	cmpgeui	zero,at,781
 800c2f8:	0800c520 	cmpeqi	zero,at,788
 800c2fc:	0800c35c 	xori	zero,at,781
 800c300:	0800c520 	cmpeqi	zero,at,788
 800c304:	0800c4f4 	orhi	zero,at,787
 800c308:	0800c520 	cmpeqi	zero,at,788
 800c30c:	0800c35c 	xori	zero,at,781
 800c310:	0800c368 	cmpgeui	zero,at,781
 800c314:	0800c368 	cmpgeui	zero,at,781
 800c318:	0800c4f4 	orhi	zero,at,787
 800c31c:	0800c35c 	xori	zero,at,781
 800c320:	0800c34c 	andi	zero,at,781
 800c324:	0800c34c 	andi	zero,at,781
 800c328:	0800c34c 	andi	zero,at,781
 800c32c:	0800c8b8 	rdprs	zero,at,802
 800c330:	2404b03a 	or	r2,r4,r16
 800c334:	10006c1e 	bne	r2,zero,800c4e8 <__divdf3+0x2ec>
 800c338:	02400204 	movi	r9,8
 800c33c:	0021883a 	mov	r16,zero
 800c340:	002b883a 	mov	r21,zero
 800c344:	01400084 	movi	r5,2
 800c348:	003fca06 	br	800c274 <__alt_data_end+0xfc00c274>
 800c34c:	8023883a 	mov	r17,r16
 800c350:	a829883a 	mov	r20,r21
 800c354:	4039883a 	mov	fp,r8
 800c358:	280f883a 	mov	r7,r5
 800c35c:	00800084 	movi	r2,2
 800c360:	3881601e 	bne	r7,r2,800c8e4 <__divdf3+0x6e8>
 800c364:	e027883a 	mov	r19,fp
 800c368:	9900004c 	andi	r4,r19,1
 800c36c:	0081ffc4 	movi	r2,2047
 800c370:	0021883a 	mov	r16,zero
 800c374:	002b883a 	mov	r21,zero
 800c378:	1004953a 	slli	r2,r2,20
 800c37c:	20c03fcc 	andi	r3,r4,255
 800c380:	01400434 	movhi	r5,16
 800c384:	297fffc4 	addi	r5,r5,-1
 800c388:	180697fa 	slli	r3,r3,31
 800c38c:	8160703a 	and	r16,r16,r5
 800c390:	80a0b03a 	or	r16,r16,r2
 800c394:	80c6b03a 	or	r3,r16,r3
 800c398:	a805883a 	mov	r2,r21
 800c39c:	dfc00f17 	ldw	ra,60(sp)
 800c3a0:	df000e17 	ldw	fp,56(sp)
 800c3a4:	ddc00d17 	ldw	r23,52(sp)
 800c3a8:	dd800c17 	ldw	r22,48(sp)
 800c3ac:	dd400b17 	ldw	r21,44(sp)
 800c3b0:	dd000a17 	ldw	r20,40(sp)
 800c3b4:	dcc00917 	ldw	r19,36(sp)
 800c3b8:	dc800817 	ldw	r18,32(sp)
 800c3bc:	dc400717 	ldw	r17,28(sp)
 800c3c0:	dc000617 	ldw	r16,24(sp)
 800c3c4:	dec01004 	addi	sp,sp,64
 800c3c8:	f800283a 	ret
 800c3cc:	2404b03a 	or	r2,r4,r16
 800c3d0:	2023883a 	mov	r17,r4
 800c3d4:	10003f26 	beq	r2,zero,800c4d4 <__divdf3+0x2d8>
 800c3d8:	80015e26 	beq	r16,zero,800c954 <__divdf3+0x758>
 800c3dc:	8009883a 	mov	r4,r16
 800c3e0:	d9800215 	stw	r6,8(sp)
 800c3e4:	d9c00515 	stw	r7,20(sp)
 800c3e8:	da000415 	stw	r8,16(sp)
 800c3ec:	80012500 	call	8001250 <__clzsi2>
 800c3f0:	d9800217 	ldw	r6,8(sp)
 800c3f4:	d9c00517 	ldw	r7,20(sp)
 800c3f8:	da000417 	ldw	r8,16(sp)
 800c3fc:	113ffd44 	addi	r4,r2,-11
 800c400:	00c00704 	movi	r3,28
 800c404:	19014f16 	blt	r3,r4,800c944 <__divdf3+0x748>
 800c408:	00c00744 	movi	r3,29
 800c40c:	157ffe04 	addi	r21,r2,-8
 800c410:	1907c83a 	sub	r3,r3,r4
 800c414:	8560983a 	sll	r16,r16,r21
 800c418:	88c6d83a 	srl	r3,r17,r3
 800c41c:	8d6a983a 	sll	r21,r17,r21
 800c420:	1c20b03a 	or	r16,r3,r16
 800c424:	1080fcc4 	addi	r2,r2,1011
 800c428:	00a5c83a 	sub	r18,zero,r2
 800c42c:	0013883a 	mov	r9,zero
 800c430:	000b883a 	mov	r5,zero
 800c434:	003f8f06 	br	800c274 <__alt_data_end+0xfc00c274>
 800c438:	3444b03a 	or	r2,r6,r17
 800c43c:	1000231e 	bne	r2,zero,800c4cc <__divdf3+0x2d0>
 800c440:	0023883a 	mov	r17,zero
 800c444:	0029883a 	mov	r20,zero
 800c448:	01c00084 	movi	r7,2
 800c44c:	003f9b06 	br	800c2bc <__alt_data_end+0xfc00c2bc>
 800c450:	3444b03a 	or	r2,r6,r17
 800c454:	10001926 	beq	r2,zero,800c4bc <__divdf3+0x2c0>
 800c458:	88014b26 	beq	r17,zero,800c988 <__divdf3+0x78c>
 800c45c:	8809883a 	mov	r4,r17
 800c460:	d9400115 	stw	r5,4(sp)
 800c464:	d9800215 	stw	r6,8(sp)
 800c468:	da000415 	stw	r8,16(sp)
 800c46c:	da400315 	stw	r9,12(sp)
 800c470:	80012500 	call	8001250 <__clzsi2>
 800c474:	d9400117 	ldw	r5,4(sp)
 800c478:	d9800217 	ldw	r6,8(sp)
 800c47c:	da000417 	ldw	r8,16(sp)
 800c480:	da400317 	ldw	r9,12(sp)
 800c484:	113ffd44 	addi	r4,r2,-11
 800c488:	00c00704 	movi	r3,28
 800c48c:	19013a16 	blt	r3,r4,800c978 <__divdf3+0x77c>
 800c490:	00c00744 	movi	r3,29
 800c494:	153ffe04 	addi	r20,r2,-8
 800c498:	1907c83a 	sub	r3,r3,r4
 800c49c:	8d22983a 	sll	r17,r17,r20
 800c4a0:	30c6d83a 	srl	r3,r6,r3
 800c4a4:	3528983a 	sll	r20,r6,r20
 800c4a8:	1c62b03a 	or	r17,r3,r17
 800c4ac:	1080fcc4 	addi	r2,r2,1011
 800c4b0:	0087c83a 	sub	r3,zero,r2
 800c4b4:	000f883a 	mov	r7,zero
 800c4b8:	003f8006 	br	800c2bc <__alt_data_end+0xfc00c2bc>
 800c4bc:	0023883a 	mov	r17,zero
 800c4c0:	0029883a 	mov	r20,zero
 800c4c4:	01c00044 	movi	r7,1
 800c4c8:	003f7c06 	br	800c2bc <__alt_data_end+0xfc00c2bc>
 800c4cc:	01c000c4 	movi	r7,3
 800c4d0:	003f7a06 	br	800c2bc <__alt_data_end+0xfc00c2bc>
 800c4d4:	02400104 	movi	r9,4
 800c4d8:	0021883a 	mov	r16,zero
 800c4dc:	002b883a 	mov	r21,zero
 800c4e0:	01400044 	movi	r5,1
 800c4e4:	003f6306 	br	800c274 <__alt_data_end+0xfc00c274>
 800c4e8:	02400304 	movi	r9,12
 800c4ec:	014000c4 	movi	r5,3
 800c4f0:	003f6006 	br	800c274 <__alt_data_end+0xfc00c274>
 800c4f4:	04000434 	movhi	r16,16
 800c4f8:	0009883a 	mov	r4,zero
 800c4fc:	843fffc4 	addi	r16,r16,-1
 800c500:	057fffc4 	movi	r21,-1
 800c504:	0081ffc4 	movi	r2,2047
 800c508:	003f9b06 	br	800c378 <__alt_data_end+0xfc00c378>
 800c50c:	00c00044 	movi	r3,1
 800c510:	1887c83a 	sub	r3,r3,r2
 800c514:	01000e04 	movi	r4,56
 800c518:	20c1530e 	bge	r4,r3,800ca68 <__divdf3+0x86c>
 800c51c:	9900004c 	andi	r4,r19,1
 800c520:	0005883a 	mov	r2,zero
 800c524:	0021883a 	mov	r16,zero
 800c528:	002b883a 	mov	r21,zero
 800c52c:	003f9206 	br	800c378 <__alt_data_end+0xfc00c378>
 800c530:	8c012e36 	bltu	r17,r16,800c9ec <__divdf3+0x7f0>
 800c534:	84412c26 	beq	r16,r17,800c9e8 <__divdf3+0x7ec>
 800c538:	a82f883a 	mov	r23,r21
 800c53c:	18ffffc4 	addi	r3,r3,-1
 800c540:	002b883a 	mov	r21,zero
 800c544:	a004d63a 	srli	r2,r20,24
 800c548:	8822923a 	slli	r17,r17,8
 800c54c:	a028923a 	slli	r20,r20,8
 800c550:	8009883a 	mov	r4,r16
 800c554:	88acb03a 	or	r22,r17,r2
 800c558:	dd000015 	stw	r20,0(sp)
 800c55c:	b028d43a 	srli	r20,r22,16
 800c560:	d8c00215 	stw	r3,8(sp)
 800c564:	b4bfffcc 	andi	r18,r22,65535
 800c568:	a00b883a 	mov	r5,r20
 800c56c:	800b8940 	call	800b894 <__udivsi3>
 800c570:	100b883a 	mov	r5,r2
 800c574:	9009883a 	mov	r4,r18
 800c578:	1023883a 	mov	r17,r2
 800c57c:	80012b40 	call	80012b4 <__mulsi3>
 800c580:	8009883a 	mov	r4,r16
 800c584:	a00b883a 	mov	r5,r20
 800c588:	1039883a 	mov	fp,r2
 800c58c:	800b8f80 	call	800b8f8 <__umodsi3>
 800c590:	1004943a 	slli	r2,r2,16
 800c594:	b808d43a 	srli	r4,r23,16
 800c598:	d8c00217 	ldw	r3,8(sp)
 800c59c:	2084b03a 	or	r2,r4,r2
 800c5a0:	1700062e 	bgeu	r2,fp,800c5bc <__divdf3+0x3c0>
 800c5a4:	1585883a 	add	r2,r2,r22
 800c5a8:	893fffc4 	addi	r4,r17,-1
 800c5ac:	15811d36 	bltu	r2,r22,800ca24 <__divdf3+0x828>
 800c5b0:	17011c2e 	bgeu	r2,fp,800ca24 <__divdf3+0x828>
 800c5b4:	8c7fff84 	addi	r17,r17,-2
 800c5b8:	1585883a 	add	r2,r2,r22
 800c5bc:	1739c83a 	sub	fp,r2,fp
 800c5c0:	a00b883a 	mov	r5,r20
 800c5c4:	e009883a 	mov	r4,fp
 800c5c8:	d8c00215 	stw	r3,8(sp)
 800c5cc:	800b8940 	call	800b894 <__udivsi3>
 800c5d0:	100b883a 	mov	r5,r2
 800c5d4:	9009883a 	mov	r4,r18
 800c5d8:	1021883a 	mov	r16,r2
 800c5dc:	80012b40 	call	80012b4 <__mulsi3>
 800c5e0:	a00b883a 	mov	r5,r20
 800c5e4:	e009883a 	mov	r4,fp
 800c5e8:	d8800415 	stw	r2,16(sp)
 800c5ec:	800b8f80 	call	800b8f8 <__umodsi3>
 800c5f0:	1004943a 	slli	r2,r2,16
 800c5f4:	da000417 	ldw	r8,16(sp)
 800c5f8:	bdffffcc 	andi	r23,r23,65535
 800c5fc:	b884b03a 	or	r2,r23,r2
 800c600:	d8c00217 	ldw	r3,8(sp)
 800c604:	1200062e 	bgeu	r2,r8,800c620 <__divdf3+0x424>
 800c608:	1585883a 	add	r2,r2,r22
 800c60c:	813fffc4 	addi	r4,r16,-1
 800c610:	15810236 	bltu	r2,r22,800ca1c <__divdf3+0x820>
 800c614:	1201012e 	bgeu	r2,r8,800ca1c <__divdf3+0x820>
 800c618:	843fff84 	addi	r16,r16,-2
 800c61c:	1585883a 	add	r2,r2,r22
 800c620:	8822943a 	slli	r17,r17,16
 800c624:	d9800017 	ldw	r6,0(sp)
 800c628:	1211c83a 	sub	r8,r2,r8
 800c62c:	8c22b03a 	or	r17,r17,r16
 800c630:	373fffcc 	andi	fp,r6,65535
 800c634:	8abfffcc 	andi	r10,r17,65535
 800c638:	8820d43a 	srli	r16,r17,16
 800c63c:	5009883a 	mov	r4,r10
 800c640:	e00b883a 	mov	r5,fp
 800c644:	302ed43a 	srli	r23,r6,16
 800c648:	d8c00215 	stw	r3,8(sp)
 800c64c:	da000415 	stw	r8,16(sp)
 800c650:	da800115 	stw	r10,4(sp)
 800c654:	80012b40 	call	80012b4 <__mulsi3>
 800c658:	800b883a 	mov	r5,r16
 800c65c:	e009883a 	mov	r4,fp
 800c660:	d8800515 	stw	r2,20(sp)
 800c664:	80012b40 	call	80012b4 <__mulsi3>
 800c668:	8009883a 	mov	r4,r16
 800c66c:	b80b883a 	mov	r5,r23
 800c670:	d8800315 	stw	r2,12(sp)
 800c674:	80012b40 	call	80012b4 <__mulsi3>
 800c678:	da800117 	ldw	r10,4(sp)
 800c67c:	b80b883a 	mov	r5,r23
 800c680:	1021883a 	mov	r16,r2
 800c684:	5009883a 	mov	r4,r10
 800c688:	80012b40 	call	80012b4 <__mulsi3>
 800c68c:	d9c00517 	ldw	r7,20(sp)
 800c690:	da400317 	ldw	r9,12(sp)
 800c694:	d8c00217 	ldw	r3,8(sp)
 800c698:	3808d43a 	srli	r4,r7,16
 800c69c:	1245883a 	add	r2,r2,r9
 800c6a0:	da000417 	ldw	r8,16(sp)
 800c6a4:	2085883a 	add	r2,r4,r2
 800c6a8:	1240022e 	bgeu	r2,r9,800c6b4 <__divdf3+0x4b8>
 800c6ac:	01000074 	movhi	r4,1
 800c6b0:	8121883a 	add	r16,r16,r4
 800c6b4:	1008d43a 	srli	r4,r2,16
 800c6b8:	1004943a 	slli	r2,r2,16
 800c6bc:	39ffffcc 	andi	r7,r7,65535
 800c6c0:	2409883a 	add	r4,r4,r16
 800c6c4:	11c5883a 	add	r2,r2,r7
 800c6c8:	4100bb36 	bltu	r8,r4,800c9b8 <__divdf3+0x7bc>
 800c6cc:	4100d726 	beq	r8,r4,800ca2c <__divdf3+0x830>
 800c6d0:	4109c83a 	sub	r4,r8,r4
 800c6d4:	a8a1c83a 	sub	r16,r21,r2
 800c6d8:	ac2b803a 	cmpltu	r21,r21,r16
 800c6dc:	256bc83a 	sub	r21,r4,r21
 800c6e0:	b540d926 	beq	r22,r21,800ca48 <__divdf3+0x84c>
 800c6e4:	a00b883a 	mov	r5,r20
 800c6e8:	a809883a 	mov	r4,r21
 800c6ec:	d8c00215 	stw	r3,8(sp)
 800c6f0:	800b8940 	call	800b894 <__udivsi3>
 800c6f4:	100b883a 	mov	r5,r2
 800c6f8:	9009883a 	mov	r4,r18
 800c6fc:	d8800515 	stw	r2,20(sp)
 800c700:	80012b40 	call	80012b4 <__mulsi3>
 800c704:	a809883a 	mov	r4,r21
 800c708:	a00b883a 	mov	r5,r20
 800c70c:	d8800415 	stw	r2,16(sp)
 800c710:	800b8f80 	call	800b8f8 <__umodsi3>
 800c714:	1004943a 	slli	r2,r2,16
 800c718:	8008d43a 	srli	r4,r16,16
 800c71c:	da000417 	ldw	r8,16(sp)
 800c720:	d8c00217 	ldw	r3,8(sp)
 800c724:	2084b03a 	or	r2,r4,r2
 800c728:	d9c00517 	ldw	r7,20(sp)
 800c72c:	1200062e 	bgeu	r2,r8,800c748 <__divdf3+0x54c>
 800c730:	1585883a 	add	r2,r2,r22
 800c734:	393fffc4 	addi	r4,r7,-1
 800c738:	1580c536 	bltu	r2,r22,800ca50 <__divdf3+0x854>
 800c73c:	1200c42e 	bgeu	r2,r8,800ca50 <__divdf3+0x854>
 800c740:	39ffff84 	addi	r7,r7,-2
 800c744:	1585883a 	add	r2,r2,r22
 800c748:	122bc83a 	sub	r21,r2,r8
 800c74c:	a00b883a 	mov	r5,r20
 800c750:	a809883a 	mov	r4,r21
 800c754:	d8c00215 	stw	r3,8(sp)
 800c758:	d9c00515 	stw	r7,20(sp)
 800c75c:	800b8940 	call	800b894 <__udivsi3>
 800c760:	9009883a 	mov	r4,r18
 800c764:	100b883a 	mov	r5,r2
 800c768:	d8800415 	stw	r2,16(sp)
 800c76c:	80012b40 	call	80012b4 <__mulsi3>
 800c770:	a809883a 	mov	r4,r21
 800c774:	a00b883a 	mov	r5,r20
 800c778:	1025883a 	mov	r18,r2
 800c77c:	800b8f80 	call	800b8f8 <__umodsi3>
 800c780:	1004943a 	slli	r2,r2,16
 800c784:	813fffcc 	andi	r4,r16,65535
 800c788:	d8c00217 	ldw	r3,8(sp)
 800c78c:	20a0b03a 	or	r16,r4,r2
 800c790:	d9c00517 	ldw	r7,20(sp)
 800c794:	da000417 	ldw	r8,16(sp)
 800c798:	8480062e 	bgeu	r16,r18,800c7b4 <__divdf3+0x5b8>
 800c79c:	85a1883a 	add	r16,r16,r22
 800c7a0:	40bfffc4 	addi	r2,r8,-1
 800c7a4:	8580ac36 	bltu	r16,r22,800ca58 <__divdf3+0x85c>
 800c7a8:	8480ab2e 	bgeu	r16,r18,800ca58 <__divdf3+0x85c>
 800c7ac:	423fff84 	addi	r8,r8,-2
 800c7b0:	85a1883a 	add	r16,r16,r22
 800c7b4:	3804943a 	slli	r2,r7,16
 800c7b8:	84a1c83a 	sub	r16,r16,r18
 800c7bc:	e009883a 	mov	r4,fp
 800c7c0:	1228b03a 	or	r20,r2,r8
 800c7c4:	a1ffffcc 	andi	r7,r20,65535
 800c7c8:	a024d43a 	srli	r18,r20,16
 800c7cc:	380b883a 	mov	r5,r7
 800c7d0:	d8c00215 	stw	r3,8(sp)
 800c7d4:	d9c00515 	stw	r7,20(sp)
 800c7d8:	80012b40 	call	80012b4 <__mulsi3>
 800c7dc:	900b883a 	mov	r5,r18
 800c7e0:	e009883a 	mov	r4,fp
 800c7e4:	102b883a 	mov	r21,r2
 800c7e8:	80012b40 	call	80012b4 <__mulsi3>
 800c7ec:	900b883a 	mov	r5,r18
 800c7f0:	b809883a 	mov	r4,r23
 800c7f4:	1039883a 	mov	fp,r2
 800c7f8:	80012b40 	call	80012b4 <__mulsi3>
 800c7fc:	d9c00517 	ldw	r7,20(sp)
 800c800:	b80b883a 	mov	r5,r23
 800c804:	1025883a 	mov	r18,r2
 800c808:	3809883a 	mov	r4,r7
 800c80c:	80012b40 	call	80012b4 <__mulsi3>
 800c810:	a808d43a 	srli	r4,r21,16
 800c814:	1705883a 	add	r2,r2,fp
 800c818:	d8c00217 	ldw	r3,8(sp)
 800c81c:	2085883a 	add	r2,r4,r2
 800c820:	1700022e 	bgeu	r2,fp,800c82c <__divdf3+0x630>
 800c824:	01000074 	movhi	r4,1
 800c828:	9125883a 	add	r18,r18,r4
 800c82c:	1008d43a 	srli	r4,r2,16
 800c830:	1004943a 	slli	r2,r2,16
 800c834:	ad7fffcc 	andi	r21,r21,65535
 800c838:	2489883a 	add	r4,r4,r18
 800c83c:	1545883a 	add	r2,r2,r21
 800c840:	81003836 	bltu	r16,r4,800c924 <__divdf3+0x728>
 800c844:	81003626 	beq	r16,r4,800c920 <__divdf3+0x724>
 800c848:	a5000054 	ori	r20,r20,1
 800c84c:	1880ffc4 	addi	r2,r3,1023
 800c850:	00bf2e0e 	bge	zero,r2,800c50c <__alt_data_end+0xfc00c50c>
 800c854:	a10001cc 	andi	r4,r20,7
 800c858:	20000726 	beq	r4,zero,800c878 <__divdf3+0x67c>
 800c85c:	a10003cc 	andi	r4,r20,15
 800c860:	01400104 	movi	r5,4
 800c864:	21400426 	beq	r4,r5,800c878 <__divdf3+0x67c>
 800c868:	a149883a 	add	r4,r20,r5
 800c86c:	2529803a 	cmpltu	r20,r4,r20
 800c870:	8d23883a 	add	r17,r17,r20
 800c874:	2029883a 	mov	r20,r4
 800c878:	8900402c 	andhi	r4,r17,256
 800c87c:	20000426 	beq	r4,zero,800c890 <__divdf3+0x694>
 800c880:	18810004 	addi	r2,r3,1024
 800c884:	00ffc034 	movhi	r3,65280
 800c888:	18ffffc4 	addi	r3,r3,-1
 800c88c:	88e2703a 	and	r17,r17,r3
 800c890:	00c1ff84 	movi	r3,2046
 800c894:	18beb416 	blt	r3,r2,800c368 <__alt_data_end+0xfc00c368>
 800c898:	a028d0fa 	srli	r20,r20,3
 800c89c:	882a977a 	slli	r21,r17,29
 800c8a0:	8820927a 	slli	r16,r17,9
 800c8a4:	1081ffcc 	andi	r2,r2,2047
 800c8a8:	ad2ab03a 	or	r21,r21,r20
 800c8ac:	8020d33a 	srli	r16,r16,12
 800c8b0:	9900004c 	andi	r4,r19,1
 800c8b4:	003eb006 	br	800c378 <__alt_data_end+0xfc00c378>
 800c8b8:	8080022c 	andhi	r2,r16,8
 800c8bc:	10001226 	beq	r2,zero,800c908 <__divdf3+0x70c>
 800c8c0:	8880022c 	andhi	r2,r17,8
 800c8c4:	1000101e 	bne	r2,zero,800c908 <__divdf3+0x70c>
 800c8c8:	00800434 	movhi	r2,16
 800c8cc:	8c000234 	orhi	r16,r17,8
 800c8d0:	10bfffc4 	addi	r2,r2,-1
 800c8d4:	b809883a 	mov	r4,r23
 800c8d8:	80a0703a 	and	r16,r16,r2
 800c8dc:	a02b883a 	mov	r21,r20
 800c8e0:	003f0806 	br	800c504 <__alt_data_end+0xfc00c504>
 800c8e4:	008000c4 	movi	r2,3
 800c8e8:	3880b126 	beq	r7,r2,800cbb0 <__divdf3+0x9b4>
 800c8ec:	00800044 	movi	r2,1
 800c8f0:	38805b1e 	bne	r7,r2,800ca60 <__divdf3+0x864>
 800c8f4:	e009883a 	mov	r4,fp
 800c8f8:	0005883a 	mov	r2,zero
 800c8fc:	0021883a 	mov	r16,zero
 800c900:	002b883a 	mov	r21,zero
 800c904:	003e9c06 	br	800c378 <__alt_data_end+0xfc00c378>
 800c908:	00800434 	movhi	r2,16
 800c90c:	84000234 	orhi	r16,r16,8
 800c910:	10bfffc4 	addi	r2,r2,-1
 800c914:	b009883a 	mov	r4,r22
 800c918:	80a0703a 	and	r16,r16,r2
 800c91c:	003ef906 	br	800c504 <__alt_data_end+0xfc00c504>
 800c920:	103fca26 	beq	r2,zero,800c84c <__alt_data_end+0xfc00c84c>
 800c924:	b421883a 	add	r16,r22,r16
 800c928:	a17fffc4 	addi	r5,r20,-1
 800c92c:	8580422e 	bgeu	r16,r22,800ca38 <__divdf3+0x83c>
 800c930:	2829883a 	mov	r20,r5
 800c934:	813fc41e 	bne	r16,r4,800c848 <__alt_data_end+0xfc00c848>
 800c938:	d9800017 	ldw	r6,0(sp)
 800c93c:	30bfc21e 	bne	r6,r2,800c848 <__alt_data_end+0xfc00c848>
 800c940:	003fc206 	br	800c84c <__alt_data_end+0xfc00c84c>
 800c944:	143ff604 	addi	r16,r2,-40
 800c948:	8c20983a 	sll	r16,r17,r16
 800c94c:	002b883a 	mov	r21,zero
 800c950:	003eb406 	br	800c424 <__alt_data_end+0xfc00c424>
 800c954:	d9800215 	stw	r6,8(sp)
 800c958:	d9c00515 	stw	r7,20(sp)
 800c95c:	da000415 	stw	r8,16(sp)
 800c960:	80012500 	call	8001250 <__clzsi2>
 800c964:	10800804 	addi	r2,r2,32
 800c968:	da000417 	ldw	r8,16(sp)
 800c96c:	d9c00517 	ldw	r7,20(sp)
 800c970:	d9800217 	ldw	r6,8(sp)
 800c974:	003ea106 	br	800c3fc <__alt_data_end+0xfc00c3fc>
 800c978:	147ff604 	addi	r17,r2,-40
 800c97c:	3462983a 	sll	r17,r6,r17
 800c980:	0029883a 	mov	r20,zero
 800c984:	003ec906 	br	800c4ac <__alt_data_end+0xfc00c4ac>
 800c988:	3009883a 	mov	r4,r6
 800c98c:	d9400115 	stw	r5,4(sp)
 800c990:	d9800215 	stw	r6,8(sp)
 800c994:	da000415 	stw	r8,16(sp)
 800c998:	da400315 	stw	r9,12(sp)
 800c99c:	80012500 	call	8001250 <__clzsi2>
 800c9a0:	10800804 	addi	r2,r2,32
 800c9a4:	da400317 	ldw	r9,12(sp)
 800c9a8:	da000417 	ldw	r8,16(sp)
 800c9ac:	d9800217 	ldw	r6,8(sp)
 800c9b0:	d9400117 	ldw	r5,4(sp)
 800c9b4:	003eb306 	br	800c484 <__alt_data_end+0xfc00c484>
 800c9b8:	d9800017 	ldw	r6,0(sp)
 800c9bc:	a9ab883a 	add	r21,r21,r6
 800c9c0:	a98b803a 	cmpltu	r5,r21,r6
 800c9c4:	2d8b883a 	add	r5,r5,r22
 800c9c8:	2a11883a 	add	r8,r5,r8
 800c9cc:	897fffc4 	addi	r5,r17,-1
 800c9d0:	b2000c2e 	bgeu	r22,r8,800ca04 <__divdf3+0x808>
 800c9d4:	41003f36 	bltu	r8,r4,800cad4 <__divdf3+0x8d8>
 800c9d8:	22006c26 	beq	r4,r8,800cb8c <__divdf3+0x990>
 800c9dc:	4109c83a 	sub	r4,r8,r4
 800c9e0:	2823883a 	mov	r17,r5
 800c9e4:	003f3b06 	br	800c6d4 <__alt_data_end+0xfc00c6d4>
 800c9e8:	ad3ed336 	bltu	r21,r20,800c538 <__alt_data_end+0xfc00c538>
 800c9ec:	a804d07a 	srli	r2,r21,1
 800c9f0:	802e97fa 	slli	r23,r16,31
 800c9f4:	a82a97fa 	slli	r21,r21,31
 800c9f8:	8020d07a 	srli	r16,r16,1
 800c9fc:	b8aeb03a 	or	r23,r23,r2
 800ca00:	003ed006 	br	800c544 <__alt_data_end+0xfc00c544>
 800ca04:	b23ff51e 	bne	r22,r8,800c9dc <__alt_data_end+0xfc00c9dc>
 800ca08:	d9800017 	ldw	r6,0(sp)
 800ca0c:	a9bff12e 	bgeu	r21,r6,800c9d4 <__alt_data_end+0xfc00c9d4>
 800ca10:	b109c83a 	sub	r4,r22,r4
 800ca14:	2823883a 	mov	r17,r5
 800ca18:	003f2e06 	br	800c6d4 <__alt_data_end+0xfc00c6d4>
 800ca1c:	2021883a 	mov	r16,r4
 800ca20:	003eff06 	br	800c620 <__alt_data_end+0xfc00c620>
 800ca24:	2023883a 	mov	r17,r4
 800ca28:	003ee406 	br	800c5bc <__alt_data_end+0xfc00c5bc>
 800ca2c:	a8bfe236 	bltu	r21,r2,800c9b8 <__alt_data_end+0xfc00c9b8>
 800ca30:	0009883a 	mov	r4,zero
 800ca34:	003f2706 	br	800c6d4 <__alt_data_end+0xfc00c6d4>
 800ca38:	81002d36 	bltu	r16,r4,800caf0 <__divdf3+0x8f4>
 800ca3c:	24005626 	beq	r4,r16,800cb98 <__divdf3+0x99c>
 800ca40:	2829883a 	mov	r20,r5
 800ca44:	003f8006 	br	800c848 <__alt_data_end+0xfc00c848>
 800ca48:	053fffc4 	movi	r20,-1
 800ca4c:	003f7f06 	br	800c84c <__alt_data_end+0xfc00c84c>
 800ca50:	200f883a 	mov	r7,r4
 800ca54:	003f3c06 	br	800c748 <__alt_data_end+0xfc00c748>
 800ca58:	1011883a 	mov	r8,r2
 800ca5c:	003f5506 	br	800c7b4 <__alt_data_end+0xfc00c7b4>
 800ca60:	e027883a 	mov	r19,fp
 800ca64:	003f7906 	br	800c84c <__alt_data_end+0xfc00c84c>
 800ca68:	010007c4 	movi	r4,31
 800ca6c:	20c02816 	blt	r4,r3,800cb10 <__divdf3+0x914>
 800ca70:	00800804 	movi	r2,32
 800ca74:	10c5c83a 	sub	r2,r2,r3
 800ca78:	888a983a 	sll	r5,r17,r2
 800ca7c:	a0c8d83a 	srl	r4,r20,r3
 800ca80:	a084983a 	sll	r2,r20,r2
 800ca84:	88e2d83a 	srl	r17,r17,r3
 800ca88:	2906b03a 	or	r3,r5,r4
 800ca8c:	1004c03a 	cmpne	r2,r2,zero
 800ca90:	1886b03a 	or	r3,r3,r2
 800ca94:	188001cc 	andi	r2,r3,7
 800ca98:	10000726 	beq	r2,zero,800cab8 <__divdf3+0x8bc>
 800ca9c:	188003cc 	andi	r2,r3,15
 800caa0:	01000104 	movi	r4,4
 800caa4:	11000426 	beq	r2,r4,800cab8 <__divdf3+0x8bc>
 800caa8:	1805883a 	mov	r2,r3
 800caac:	10c00104 	addi	r3,r2,4
 800cab0:	1885803a 	cmpltu	r2,r3,r2
 800cab4:	88a3883a 	add	r17,r17,r2
 800cab8:	8880202c 	andhi	r2,r17,128
 800cabc:	10002926 	beq	r2,zero,800cb64 <__divdf3+0x968>
 800cac0:	9900004c 	andi	r4,r19,1
 800cac4:	00800044 	movi	r2,1
 800cac8:	0021883a 	mov	r16,zero
 800cacc:	002b883a 	mov	r21,zero
 800cad0:	003e2906 	br	800c378 <__alt_data_end+0xfc00c378>
 800cad4:	d9800017 	ldw	r6,0(sp)
 800cad8:	8c7fff84 	addi	r17,r17,-2
 800cadc:	a9ab883a 	add	r21,r21,r6
 800cae0:	a98b803a 	cmpltu	r5,r21,r6
 800cae4:	2d8b883a 	add	r5,r5,r22
 800cae8:	2a11883a 	add	r8,r5,r8
 800caec:	003ef806 	br	800c6d0 <__alt_data_end+0xfc00c6d0>
 800caf0:	d9800017 	ldw	r6,0(sp)
 800caf4:	318f883a 	add	r7,r6,r6
 800caf8:	398b803a 	cmpltu	r5,r7,r6
 800cafc:	2d8d883a 	add	r6,r5,r22
 800cb00:	81a1883a 	add	r16,r16,r6
 800cb04:	a17fff84 	addi	r5,r20,-2
 800cb08:	d9c00015 	stw	r7,0(sp)
 800cb0c:	003f8806 	br	800c930 <__alt_data_end+0xfc00c930>
 800cb10:	013ff844 	movi	r4,-31
 800cb14:	2085c83a 	sub	r2,r4,r2
 800cb18:	8888d83a 	srl	r4,r17,r2
 800cb1c:	00800804 	movi	r2,32
 800cb20:	18802126 	beq	r3,r2,800cba8 <__divdf3+0x9ac>
 800cb24:	04001004 	movi	r16,64
 800cb28:	80c7c83a 	sub	r3,r16,r3
 800cb2c:	88e0983a 	sll	r16,r17,r3
 800cb30:	8504b03a 	or	r2,r16,r20
 800cb34:	1004c03a 	cmpne	r2,r2,zero
 800cb38:	2084b03a 	or	r2,r4,r2
 800cb3c:	144001cc 	andi	r17,r2,7
 800cb40:	88000d1e 	bne	r17,zero,800cb78 <__divdf3+0x97c>
 800cb44:	0021883a 	mov	r16,zero
 800cb48:	102ad0fa 	srli	r21,r2,3
 800cb4c:	9900004c 	andi	r4,r19,1
 800cb50:	0005883a 	mov	r2,zero
 800cb54:	ac6ab03a 	or	r21,r21,r17
 800cb58:	003e0706 	br	800c378 <__alt_data_end+0xfc00c378>
 800cb5c:	1007883a 	mov	r3,r2
 800cb60:	0023883a 	mov	r17,zero
 800cb64:	8820927a 	slli	r16,r17,9
 800cb68:	1805883a 	mov	r2,r3
 800cb6c:	8822977a 	slli	r17,r17,29
 800cb70:	8020d33a 	srli	r16,r16,12
 800cb74:	003ff406 	br	800cb48 <__alt_data_end+0xfc00cb48>
 800cb78:	10c003cc 	andi	r3,r2,15
 800cb7c:	01000104 	movi	r4,4
 800cb80:	193ff626 	beq	r3,r4,800cb5c <__alt_data_end+0xfc00cb5c>
 800cb84:	0023883a 	mov	r17,zero
 800cb88:	003fc806 	br	800caac <__alt_data_end+0xfc00caac>
 800cb8c:	a8bfd136 	bltu	r21,r2,800cad4 <__alt_data_end+0xfc00cad4>
 800cb90:	2823883a 	mov	r17,r5
 800cb94:	003fa606 	br	800ca30 <__alt_data_end+0xfc00ca30>
 800cb98:	d9800017 	ldw	r6,0(sp)
 800cb9c:	30bfd436 	bltu	r6,r2,800caf0 <__alt_data_end+0xfc00caf0>
 800cba0:	2829883a 	mov	r20,r5
 800cba4:	003f6406 	br	800c938 <__alt_data_end+0xfc00c938>
 800cba8:	0021883a 	mov	r16,zero
 800cbac:	003fe006 	br	800cb30 <__alt_data_end+0xfc00cb30>
 800cbb0:	00800434 	movhi	r2,16
 800cbb4:	8c000234 	orhi	r16,r17,8
 800cbb8:	10bfffc4 	addi	r2,r2,-1
 800cbbc:	e009883a 	mov	r4,fp
 800cbc0:	80a0703a 	and	r16,r16,r2
 800cbc4:	a02b883a 	mov	r21,r20
 800cbc8:	003e4e06 	br	800c504 <__alt_data_end+0xfc00c504>

0800cbcc <__eqdf2>:
 800cbcc:	2804d53a 	srli	r2,r5,20
 800cbd0:	3806d53a 	srli	r3,r7,20
 800cbd4:	02000434 	movhi	r8,16
 800cbd8:	423fffc4 	addi	r8,r8,-1
 800cbdc:	1081ffcc 	andi	r2,r2,2047
 800cbe0:	0281ffc4 	movi	r10,2047
 800cbe4:	2a12703a 	and	r9,r5,r8
 800cbe8:	18c1ffcc 	andi	r3,r3,2047
 800cbec:	3a10703a 	and	r8,r7,r8
 800cbf0:	280ad7fa 	srli	r5,r5,31
 800cbf4:	380ed7fa 	srli	r7,r7,31
 800cbf8:	12801026 	beq	r2,r10,800cc3c <__eqdf2+0x70>
 800cbfc:	0281ffc4 	movi	r10,2047
 800cc00:	1a800a26 	beq	r3,r10,800cc2c <__eqdf2+0x60>
 800cc04:	10c00226 	beq	r2,r3,800cc10 <__eqdf2+0x44>
 800cc08:	00800044 	movi	r2,1
 800cc0c:	f800283a 	ret
 800cc10:	4a3ffd1e 	bne	r9,r8,800cc08 <__alt_data_end+0xfc00cc08>
 800cc14:	21bffc1e 	bne	r4,r6,800cc08 <__alt_data_end+0xfc00cc08>
 800cc18:	29c00c26 	beq	r5,r7,800cc4c <__eqdf2+0x80>
 800cc1c:	103ffa1e 	bne	r2,zero,800cc08 <__alt_data_end+0xfc00cc08>
 800cc20:	2244b03a 	or	r2,r4,r9
 800cc24:	1004c03a 	cmpne	r2,r2,zero
 800cc28:	f800283a 	ret
 800cc2c:	3214b03a 	or	r10,r6,r8
 800cc30:	503ff426 	beq	r10,zero,800cc04 <__alt_data_end+0xfc00cc04>
 800cc34:	00800044 	movi	r2,1
 800cc38:	f800283a 	ret
 800cc3c:	2254b03a 	or	r10,r4,r9
 800cc40:	503fee26 	beq	r10,zero,800cbfc <__alt_data_end+0xfc00cbfc>
 800cc44:	00800044 	movi	r2,1
 800cc48:	f800283a 	ret
 800cc4c:	0005883a 	mov	r2,zero
 800cc50:	f800283a 	ret

0800cc54 <__gedf2>:
 800cc54:	2804d53a 	srli	r2,r5,20
 800cc58:	3806d53a 	srli	r3,r7,20
 800cc5c:	02000434 	movhi	r8,16
 800cc60:	423fffc4 	addi	r8,r8,-1
 800cc64:	1081ffcc 	andi	r2,r2,2047
 800cc68:	0241ffc4 	movi	r9,2047
 800cc6c:	2a14703a 	and	r10,r5,r8
 800cc70:	18c1ffcc 	andi	r3,r3,2047
 800cc74:	3a10703a 	and	r8,r7,r8
 800cc78:	280ad7fa 	srli	r5,r5,31
 800cc7c:	380ed7fa 	srli	r7,r7,31
 800cc80:	12401d26 	beq	r2,r9,800ccf8 <__gedf2+0xa4>
 800cc84:	0241ffc4 	movi	r9,2047
 800cc88:	1a401226 	beq	r3,r9,800ccd4 <__gedf2+0x80>
 800cc8c:	1000081e 	bne	r2,zero,800ccb0 <__gedf2+0x5c>
 800cc90:	2296b03a 	or	r11,r4,r10
 800cc94:	5813003a 	cmpeq	r9,r11,zero
 800cc98:	1800091e 	bne	r3,zero,800ccc0 <__gedf2+0x6c>
 800cc9c:	3218b03a 	or	r12,r6,r8
 800cca0:	6000071e 	bne	r12,zero,800ccc0 <__gedf2+0x6c>
 800cca4:	0005883a 	mov	r2,zero
 800cca8:	5800101e 	bne	r11,zero,800ccec <__gedf2+0x98>
 800ccac:	f800283a 	ret
 800ccb0:	18000c1e 	bne	r3,zero,800cce4 <__gedf2+0x90>
 800ccb4:	3212b03a 	or	r9,r6,r8
 800ccb8:	48000c26 	beq	r9,zero,800ccec <__gedf2+0x98>
 800ccbc:	0013883a 	mov	r9,zero
 800ccc0:	39c03fcc 	andi	r7,r7,255
 800ccc4:	48000826 	beq	r9,zero,800cce8 <__gedf2+0x94>
 800ccc8:	38000926 	beq	r7,zero,800ccf0 <__gedf2+0x9c>
 800cccc:	00800044 	movi	r2,1
 800ccd0:	f800283a 	ret
 800ccd4:	3212b03a 	or	r9,r6,r8
 800ccd8:	483fec26 	beq	r9,zero,800cc8c <__alt_data_end+0xfc00cc8c>
 800ccdc:	00bfff84 	movi	r2,-2
 800cce0:	f800283a 	ret
 800cce4:	39c03fcc 	andi	r7,r7,255
 800cce8:	29c00626 	beq	r5,r7,800cd04 <__gedf2+0xb0>
 800ccec:	283ff726 	beq	r5,zero,800cccc <__alt_data_end+0xfc00cccc>
 800ccf0:	00bfffc4 	movi	r2,-1
 800ccf4:	f800283a 	ret
 800ccf8:	2292b03a 	or	r9,r4,r10
 800ccfc:	483fe126 	beq	r9,zero,800cc84 <__alt_data_end+0xfc00cc84>
 800cd00:	003ff606 	br	800ccdc <__alt_data_end+0xfc00ccdc>
 800cd04:	18bff916 	blt	r3,r2,800ccec <__alt_data_end+0xfc00ccec>
 800cd08:	10c00316 	blt	r2,r3,800cd18 <__gedf2+0xc4>
 800cd0c:	42bff736 	bltu	r8,r10,800ccec <__alt_data_end+0xfc00ccec>
 800cd10:	52000326 	beq	r10,r8,800cd20 <__gedf2+0xcc>
 800cd14:	5200042e 	bgeu	r10,r8,800cd28 <__gedf2+0xd4>
 800cd18:	283fec1e 	bne	r5,zero,800cccc <__alt_data_end+0xfc00cccc>
 800cd1c:	003ff406 	br	800ccf0 <__alt_data_end+0xfc00ccf0>
 800cd20:	313ff236 	bltu	r6,r4,800ccec <__alt_data_end+0xfc00ccec>
 800cd24:	21bffc36 	bltu	r4,r6,800cd18 <__alt_data_end+0xfc00cd18>
 800cd28:	0005883a 	mov	r2,zero
 800cd2c:	f800283a 	ret

0800cd30 <__ledf2>:
 800cd30:	2804d53a 	srli	r2,r5,20
 800cd34:	3810d53a 	srli	r8,r7,20
 800cd38:	00c00434 	movhi	r3,16
 800cd3c:	18ffffc4 	addi	r3,r3,-1
 800cd40:	1081ffcc 	andi	r2,r2,2047
 800cd44:	0241ffc4 	movi	r9,2047
 800cd48:	28d4703a 	and	r10,r5,r3
 800cd4c:	4201ffcc 	andi	r8,r8,2047
 800cd50:	38c6703a 	and	r3,r7,r3
 800cd54:	280ad7fa 	srli	r5,r5,31
 800cd58:	380ed7fa 	srli	r7,r7,31
 800cd5c:	12401f26 	beq	r2,r9,800cddc <__ledf2+0xac>
 800cd60:	0241ffc4 	movi	r9,2047
 800cd64:	42401426 	beq	r8,r9,800cdb8 <__ledf2+0x88>
 800cd68:	1000091e 	bne	r2,zero,800cd90 <__ledf2+0x60>
 800cd6c:	2296b03a 	or	r11,r4,r10
 800cd70:	5813003a 	cmpeq	r9,r11,zero
 800cd74:	29403fcc 	andi	r5,r5,255
 800cd78:	40000a1e 	bne	r8,zero,800cda4 <__ledf2+0x74>
 800cd7c:	30d8b03a 	or	r12,r6,r3
 800cd80:	6000081e 	bne	r12,zero,800cda4 <__ledf2+0x74>
 800cd84:	0005883a 	mov	r2,zero
 800cd88:	5800111e 	bne	r11,zero,800cdd0 <__ledf2+0xa0>
 800cd8c:	f800283a 	ret
 800cd90:	29403fcc 	andi	r5,r5,255
 800cd94:	40000c1e 	bne	r8,zero,800cdc8 <__ledf2+0x98>
 800cd98:	30d2b03a 	or	r9,r6,r3
 800cd9c:	48000c26 	beq	r9,zero,800cdd0 <__ledf2+0xa0>
 800cda0:	0013883a 	mov	r9,zero
 800cda4:	39c03fcc 	andi	r7,r7,255
 800cda8:	48000826 	beq	r9,zero,800cdcc <__ledf2+0x9c>
 800cdac:	38001126 	beq	r7,zero,800cdf4 <__ledf2+0xc4>
 800cdb0:	00800044 	movi	r2,1
 800cdb4:	f800283a 	ret
 800cdb8:	30d2b03a 	or	r9,r6,r3
 800cdbc:	483fea26 	beq	r9,zero,800cd68 <__alt_data_end+0xfc00cd68>
 800cdc0:	00800084 	movi	r2,2
 800cdc4:	f800283a 	ret
 800cdc8:	39c03fcc 	andi	r7,r7,255
 800cdcc:	39400726 	beq	r7,r5,800cdec <__ledf2+0xbc>
 800cdd0:	2800081e 	bne	r5,zero,800cdf4 <__ledf2+0xc4>
 800cdd4:	00800044 	movi	r2,1
 800cdd8:	f800283a 	ret
 800cddc:	2292b03a 	or	r9,r4,r10
 800cde0:	483fdf26 	beq	r9,zero,800cd60 <__alt_data_end+0xfc00cd60>
 800cde4:	00800084 	movi	r2,2
 800cde8:	f800283a 	ret
 800cdec:	4080030e 	bge	r8,r2,800cdfc <__ledf2+0xcc>
 800cdf0:	383fef26 	beq	r7,zero,800cdb0 <__alt_data_end+0xfc00cdb0>
 800cdf4:	00bfffc4 	movi	r2,-1
 800cdf8:	f800283a 	ret
 800cdfc:	123feb16 	blt	r2,r8,800cdac <__alt_data_end+0xfc00cdac>
 800ce00:	1abff336 	bltu	r3,r10,800cdd0 <__alt_data_end+0xfc00cdd0>
 800ce04:	50c00326 	beq	r10,r3,800ce14 <__ledf2+0xe4>
 800ce08:	50c0042e 	bgeu	r10,r3,800ce1c <__ledf2+0xec>
 800ce0c:	283fe81e 	bne	r5,zero,800cdb0 <__alt_data_end+0xfc00cdb0>
 800ce10:	003ff806 	br	800cdf4 <__alt_data_end+0xfc00cdf4>
 800ce14:	313fee36 	bltu	r6,r4,800cdd0 <__alt_data_end+0xfc00cdd0>
 800ce18:	21bffc36 	bltu	r4,r6,800ce0c <__alt_data_end+0xfc00ce0c>
 800ce1c:	0005883a 	mov	r2,zero
 800ce20:	f800283a 	ret

0800ce24 <__muldf3>:
 800ce24:	deffee04 	addi	sp,sp,-72
 800ce28:	dd000c15 	stw	r20,48(sp)
 800ce2c:	2828d53a 	srli	r20,r5,20
 800ce30:	ddc00f15 	stw	r23,60(sp)
 800ce34:	282ed7fa 	srli	r23,r5,31
 800ce38:	dc000815 	stw	r16,32(sp)
 800ce3c:	04000434 	movhi	r16,16
 800ce40:	dcc00b15 	stw	r19,44(sp)
 800ce44:	843fffc4 	addi	r16,r16,-1
 800ce48:	dfc01115 	stw	ra,68(sp)
 800ce4c:	df001015 	stw	fp,64(sp)
 800ce50:	dd800e15 	stw	r22,56(sp)
 800ce54:	dd400d15 	stw	r21,52(sp)
 800ce58:	dc800a15 	stw	r18,40(sp)
 800ce5c:	dc400915 	stw	r17,36(sp)
 800ce60:	a501ffcc 	andi	r20,r20,2047
 800ce64:	2c20703a 	and	r16,r5,r16
 800ce68:	b827883a 	mov	r19,r23
 800ce6c:	ba403fcc 	andi	r9,r23,255
 800ce70:	a0006026 	beq	r20,zero,800cff4 <__muldf3+0x1d0>
 800ce74:	0081ffc4 	movi	r2,2047
 800ce78:	202d883a 	mov	r22,r4
 800ce7c:	a0803626 	beq	r20,r2,800cf58 <__muldf3+0x134>
 800ce80:	84000434 	orhi	r16,r16,16
 800ce84:	200ad77a 	srli	r5,r4,29
 800ce88:	800490fa 	slli	r2,r16,3
 800ce8c:	202c90fa 	slli	r22,r4,3
 800ce90:	a53f0044 	addi	r20,r20,-1023
 800ce94:	28a0b03a 	or	r16,r5,r2
 800ce98:	002b883a 	mov	r21,zero
 800ce9c:	000b883a 	mov	r5,zero
 800cea0:	3804d53a 	srli	r2,r7,20
 800cea4:	3838d7fa 	srli	fp,r7,31
 800cea8:	04400434 	movhi	r17,16
 800ceac:	8c7fffc4 	addi	r17,r17,-1
 800ceb0:	1081ffcc 	andi	r2,r2,2047
 800ceb4:	3025883a 	mov	r18,r6
 800ceb8:	3c62703a 	and	r17,r7,r17
 800cebc:	e2803fcc 	andi	r10,fp,255
 800cec0:	10006d26 	beq	r2,zero,800d078 <__muldf3+0x254>
 800cec4:	00c1ffc4 	movi	r3,2047
 800cec8:	10c06526 	beq	r2,r3,800d060 <__muldf3+0x23c>
 800cecc:	8c400434 	orhi	r17,r17,16
 800ced0:	300ed77a 	srli	r7,r6,29
 800ced4:	880690fa 	slli	r3,r17,3
 800ced8:	302490fa 	slli	r18,r6,3
 800cedc:	10bf0044 	addi	r2,r2,-1023
 800cee0:	38e2b03a 	or	r17,r7,r3
 800cee4:	000f883a 	mov	r7,zero
 800cee8:	a087883a 	add	r3,r20,r2
 800ceec:	010003c4 	movi	r4,15
 800cef0:	3d44b03a 	or	r2,r7,r21
 800cef4:	e5ccf03a 	xor	r6,fp,r23
 800cef8:	1a000044 	addi	r8,r3,1
 800cefc:	20809b36 	bltu	r4,r2,800d16c <__muldf3+0x348>
 800cf00:	100490ba 	slli	r2,r2,2
 800cf04:	01020074 	movhi	r4,2049
 800cf08:	2133c604 	addi	r4,r4,-12520
 800cf0c:	1105883a 	add	r2,r2,r4
 800cf10:	10800017 	ldw	r2,0(r2)
 800cf14:	1000683a 	jmp	r2
 800cf18:	0800d16c 	andhi	zero,at,837
 800cf1c:	0800cf78 	rdprs	zero,at,829
 800cf20:	0800cf78 	rdprs	zero,at,829
 800cf24:	0800cf74 	orhi	zero,at,829
 800cf28:	0800d148 	cmpgei	zero,at,837
 800cf2c:	0800d148 	cmpgei	zero,at,837
 800cf30:	0800d130 	cmpltui	zero,at,836
 800cf34:	0800cf74 	orhi	zero,at,829
 800cf38:	0800d148 	cmpgei	zero,at,837
 800cf3c:	0800d130 	cmpltui	zero,at,836
 800cf40:	0800d148 	cmpgei	zero,at,837
 800cf44:	0800cf74 	orhi	zero,at,829
 800cf48:	0800d158 	cmpnei	zero,at,837
 800cf4c:	0800d158 	cmpnei	zero,at,837
 800cf50:	0800d158 	cmpnei	zero,at,837
 800cf54:	0800d4b8 	rdprs	zero,at,850
 800cf58:	2404b03a 	or	r2,r4,r16
 800cf5c:	1000711e 	bne	r2,zero,800d124 <__muldf3+0x300>
 800cf60:	05400204 	movi	r21,8
 800cf64:	0021883a 	mov	r16,zero
 800cf68:	002d883a 	mov	r22,zero
 800cf6c:	01400084 	movi	r5,2
 800cf70:	003fcb06 	br	800cea0 <__alt_data_end+0xfc00cea0>
 800cf74:	500d883a 	mov	r6,r10
 800cf78:	00800084 	movi	r2,2
 800cf7c:	38805926 	beq	r7,r2,800d0e4 <__muldf3+0x2c0>
 800cf80:	008000c4 	movi	r2,3
 800cf84:	3881bb26 	beq	r7,r2,800d674 <__muldf3+0x850>
 800cf88:	00800044 	movi	r2,1
 800cf8c:	3881961e 	bne	r7,r2,800d5e8 <__muldf3+0x7c4>
 800cf90:	3027883a 	mov	r19,r6
 800cf94:	0005883a 	mov	r2,zero
 800cf98:	0021883a 	mov	r16,zero
 800cf9c:	002d883a 	mov	r22,zero
 800cfa0:	1004953a 	slli	r2,r2,20
 800cfa4:	98c03fcc 	andi	r3,r19,255
 800cfa8:	04400434 	movhi	r17,16
 800cfac:	8c7fffc4 	addi	r17,r17,-1
 800cfb0:	180697fa 	slli	r3,r3,31
 800cfb4:	8460703a 	and	r16,r16,r17
 800cfb8:	80a0b03a 	or	r16,r16,r2
 800cfbc:	80c6b03a 	or	r3,r16,r3
 800cfc0:	b005883a 	mov	r2,r22
 800cfc4:	dfc01117 	ldw	ra,68(sp)
 800cfc8:	df001017 	ldw	fp,64(sp)
 800cfcc:	ddc00f17 	ldw	r23,60(sp)
 800cfd0:	dd800e17 	ldw	r22,56(sp)
 800cfd4:	dd400d17 	ldw	r21,52(sp)
 800cfd8:	dd000c17 	ldw	r20,48(sp)
 800cfdc:	dcc00b17 	ldw	r19,44(sp)
 800cfe0:	dc800a17 	ldw	r18,40(sp)
 800cfe4:	dc400917 	ldw	r17,36(sp)
 800cfe8:	dc000817 	ldw	r16,32(sp)
 800cfec:	dec01204 	addi	sp,sp,72
 800cff0:	f800283a 	ret
 800cff4:	2404b03a 	or	r2,r4,r16
 800cff8:	202b883a 	mov	r21,r4
 800cffc:	10004426 	beq	r2,zero,800d110 <__muldf3+0x2ec>
 800d000:	80015126 	beq	r16,zero,800d548 <__muldf3+0x724>
 800d004:	8009883a 	mov	r4,r16
 800d008:	d9800715 	stw	r6,28(sp)
 800d00c:	d9c00215 	stw	r7,8(sp)
 800d010:	da400415 	stw	r9,16(sp)
 800d014:	80012500 	call	8001250 <__clzsi2>
 800d018:	d9800717 	ldw	r6,28(sp)
 800d01c:	d9c00217 	ldw	r7,8(sp)
 800d020:	da400417 	ldw	r9,16(sp)
 800d024:	113ffd44 	addi	r4,r2,-11
 800d028:	00c00704 	movi	r3,28
 800d02c:	19014216 	blt	r3,r4,800d538 <__muldf3+0x714>
 800d030:	00c00744 	movi	r3,29
 800d034:	15bffe04 	addi	r22,r2,-8
 800d038:	1907c83a 	sub	r3,r3,r4
 800d03c:	85a0983a 	sll	r16,r16,r22
 800d040:	a8c6d83a 	srl	r3,r21,r3
 800d044:	adac983a 	sll	r22,r21,r22
 800d048:	1c20b03a 	or	r16,r3,r16
 800d04c:	1080fcc4 	addi	r2,r2,1011
 800d050:	00a9c83a 	sub	r20,zero,r2
 800d054:	002b883a 	mov	r21,zero
 800d058:	000b883a 	mov	r5,zero
 800d05c:	003f9006 	br	800cea0 <__alt_data_end+0xfc00cea0>
 800d060:	3446b03a 	or	r3,r6,r17
 800d064:	1800281e 	bne	r3,zero,800d108 <__muldf3+0x2e4>
 800d068:	0023883a 	mov	r17,zero
 800d06c:	0025883a 	mov	r18,zero
 800d070:	01c00084 	movi	r7,2
 800d074:	003f9c06 	br	800cee8 <__alt_data_end+0xfc00cee8>
 800d078:	3446b03a 	or	r3,r6,r17
 800d07c:	18001e26 	beq	r3,zero,800d0f8 <__muldf3+0x2d4>
 800d080:	88012126 	beq	r17,zero,800d508 <__muldf3+0x6e4>
 800d084:	8809883a 	mov	r4,r17
 800d088:	d9400215 	stw	r5,8(sp)
 800d08c:	d9800715 	stw	r6,28(sp)
 800d090:	da400415 	stw	r9,16(sp)
 800d094:	da800315 	stw	r10,12(sp)
 800d098:	80012500 	call	8001250 <__clzsi2>
 800d09c:	d9400217 	ldw	r5,8(sp)
 800d0a0:	d9800717 	ldw	r6,28(sp)
 800d0a4:	da400417 	ldw	r9,16(sp)
 800d0a8:	da800317 	ldw	r10,12(sp)
 800d0ac:	113ffd44 	addi	r4,r2,-11
 800d0b0:	00c00704 	movi	r3,28
 800d0b4:	19011016 	blt	r3,r4,800d4f8 <__muldf3+0x6d4>
 800d0b8:	00c00744 	movi	r3,29
 800d0bc:	14bffe04 	addi	r18,r2,-8
 800d0c0:	1907c83a 	sub	r3,r3,r4
 800d0c4:	8ca2983a 	sll	r17,r17,r18
 800d0c8:	30c6d83a 	srl	r3,r6,r3
 800d0cc:	34a4983a 	sll	r18,r6,r18
 800d0d0:	1c62b03a 	or	r17,r3,r17
 800d0d4:	1080fcc4 	addi	r2,r2,1011
 800d0d8:	0085c83a 	sub	r2,zero,r2
 800d0dc:	000f883a 	mov	r7,zero
 800d0e0:	003f8106 	br	800cee8 <__alt_data_end+0xfc00cee8>
 800d0e4:	3027883a 	mov	r19,r6
 800d0e8:	0081ffc4 	movi	r2,2047
 800d0ec:	0021883a 	mov	r16,zero
 800d0f0:	002d883a 	mov	r22,zero
 800d0f4:	003faa06 	br	800cfa0 <__alt_data_end+0xfc00cfa0>
 800d0f8:	0023883a 	mov	r17,zero
 800d0fc:	0025883a 	mov	r18,zero
 800d100:	01c00044 	movi	r7,1
 800d104:	003f7806 	br	800cee8 <__alt_data_end+0xfc00cee8>
 800d108:	01c000c4 	movi	r7,3
 800d10c:	003f7606 	br	800cee8 <__alt_data_end+0xfc00cee8>
 800d110:	05400104 	movi	r21,4
 800d114:	0021883a 	mov	r16,zero
 800d118:	002d883a 	mov	r22,zero
 800d11c:	01400044 	movi	r5,1
 800d120:	003f5f06 	br	800cea0 <__alt_data_end+0xfc00cea0>
 800d124:	05400304 	movi	r21,12
 800d128:	014000c4 	movi	r5,3
 800d12c:	003f5c06 	br	800cea0 <__alt_data_end+0xfc00cea0>
 800d130:	04000434 	movhi	r16,16
 800d134:	0027883a 	mov	r19,zero
 800d138:	843fffc4 	addi	r16,r16,-1
 800d13c:	05bfffc4 	movi	r22,-1
 800d140:	0081ffc4 	movi	r2,2047
 800d144:	003f9606 	br	800cfa0 <__alt_data_end+0xfc00cfa0>
 800d148:	8023883a 	mov	r17,r16
 800d14c:	b025883a 	mov	r18,r22
 800d150:	280f883a 	mov	r7,r5
 800d154:	003f8806 	br	800cf78 <__alt_data_end+0xfc00cf78>
 800d158:	8023883a 	mov	r17,r16
 800d15c:	b025883a 	mov	r18,r22
 800d160:	480d883a 	mov	r6,r9
 800d164:	280f883a 	mov	r7,r5
 800d168:	003f8306 	br	800cf78 <__alt_data_end+0xfc00cf78>
 800d16c:	b026d43a 	srli	r19,r22,16
 800d170:	902ed43a 	srli	r23,r18,16
 800d174:	b5bfffcc 	andi	r22,r22,65535
 800d178:	94bfffcc 	andi	r18,r18,65535
 800d17c:	b00b883a 	mov	r5,r22
 800d180:	9009883a 	mov	r4,r18
 800d184:	d8c00515 	stw	r3,20(sp)
 800d188:	d9800715 	stw	r6,28(sp)
 800d18c:	da000615 	stw	r8,24(sp)
 800d190:	80012b40 	call	80012b4 <__mulsi3>
 800d194:	980b883a 	mov	r5,r19
 800d198:	9009883a 	mov	r4,r18
 800d19c:	1029883a 	mov	r20,r2
 800d1a0:	80012b40 	call	80012b4 <__mulsi3>
 800d1a4:	b80b883a 	mov	r5,r23
 800d1a8:	9809883a 	mov	r4,r19
 800d1ac:	102b883a 	mov	r21,r2
 800d1b0:	80012b40 	call	80012b4 <__mulsi3>
 800d1b4:	b809883a 	mov	r4,r23
 800d1b8:	b00b883a 	mov	r5,r22
 800d1bc:	1039883a 	mov	fp,r2
 800d1c0:	80012b40 	call	80012b4 <__mulsi3>
 800d1c4:	a008d43a 	srli	r4,r20,16
 800d1c8:	1545883a 	add	r2,r2,r21
 800d1cc:	d8c00517 	ldw	r3,20(sp)
 800d1d0:	2085883a 	add	r2,r4,r2
 800d1d4:	d9800717 	ldw	r6,28(sp)
 800d1d8:	da000617 	ldw	r8,24(sp)
 800d1dc:	1540022e 	bgeu	r2,r21,800d1e8 <__muldf3+0x3c4>
 800d1e0:	01000074 	movhi	r4,1
 800d1e4:	e139883a 	add	fp,fp,r4
 800d1e8:	100e943a 	slli	r7,r2,16
 800d1ec:	1004d43a 	srli	r2,r2,16
 800d1f0:	882ad43a 	srli	r21,r17,16
 800d1f4:	a53fffcc 	andi	r20,r20,65535
 800d1f8:	8c7fffcc 	andi	r17,r17,65535
 800d1fc:	3d29883a 	add	r20,r7,r20
 800d200:	b00b883a 	mov	r5,r22
 800d204:	8809883a 	mov	r4,r17
 800d208:	d8c00515 	stw	r3,20(sp)
 800d20c:	d9800715 	stw	r6,28(sp)
 800d210:	da000615 	stw	r8,24(sp)
 800d214:	dd000115 	stw	r20,4(sp)
 800d218:	d8800015 	stw	r2,0(sp)
 800d21c:	80012b40 	call	80012b4 <__mulsi3>
 800d220:	980b883a 	mov	r5,r19
 800d224:	8809883a 	mov	r4,r17
 800d228:	d8800215 	stw	r2,8(sp)
 800d22c:	80012b40 	call	80012b4 <__mulsi3>
 800d230:	9809883a 	mov	r4,r19
 800d234:	a80b883a 	mov	r5,r21
 800d238:	1029883a 	mov	r20,r2
 800d23c:	80012b40 	call	80012b4 <__mulsi3>
 800d240:	b00b883a 	mov	r5,r22
 800d244:	a809883a 	mov	r4,r21
 800d248:	d8800415 	stw	r2,16(sp)
 800d24c:	80012b40 	call	80012b4 <__mulsi3>
 800d250:	d9c00217 	ldw	r7,8(sp)
 800d254:	1505883a 	add	r2,r2,r20
 800d258:	d8c00517 	ldw	r3,20(sp)
 800d25c:	3826d43a 	srli	r19,r7,16
 800d260:	d9800717 	ldw	r6,28(sp)
 800d264:	da000617 	ldw	r8,24(sp)
 800d268:	9885883a 	add	r2,r19,r2
 800d26c:	da400417 	ldw	r9,16(sp)
 800d270:	1500022e 	bgeu	r2,r20,800d27c <__muldf3+0x458>
 800d274:	01000074 	movhi	r4,1
 800d278:	4913883a 	add	r9,r9,r4
 800d27c:	1028d43a 	srli	r20,r2,16
 800d280:	1004943a 	slli	r2,r2,16
 800d284:	802cd43a 	srli	r22,r16,16
 800d288:	843fffcc 	andi	r16,r16,65535
 800d28c:	3cffffcc 	andi	r19,r7,65535
 800d290:	9009883a 	mov	r4,r18
 800d294:	800b883a 	mov	r5,r16
 800d298:	a269883a 	add	r20,r20,r9
 800d29c:	d8c00515 	stw	r3,20(sp)
 800d2a0:	d9800715 	stw	r6,28(sp)
 800d2a4:	da000615 	stw	r8,24(sp)
 800d2a8:	14e7883a 	add	r19,r2,r19
 800d2ac:	80012b40 	call	80012b4 <__mulsi3>
 800d2b0:	9009883a 	mov	r4,r18
 800d2b4:	b00b883a 	mov	r5,r22
 800d2b8:	d8800315 	stw	r2,12(sp)
 800d2bc:	80012b40 	call	80012b4 <__mulsi3>
 800d2c0:	b809883a 	mov	r4,r23
 800d2c4:	b00b883a 	mov	r5,r22
 800d2c8:	d8800215 	stw	r2,8(sp)
 800d2cc:	80012b40 	call	80012b4 <__mulsi3>
 800d2d0:	b80b883a 	mov	r5,r23
 800d2d4:	8009883a 	mov	r4,r16
 800d2d8:	d8800415 	stw	r2,16(sp)
 800d2dc:	80012b40 	call	80012b4 <__mulsi3>
 800d2e0:	da800317 	ldw	r10,12(sp)
 800d2e4:	d9c00217 	ldw	r7,8(sp)
 800d2e8:	d9000017 	ldw	r4,0(sp)
 800d2ec:	502ed43a 	srli	r23,r10,16
 800d2f0:	11c5883a 	add	r2,r2,r7
 800d2f4:	24e5883a 	add	r18,r4,r19
 800d2f8:	b885883a 	add	r2,r23,r2
 800d2fc:	d8c00517 	ldw	r3,20(sp)
 800d300:	d9800717 	ldw	r6,28(sp)
 800d304:	da000617 	ldw	r8,24(sp)
 800d308:	da400417 	ldw	r9,16(sp)
 800d30c:	11c0022e 	bgeu	r2,r7,800d318 <__muldf3+0x4f4>
 800d310:	01000074 	movhi	r4,1
 800d314:	4913883a 	add	r9,r9,r4
 800d318:	100ed43a 	srli	r7,r2,16
 800d31c:	1004943a 	slli	r2,r2,16
 800d320:	55ffffcc 	andi	r23,r10,65535
 800d324:	3a53883a 	add	r9,r7,r9
 800d328:	8809883a 	mov	r4,r17
 800d32c:	800b883a 	mov	r5,r16
 800d330:	d8c00515 	stw	r3,20(sp)
 800d334:	d9800715 	stw	r6,28(sp)
 800d338:	da000615 	stw	r8,24(sp)
 800d33c:	da400415 	stw	r9,16(sp)
 800d340:	15ef883a 	add	r23,r2,r23
 800d344:	80012b40 	call	80012b4 <__mulsi3>
 800d348:	8809883a 	mov	r4,r17
 800d34c:	b00b883a 	mov	r5,r22
 800d350:	d8800215 	stw	r2,8(sp)
 800d354:	80012b40 	call	80012b4 <__mulsi3>
 800d358:	b00b883a 	mov	r5,r22
 800d35c:	a809883a 	mov	r4,r21
 800d360:	d8800315 	stw	r2,12(sp)
 800d364:	80012b40 	call	80012b4 <__mulsi3>
 800d368:	8009883a 	mov	r4,r16
 800d36c:	a80b883a 	mov	r5,r21
 800d370:	1023883a 	mov	r17,r2
 800d374:	80012b40 	call	80012b4 <__mulsi3>
 800d378:	d9c00217 	ldw	r7,8(sp)
 800d37c:	da800317 	ldw	r10,12(sp)
 800d380:	d8c00517 	ldw	r3,20(sp)
 800d384:	3808d43a 	srli	r4,r7,16
 800d388:	1285883a 	add	r2,r2,r10
 800d38c:	d9800717 	ldw	r6,28(sp)
 800d390:	2085883a 	add	r2,r4,r2
 800d394:	da000617 	ldw	r8,24(sp)
 800d398:	da400417 	ldw	r9,16(sp)
 800d39c:	1280022e 	bgeu	r2,r10,800d3a8 <__muldf3+0x584>
 800d3a0:	01000074 	movhi	r4,1
 800d3a4:	8923883a 	add	r17,r17,r4
 800d3a8:	1008943a 	slli	r4,r2,16
 800d3ac:	39ffffcc 	andi	r7,r7,65535
 800d3b0:	e4b9883a 	add	fp,fp,r18
 800d3b4:	21cf883a 	add	r7,r4,r7
 800d3b8:	e4e7803a 	cmpltu	r19,fp,r19
 800d3bc:	3d0f883a 	add	r7,r7,r20
 800d3c0:	bf39883a 	add	fp,r23,fp
 800d3c4:	99c9883a 	add	r4,r19,r7
 800d3c8:	e5ef803a 	cmpltu	r23,fp,r23
 800d3cc:	490b883a 	add	r5,r9,r4
 800d3d0:	1004d43a 	srli	r2,r2,16
 800d3d4:	b965883a 	add	r18,r23,r5
 800d3d8:	24c9803a 	cmpltu	r4,r4,r19
 800d3dc:	3d29803a 	cmpltu	r20,r7,r20
 800d3e0:	a128b03a 	or	r20,r20,r4
 800d3e4:	95ef803a 	cmpltu	r23,r18,r23
 800d3e8:	2a53803a 	cmpltu	r9,r5,r9
 800d3ec:	a0a9883a 	add	r20,r20,r2
 800d3f0:	4deeb03a 	or	r23,r9,r23
 800d3f4:	a5ef883a 	add	r23,r20,r23
 800d3f8:	bc63883a 	add	r17,r23,r17
 800d3fc:	e004927a 	slli	r2,fp,9
 800d400:	d9000117 	ldw	r4,4(sp)
 800d404:	882e927a 	slli	r23,r17,9
 800d408:	9022d5fa 	srli	r17,r18,23
 800d40c:	e038d5fa 	srli	fp,fp,23
 800d410:	1104b03a 	or	r2,r2,r4
 800d414:	9024927a 	slli	r18,r18,9
 800d418:	1004c03a 	cmpne	r2,r2,zero
 800d41c:	bc62b03a 	or	r17,r23,r17
 800d420:	1738b03a 	or	fp,r2,fp
 800d424:	8880402c 	andhi	r2,r17,256
 800d428:	e4a4b03a 	or	r18,fp,r18
 800d42c:	10000726 	beq	r2,zero,800d44c <__muldf3+0x628>
 800d430:	9006d07a 	srli	r3,r18,1
 800d434:	880497fa 	slli	r2,r17,31
 800d438:	9480004c 	andi	r18,r18,1
 800d43c:	8822d07a 	srli	r17,r17,1
 800d440:	1ca4b03a 	or	r18,r3,r18
 800d444:	14a4b03a 	or	r18,r2,r18
 800d448:	4007883a 	mov	r3,r8
 800d44c:	1880ffc4 	addi	r2,r3,1023
 800d450:	0080460e 	bge	zero,r2,800d56c <__muldf3+0x748>
 800d454:	910001cc 	andi	r4,r18,7
 800d458:	20000726 	beq	r4,zero,800d478 <__muldf3+0x654>
 800d45c:	910003cc 	andi	r4,r18,15
 800d460:	01400104 	movi	r5,4
 800d464:	21400426 	beq	r4,r5,800d478 <__muldf3+0x654>
 800d468:	9149883a 	add	r4,r18,r5
 800d46c:	24a5803a 	cmpltu	r18,r4,r18
 800d470:	8ca3883a 	add	r17,r17,r18
 800d474:	2025883a 	mov	r18,r4
 800d478:	8900402c 	andhi	r4,r17,256
 800d47c:	20000426 	beq	r4,zero,800d490 <__muldf3+0x66c>
 800d480:	18810004 	addi	r2,r3,1024
 800d484:	00ffc034 	movhi	r3,65280
 800d488:	18ffffc4 	addi	r3,r3,-1
 800d48c:	88e2703a 	and	r17,r17,r3
 800d490:	00c1ff84 	movi	r3,2046
 800d494:	18bf1316 	blt	r3,r2,800d0e4 <__alt_data_end+0xfc00d0e4>
 800d498:	882c977a 	slli	r22,r17,29
 800d49c:	9024d0fa 	srli	r18,r18,3
 800d4a0:	8822927a 	slli	r17,r17,9
 800d4a4:	1081ffcc 	andi	r2,r2,2047
 800d4a8:	b4acb03a 	or	r22,r22,r18
 800d4ac:	8820d33a 	srli	r16,r17,12
 800d4b0:	3027883a 	mov	r19,r6
 800d4b4:	003eba06 	br	800cfa0 <__alt_data_end+0xfc00cfa0>
 800d4b8:	8080022c 	andhi	r2,r16,8
 800d4bc:	10000926 	beq	r2,zero,800d4e4 <__muldf3+0x6c0>
 800d4c0:	8880022c 	andhi	r2,r17,8
 800d4c4:	1000071e 	bne	r2,zero,800d4e4 <__muldf3+0x6c0>
 800d4c8:	00800434 	movhi	r2,16
 800d4cc:	8c000234 	orhi	r16,r17,8
 800d4d0:	10bfffc4 	addi	r2,r2,-1
 800d4d4:	e027883a 	mov	r19,fp
 800d4d8:	80a0703a 	and	r16,r16,r2
 800d4dc:	902d883a 	mov	r22,r18
 800d4e0:	003f1706 	br	800d140 <__alt_data_end+0xfc00d140>
 800d4e4:	00800434 	movhi	r2,16
 800d4e8:	84000234 	orhi	r16,r16,8
 800d4ec:	10bfffc4 	addi	r2,r2,-1
 800d4f0:	80a0703a 	and	r16,r16,r2
 800d4f4:	003f1206 	br	800d140 <__alt_data_end+0xfc00d140>
 800d4f8:	147ff604 	addi	r17,r2,-40
 800d4fc:	3462983a 	sll	r17,r6,r17
 800d500:	0025883a 	mov	r18,zero
 800d504:	003ef306 	br	800d0d4 <__alt_data_end+0xfc00d0d4>
 800d508:	3009883a 	mov	r4,r6
 800d50c:	d9400215 	stw	r5,8(sp)
 800d510:	d9800715 	stw	r6,28(sp)
 800d514:	da400415 	stw	r9,16(sp)
 800d518:	da800315 	stw	r10,12(sp)
 800d51c:	80012500 	call	8001250 <__clzsi2>
 800d520:	10800804 	addi	r2,r2,32
 800d524:	da800317 	ldw	r10,12(sp)
 800d528:	da400417 	ldw	r9,16(sp)
 800d52c:	d9800717 	ldw	r6,28(sp)
 800d530:	d9400217 	ldw	r5,8(sp)
 800d534:	003edd06 	br	800d0ac <__alt_data_end+0xfc00d0ac>
 800d538:	143ff604 	addi	r16,r2,-40
 800d53c:	ac20983a 	sll	r16,r21,r16
 800d540:	002d883a 	mov	r22,zero
 800d544:	003ec106 	br	800d04c <__alt_data_end+0xfc00d04c>
 800d548:	d9800715 	stw	r6,28(sp)
 800d54c:	d9c00215 	stw	r7,8(sp)
 800d550:	da400415 	stw	r9,16(sp)
 800d554:	80012500 	call	8001250 <__clzsi2>
 800d558:	10800804 	addi	r2,r2,32
 800d55c:	da400417 	ldw	r9,16(sp)
 800d560:	d9c00217 	ldw	r7,8(sp)
 800d564:	d9800717 	ldw	r6,28(sp)
 800d568:	003eae06 	br	800d024 <__alt_data_end+0xfc00d024>
 800d56c:	00c00044 	movi	r3,1
 800d570:	1887c83a 	sub	r3,r3,r2
 800d574:	01000e04 	movi	r4,56
 800d578:	20fe8516 	blt	r4,r3,800cf90 <__alt_data_end+0xfc00cf90>
 800d57c:	010007c4 	movi	r4,31
 800d580:	20c01b16 	blt	r4,r3,800d5f0 <__muldf3+0x7cc>
 800d584:	00800804 	movi	r2,32
 800d588:	10c5c83a 	sub	r2,r2,r3
 800d58c:	888a983a 	sll	r5,r17,r2
 800d590:	90c8d83a 	srl	r4,r18,r3
 800d594:	9084983a 	sll	r2,r18,r2
 800d598:	88e2d83a 	srl	r17,r17,r3
 800d59c:	2906b03a 	or	r3,r5,r4
 800d5a0:	1004c03a 	cmpne	r2,r2,zero
 800d5a4:	1886b03a 	or	r3,r3,r2
 800d5a8:	188001cc 	andi	r2,r3,7
 800d5ac:	10000726 	beq	r2,zero,800d5cc <__muldf3+0x7a8>
 800d5b0:	188003cc 	andi	r2,r3,15
 800d5b4:	01000104 	movi	r4,4
 800d5b8:	11000426 	beq	r2,r4,800d5cc <__muldf3+0x7a8>
 800d5bc:	1805883a 	mov	r2,r3
 800d5c0:	10c00104 	addi	r3,r2,4
 800d5c4:	1885803a 	cmpltu	r2,r3,r2
 800d5c8:	88a3883a 	add	r17,r17,r2
 800d5cc:	8880202c 	andhi	r2,r17,128
 800d5d0:	10001c26 	beq	r2,zero,800d644 <__muldf3+0x820>
 800d5d4:	3027883a 	mov	r19,r6
 800d5d8:	00800044 	movi	r2,1
 800d5dc:	0021883a 	mov	r16,zero
 800d5e0:	002d883a 	mov	r22,zero
 800d5e4:	003e6e06 	br	800cfa0 <__alt_data_end+0xfc00cfa0>
 800d5e8:	4007883a 	mov	r3,r8
 800d5ec:	003f9706 	br	800d44c <__alt_data_end+0xfc00d44c>
 800d5f0:	017ff844 	movi	r5,-31
 800d5f4:	2885c83a 	sub	r2,r5,r2
 800d5f8:	888ad83a 	srl	r5,r17,r2
 800d5fc:	00800804 	movi	r2,32
 800d600:	18801a26 	beq	r3,r2,800d66c <__muldf3+0x848>
 800d604:	01001004 	movi	r4,64
 800d608:	20c7c83a 	sub	r3,r4,r3
 800d60c:	88e2983a 	sll	r17,r17,r3
 800d610:	8ca4b03a 	or	r18,r17,r18
 800d614:	9004c03a 	cmpne	r2,r18,zero
 800d618:	2884b03a 	or	r2,r5,r2
 800d61c:	144001cc 	andi	r17,r2,7
 800d620:	88000d1e 	bne	r17,zero,800d658 <__muldf3+0x834>
 800d624:	0021883a 	mov	r16,zero
 800d628:	102cd0fa 	srli	r22,r2,3
 800d62c:	3027883a 	mov	r19,r6
 800d630:	0005883a 	mov	r2,zero
 800d634:	b46cb03a 	or	r22,r22,r17
 800d638:	003e5906 	br	800cfa0 <__alt_data_end+0xfc00cfa0>
 800d63c:	1007883a 	mov	r3,r2
 800d640:	0023883a 	mov	r17,zero
 800d644:	8820927a 	slli	r16,r17,9
 800d648:	1805883a 	mov	r2,r3
 800d64c:	8822977a 	slli	r17,r17,29
 800d650:	8020d33a 	srli	r16,r16,12
 800d654:	003ff406 	br	800d628 <__alt_data_end+0xfc00d628>
 800d658:	10c003cc 	andi	r3,r2,15
 800d65c:	01000104 	movi	r4,4
 800d660:	193ff626 	beq	r3,r4,800d63c <__alt_data_end+0xfc00d63c>
 800d664:	0023883a 	mov	r17,zero
 800d668:	003fd506 	br	800d5c0 <__alt_data_end+0xfc00d5c0>
 800d66c:	0023883a 	mov	r17,zero
 800d670:	003fe706 	br	800d610 <__alt_data_end+0xfc00d610>
 800d674:	00800434 	movhi	r2,16
 800d678:	8c000234 	orhi	r16,r17,8
 800d67c:	10bfffc4 	addi	r2,r2,-1
 800d680:	3027883a 	mov	r19,r6
 800d684:	80a0703a 	and	r16,r16,r2
 800d688:	902d883a 	mov	r22,r18
 800d68c:	003eac06 	br	800d140 <__alt_data_end+0xfc00d140>

0800d690 <__subdf3>:
 800d690:	02000434 	movhi	r8,16
 800d694:	423fffc4 	addi	r8,r8,-1
 800d698:	defffb04 	addi	sp,sp,-20
 800d69c:	2a14703a 	and	r10,r5,r8
 800d6a0:	3812d53a 	srli	r9,r7,20
 800d6a4:	3a10703a 	and	r8,r7,r8
 800d6a8:	2006d77a 	srli	r3,r4,29
 800d6ac:	3004d77a 	srli	r2,r6,29
 800d6b0:	dc000015 	stw	r16,0(sp)
 800d6b4:	501490fa 	slli	r10,r10,3
 800d6b8:	2820d53a 	srli	r16,r5,20
 800d6bc:	401090fa 	slli	r8,r8,3
 800d6c0:	dc800215 	stw	r18,8(sp)
 800d6c4:	dc400115 	stw	r17,4(sp)
 800d6c8:	dfc00415 	stw	ra,16(sp)
 800d6cc:	202290fa 	slli	r17,r4,3
 800d6d0:	dcc00315 	stw	r19,12(sp)
 800d6d4:	4a41ffcc 	andi	r9,r9,2047
 800d6d8:	0101ffc4 	movi	r4,2047
 800d6dc:	2824d7fa 	srli	r18,r5,31
 800d6e0:	8401ffcc 	andi	r16,r16,2047
 800d6e4:	50c6b03a 	or	r3,r10,r3
 800d6e8:	380ed7fa 	srli	r7,r7,31
 800d6ec:	408ab03a 	or	r5,r8,r2
 800d6f0:	300c90fa 	slli	r6,r6,3
 800d6f4:	49009626 	beq	r9,r4,800d950 <__subdf3+0x2c0>
 800d6f8:	39c0005c 	xori	r7,r7,1
 800d6fc:	8245c83a 	sub	r2,r16,r9
 800d700:	3c807426 	beq	r7,r18,800d8d4 <__subdf3+0x244>
 800d704:	0080af0e 	bge	zero,r2,800d9c4 <__subdf3+0x334>
 800d708:	48002a1e 	bne	r9,zero,800d7b4 <__subdf3+0x124>
 800d70c:	2988b03a 	or	r4,r5,r6
 800d710:	20009a1e 	bne	r4,zero,800d97c <__subdf3+0x2ec>
 800d714:	888001cc 	andi	r2,r17,7
 800d718:	10000726 	beq	r2,zero,800d738 <__subdf3+0xa8>
 800d71c:	888003cc 	andi	r2,r17,15
 800d720:	01000104 	movi	r4,4
 800d724:	11000426 	beq	r2,r4,800d738 <__subdf3+0xa8>
 800d728:	890b883a 	add	r5,r17,r4
 800d72c:	2c63803a 	cmpltu	r17,r5,r17
 800d730:	1c47883a 	add	r3,r3,r17
 800d734:	2823883a 	mov	r17,r5
 800d738:	1880202c 	andhi	r2,r3,128
 800d73c:	10005926 	beq	r2,zero,800d8a4 <__subdf3+0x214>
 800d740:	84000044 	addi	r16,r16,1
 800d744:	0081ffc4 	movi	r2,2047
 800d748:	8080be26 	beq	r16,r2,800da44 <__subdf3+0x3b4>
 800d74c:	017fe034 	movhi	r5,65408
 800d750:	297fffc4 	addi	r5,r5,-1
 800d754:	1946703a 	and	r3,r3,r5
 800d758:	1804977a 	slli	r2,r3,29
 800d75c:	1806927a 	slli	r3,r3,9
 800d760:	8822d0fa 	srli	r17,r17,3
 800d764:	8401ffcc 	andi	r16,r16,2047
 800d768:	180ad33a 	srli	r5,r3,12
 800d76c:	9100004c 	andi	r4,r18,1
 800d770:	1444b03a 	or	r2,r2,r17
 800d774:	80c1ffcc 	andi	r3,r16,2047
 800d778:	1820953a 	slli	r16,r3,20
 800d77c:	20c03fcc 	andi	r3,r4,255
 800d780:	180897fa 	slli	r4,r3,31
 800d784:	00c00434 	movhi	r3,16
 800d788:	18ffffc4 	addi	r3,r3,-1
 800d78c:	28c6703a 	and	r3,r5,r3
 800d790:	1c06b03a 	or	r3,r3,r16
 800d794:	1906b03a 	or	r3,r3,r4
 800d798:	dfc00417 	ldw	ra,16(sp)
 800d79c:	dcc00317 	ldw	r19,12(sp)
 800d7a0:	dc800217 	ldw	r18,8(sp)
 800d7a4:	dc400117 	ldw	r17,4(sp)
 800d7a8:	dc000017 	ldw	r16,0(sp)
 800d7ac:	dec00504 	addi	sp,sp,20
 800d7b0:	f800283a 	ret
 800d7b4:	0101ffc4 	movi	r4,2047
 800d7b8:	813fd626 	beq	r16,r4,800d714 <__alt_data_end+0xfc00d714>
 800d7bc:	29402034 	orhi	r5,r5,128
 800d7c0:	01000e04 	movi	r4,56
 800d7c4:	2080a316 	blt	r4,r2,800da54 <__subdf3+0x3c4>
 800d7c8:	010007c4 	movi	r4,31
 800d7cc:	2080c616 	blt	r4,r2,800dae8 <__subdf3+0x458>
 800d7d0:	01000804 	movi	r4,32
 800d7d4:	2089c83a 	sub	r4,r4,r2
 800d7d8:	2910983a 	sll	r8,r5,r4
 800d7dc:	308ed83a 	srl	r7,r6,r2
 800d7e0:	3108983a 	sll	r4,r6,r4
 800d7e4:	2884d83a 	srl	r2,r5,r2
 800d7e8:	41ccb03a 	or	r6,r8,r7
 800d7ec:	2008c03a 	cmpne	r4,r4,zero
 800d7f0:	310cb03a 	or	r6,r6,r4
 800d7f4:	898dc83a 	sub	r6,r17,r6
 800d7f8:	89a3803a 	cmpltu	r17,r17,r6
 800d7fc:	1887c83a 	sub	r3,r3,r2
 800d800:	1c47c83a 	sub	r3,r3,r17
 800d804:	3023883a 	mov	r17,r6
 800d808:	1880202c 	andhi	r2,r3,128
 800d80c:	10002326 	beq	r2,zero,800d89c <__subdf3+0x20c>
 800d810:	04c02034 	movhi	r19,128
 800d814:	9cffffc4 	addi	r19,r19,-1
 800d818:	1ce6703a 	and	r19,r3,r19
 800d81c:	98007a26 	beq	r19,zero,800da08 <__subdf3+0x378>
 800d820:	9809883a 	mov	r4,r19
 800d824:	80012500 	call	8001250 <__clzsi2>
 800d828:	113ffe04 	addi	r4,r2,-8
 800d82c:	00c007c4 	movi	r3,31
 800d830:	19007b16 	blt	r3,r4,800da20 <__subdf3+0x390>
 800d834:	00800804 	movi	r2,32
 800d838:	1105c83a 	sub	r2,r2,r4
 800d83c:	8884d83a 	srl	r2,r17,r2
 800d840:	9906983a 	sll	r3,r19,r4
 800d844:	8922983a 	sll	r17,r17,r4
 800d848:	10c4b03a 	or	r2,r2,r3
 800d84c:	24007816 	blt	r4,r16,800da30 <__subdf3+0x3a0>
 800d850:	2421c83a 	sub	r16,r4,r16
 800d854:	80c00044 	addi	r3,r16,1
 800d858:	010007c4 	movi	r4,31
 800d85c:	20c09516 	blt	r4,r3,800dab4 <__subdf3+0x424>
 800d860:	01400804 	movi	r5,32
 800d864:	28cbc83a 	sub	r5,r5,r3
 800d868:	88c8d83a 	srl	r4,r17,r3
 800d86c:	8962983a 	sll	r17,r17,r5
 800d870:	114a983a 	sll	r5,r2,r5
 800d874:	10c6d83a 	srl	r3,r2,r3
 800d878:	8804c03a 	cmpne	r2,r17,zero
 800d87c:	290ab03a 	or	r5,r5,r4
 800d880:	28a2b03a 	or	r17,r5,r2
 800d884:	0021883a 	mov	r16,zero
 800d888:	003fa206 	br	800d714 <__alt_data_end+0xfc00d714>
 800d88c:	2090b03a 	or	r8,r4,r2
 800d890:	40018e26 	beq	r8,zero,800decc <__subdf3+0x83c>
 800d894:	1007883a 	mov	r3,r2
 800d898:	2023883a 	mov	r17,r4
 800d89c:	888001cc 	andi	r2,r17,7
 800d8a0:	103f9e1e 	bne	r2,zero,800d71c <__alt_data_end+0xfc00d71c>
 800d8a4:	1804977a 	slli	r2,r3,29
 800d8a8:	8822d0fa 	srli	r17,r17,3
 800d8ac:	1810d0fa 	srli	r8,r3,3
 800d8b0:	9100004c 	andi	r4,r18,1
 800d8b4:	1444b03a 	or	r2,r2,r17
 800d8b8:	00c1ffc4 	movi	r3,2047
 800d8bc:	80c02826 	beq	r16,r3,800d960 <__subdf3+0x2d0>
 800d8c0:	01400434 	movhi	r5,16
 800d8c4:	297fffc4 	addi	r5,r5,-1
 800d8c8:	80e0703a 	and	r16,r16,r3
 800d8cc:	414a703a 	and	r5,r8,r5
 800d8d0:	003fa806 	br	800d774 <__alt_data_end+0xfc00d774>
 800d8d4:	0080630e 	bge	zero,r2,800da64 <__subdf3+0x3d4>
 800d8d8:	48003026 	beq	r9,zero,800d99c <__subdf3+0x30c>
 800d8dc:	0101ffc4 	movi	r4,2047
 800d8e0:	813f8c26 	beq	r16,r4,800d714 <__alt_data_end+0xfc00d714>
 800d8e4:	29402034 	orhi	r5,r5,128
 800d8e8:	01000e04 	movi	r4,56
 800d8ec:	2080a90e 	bge	r4,r2,800db94 <__subdf3+0x504>
 800d8f0:	298cb03a 	or	r6,r5,r6
 800d8f4:	3012c03a 	cmpne	r9,r6,zero
 800d8f8:	0005883a 	mov	r2,zero
 800d8fc:	4c53883a 	add	r9,r9,r17
 800d900:	4c63803a 	cmpltu	r17,r9,r17
 800d904:	10c7883a 	add	r3,r2,r3
 800d908:	88c7883a 	add	r3,r17,r3
 800d90c:	4823883a 	mov	r17,r9
 800d910:	1880202c 	andhi	r2,r3,128
 800d914:	1000d026 	beq	r2,zero,800dc58 <__subdf3+0x5c8>
 800d918:	84000044 	addi	r16,r16,1
 800d91c:	0081ffc4 	movi	r2,2047
 800d920:	8080fe26 	beq	r16,r2,800dd1c <__subdf3+0x68c>
 800d924:	00bfe034 	movhi	r2,65408
 800d928:	10bfffc4 	addi	r2,r2,-1
 800d92c:	1886703a 	and	r3,r3,r2
 800d930:	880ad07a 	srli	r5,r17,1
 800d934:	180497fa 	slli	r2,r3,31
 800d938:	8900004c 	andi	r4,r17,1
 800d93c:	2922b03a 	or	r17,r5,r4
 800d940:	1806d07a 	srli	r3,r3,1
 800d944:	1462b03a 	or	r17,r2,r17
 800d948:	3825883a 	mov	r18,r7
 800d94c:	003f7106 	br	800d714 <__alt_data_end+0xfc00d714>
 800d950:	2984b03a 	or	r2,r5,r6
 800d954:	103f6826 	beq	r2,zero,800d6f8 <__alt_data_end+0xfc00d6f8>
 800d958:	39c03fcc 	andi	r7,r7,255
 800d95c:	003f6706 	br	800d6fc <__alt_data_end+0xfc00d6fc>
 800d960:	4086b03a 	or	r3,r8,r2
 800d964:	18015226 	beq	r3,zero,800deb0 <__subdf3+0x820>
 800d968:	00c00434 	movhi	r3,16
 800d96c:	41400234 	orhi	r5,r8,8
 800d970:	18ffffc4 	addi	r3,r3,-1
 800d974:	28ca703a 	and	r5,r5,r3
 800d978:	003f7e06 	br	800d774 <__alt_data_end+0xfc00d774>
 800d97c:	10bfffc4 	addi	r2,r2,-1
 800d980:	1000491e 	bne	r2,zero,800daa8 <__subdf3+0x418>
 800d984:	898fc83a 	sub	r7,r17,r6
 800d988:	89e3803a 	cmpltu	r17,r17,r7
 800d98c:	1947c83a 	sub	r3,r3,r5
 800d990:	1c47c83a 	sub	r3,r3,r17
 800d994:	3823883a 	mov	r17,r7
 800d998:	003f9b06 	br	800d808 <__alt_data_end+0xfc00d808>
 800d99c:	2988b03a 	or	r4,r5,r6
 800d9a0:	203f5c26 	beq	r4,zero,800d714 <__alt_data_end+0xfc00d714>
 800d9a4:	10bfffc4 	addi	r2,r2,-1
 800d9a8:	1000931e 	bne	r2,zero,800dbf8 <__subdf3+0x568>
 800d9ac:	898d883a 	add	r6,r17,r6
 800d9b0:	3463803a 	cmpltu	r17,r6,r17
 800d9b4:	1947883a 	add	r3,r3,r5
 800d9b8:	88c7883a 	add	r3,r17,r3
 800d9bc:	3023883a 	mov	r17,r6
 800d9c0:	003fd306 	br	800d910 <__alt_data_end+0xfc00d910>
 800d9c4:	1000541e 	bne	r2,zero,800db18 <__subdf3+0x488>
 800d9c8:	80800044 	addi	r2,r16,1
 800d9cc:	1081ffcc 	andi	r2,r2,2047
 800d9d0:	01000044 	movi	r4,1
 800d9d4:	2080a20e 	bge	r4,r2,800dc60 <__subdf3+0x5d0>
 800d9d8:	8989c83a 	sub	r4,r17,r6
 800d9dc:	8905803a 	cmpltu	r2,r17,r4
 800d9e0:	1967c83a 	sub	r19,r3,r5
 800d9e4:	98a7c83a 	sub	r19,r19,r2
 800d9e8:	9880202c 	andhi	r2,r19,128
 800d9ec:	10006326 	beq	r2,zero,800db7c <__subdf3+0x4ec>
 800d9f0:	3463c83a 	sub	r17,r6,r17
 800d9f4:	28c7c83a 	sub	r3,r5,r3
 800d9f8:	344d803a 	cmpltu	r6,r6,r17
 800d9fc:	19a7c83a 	sub	r19,r3,r6
 800da00:	3825883a 	mov	r18,r7
 800da04:	983f861e 	bne	r19,zero,800d820 <__alt_data_end+0xfc00d820>
 800da08:	8809883a 	mov	r4,r17
 800da0c:	80012500 	call	8001250 <__clzsi2>
 800da10:	10800804 	addi	r2,r2,32
 800da14:	113ffe04 	addi	r4,r2,-8
 800da18:	00c007c4 	movi	r3,31
 800da1c:	193f850e 	bge	r3,r4,800d834 <__alt_data_end+0xfc00d834>
 800da20:	10bff604 	addi	r2,r2,-40
 800da24:	8884983a 	sll	r2,r17,r2
 800da28:	0023883a 	mov	r17,zero
 800da2c:	243f880e 	bge	r4,r16,800d850 <__alt_data_end+0xfc00d850>
 800da30:	00ffe034 	movhi	r3,65408
 800da34:	18ffffc4 	addi	r3,r3,-1
 800da38:	8121c83a 	sub	r16,r16,r4
 800da3c:	10c6703a 	and	r3,r2,r3
 800da40:	003f3406 	br	800d714 <__alt_data_end+0xfc00d714>
 800da44:	9100004c 	andi	r4,r18,1
 800da48:	000b883a 	mov	r5,zero
 800da4c:	0005883a 	mov	r2,zero
 800da50:	003f4806 	br	800d774 <__alt_data_end+0xfc00d774>
 800da54:	298cb03a 	or	r6,r5,r6
 800da58:	300cc03a 	cmpne	r6,r6,zero
 800da5c:	0005883a 	mov	r2,zero
 800da60:	003f6406 	br	800d7f4 <__alt_data_end+0xfc00d7f4>
 800da64:	10009a1e 	bne	r2,zero,800dcd0 <__subdf3+0x640>
 800da68:	82400044 	addi	r9,r16,1
 800da6c:	4881ffcc 	andi	r2,r9,2047
 800da70:	02800044 	movi	r10,1
 800da74:	5080670e 	bge	r10,r2,800dc14 <__subdf3+0x584>
 800da78:	0081ffc4 	movi	r2,2047
 800da7c:	4880af26 	beq	r9,r2,800dd3c <__subdf3+0x6ac>
 800da80:	898d883a 	add	r6,r17,r6
 800da84:	1945883a 	add	r2,r3,r5
 800da88:	3447803a 	cmpltu	r3,r6,r17
 800da8c:	1887883a 	add	r3,r3,r2
 800da90:	182297fa 	slli	r17,r3,31
 800da94:	300cd07a 	srli	r6,r6,1
 800da98:	1806d07a 	srli	r3,r3,1
 800da9c:	4821883a 	mov	r16,r9
 800daa0:	89a2b03a 	or	r17,r17,r6
 800daa4:	003f1b06 	br	800d714 <__alt_data_end+0xfc00d714>
 800daa8:	0101ffc4 	movi	r4,2047
 800daac:	813f441e 	bne	r16,r4,800d7c0 <__alt_data_end+0xfc00d7c0>
 800dab0:	003f1806 	br	800d714 <__alt_data_end+0xfc00d714>
 800dab4:	843ff844 	addi	r16,r16,-31
 800dab8:	01400804 	movi	r5,32
 800dabc:	1408d83a 	srl	r4,r2,r16
 800dac0:	19405026 	beq	r3,r5,800dc04 <__subdf3+0x574>
 800dac4:	01401004 	movi	r5,64
 800dac8:	28c7c83a 	sub	r3,r5,r3
 800dacc:	10c4983a 	sll	r2,r2,r3
 800dad0:	88a2b03a 	or	r17,r17,r2
 800dad4:	8822c03a 	cmpne	r17,r17,zero
 800dad8:	2462b03a 	or	r17,r4,r17
 800dadc:	0007883a 	mov	r3,zero
 800dae0:	0021883a 	mov	r16,zero
 800dae4:	003f6d06 	br	800d89c <__alt_data_end+0xfc00d89c>
 800dae8:	11fff804 	addi	r7,r2,-32
 800daec:	01000804 	movi	r4,32
 800daf0:	29ced83a 	srl	r7,r5,r7
 800daf4:	11004526 	beq	r2,r4,800dc0c <__subdf3+0x57c>
 800daf8:	01001004 	movi	r4,64
 800dafc:	2089c83a 	sub	r4,r4,r2
 800db00:	2904983a 	sll	r2,r5,r4
 800db04:	118cb03a 	or	r6,r2,r6
 800db08:	300cc03a 	cmpne	r6,r6,zero
 800db0c:	398cb03a 	or	r6,r7,r6
 800db10:	0005883a 	mov	r2,zero
 800db14:	003f3706 	br	800d7f4 <__alt_data_end+0xfc00d7f4>
 800db18:	80002a26 	beq	r16,zero,800dbc4 <__subdf3+0x534>
 800db1c:	0101ffc4 	movi	r4,2047
 800db20:	49006626 	beq	r9,r4,800dcbc <__subdf3+0x62c>
 800db24:	0085c83a 	sub	r2,zero,r2
 800db28:	18c02034 	orhi	r3,r3,128
 800db2c:	01000e04 	movi	r4,56
 800db30:	20807e16 	blt	r4,r2,800dd2c <__subdf3+0x69c>
 800db34:	010007c4 	movi	r4,31
 800db38:	2080e716 	blt	r4,r2,800ded8 <__subdf3+0x848>
 800db3c:	01000804 	movi	r4,32
 800db40:	2089c83a 	sub	r4,r4,r2
 800db44:	1914983a 	sll	r10,r3,r4
 800db48:	8890d83a 	srl	r8,r17,r2
 800db4c:	8908983a 	sll	r4,r17,r4
 800db50:	1884d83a 	srl	r2,r3,r2
 800db54:	5222b03a 	or	r17,r10,r8
 800db58:	2006c03a 	cmpne	r3,r4,zero
 800db5c:	88e2b03a 	or	r17,r17,r3
 800db60:	3463c83a 	sub	r17,r6,r17
 800db64:	2885c83a 	sub	r2,r5,r2
 800db68:	344d803a 	cmpltu	r6,r6,r17
 800db6c:	1187c83a 	sub	r3,r2,r6
 800db70:	4821883a 	mov	r16,r9
 800db74:	3825883a 	mov	r18,r7
 800db78:	003f2306 	br	800d808 <__alt_data_end+0xfc00d808>
 800db7c:	24d0b03a 	or	r8,r4,r19
 800db80:	40001b1e 	bne	r8,zero,800dbf0 <__subdf3+0x560>
 800db84:	0005883a 	mov	r2,zero
 800db88:	0009883a 	mov	r4,zero
 800db8c:	0021883a 	mov	r16,zero
 800db90:	003f4906 	br	800d8b8 <__alt_data_end+0xfc00d8b8>
 800db94:	010007c4 	movi	r4,31
 800db98:	20803a16 	blt	r4,r2,800dc84 <__subdf3+0x5f4>
 800db9c:	01000804 	movi	r4,32
 800dba0:	2089c83a 	sub	r4,r4,r2
 800dba4:	2912983a 	sll	r9,r5,r4
 800dba8:	3090d83a 	srl	r8,r6,r2
 800dbac:	3108983a 	sll	r4,r6,r4
 800dbb0:	2884d83a 	srl	r2,r5,r2
 800dbb4:	4a12b03a 	or	r9,r9,r8
 800dbb8:	2008c03a 	cmpne	r4,r4,zero
 800dbbc:	4912b03a 	or	r9,r9,r4
 800dbc0:	003f4e06 	br	800d8fc <__alt_data_end+0xfc00d8fc>
 800dbc4:	1c48b03a 	or	r4,r3,r17
 800dbc8:	20003c26 	beq	r4,zero,800dcbc <__subdf3+0x62c>
 800dbcc:	0084303a 	nor	r2,zero,r2
 800dbd0:	1000381e 	bne	r2,zero,800dcb4 <__subdf3+0x624>
 800dbd4:	3463c83a 	sub	r17,r6,r17
 800dbd8:	28c5c83a 	sub	r2,r5,r3
 800dbdc:	344d803a 	cmpltu	r6,r6,r17
 800dbe0:	1187c83a 	sub	r3,r2,r6
 800dbe4:	4821883a 	mov	r16,r9
 800dbe8:	3825883a 	mov	r18,r7
 800dbec:	003f0606 	br	800d808 <__alt_data_end+0xfc00d808>
 800dbf0:	2023883a 	mov	r17,r4
 800dbf4:	003f0906 	br	800d81c <__alt_data_end+0xfc00d81c>
 800dbf8:	0101ffc4 	movi	r4,2047
 800dbfc:	813f3a1e 	bne	r16,r4,800d8e8 <__alt_data_end+0xfc00d8e8>
 800dc00:	003ec406 	br	800d714 <__alt_data_end+0xfc00d714>
 800dc04:	0005883a 	mov	r2,zero
 800dc08:	003fb106 	br	800dad0 <__alt_data_end+0xfc00dad0>
 800dc0c:	0005883a 	mov	r2,zero
 800dc10:	003fbc06 	br	800db04 <__alt_data_end+0xfc00db04>
 800dc14:	1c44b03a 	or	r2,r3,r17
 800dc18:	80008e1e 	bne	r16,zero,800de54 <__subdf3+0x7c4>
 800dc1c:	1000c826 	beq	r2,zero,800df40 <__subdf3+0x8b0>
 800dc20:	2984b03a 	or	r2,r5,r6
 800dc24:	103ebb26 	beq	r2,zero,800d714 <__alt_data_end+0xfc00d714>
 800dc28:	8989883a 	add	r4,r17,r6
 800dc2c:	1945883a 	add	r2,r3,r5
 800dc30:	2447803a 	cmpltu	r3,r4,r17
 800dc34:	1887883a 	add	r3,r3,r2
 800dc38:	1880202c 	andhi	r2,r3,128
 800dc3c:	2023883a 	mov	r17,r4
 800dc40:	103f1626 	beq	r2,zero,800d89c <__alt_data_end+0xfc00d89c>
 800dc44:	00bfe034 	movhi	r2,65408
 800dc48:	10bfffc4 	addi	r2,r2,-1
 800dc4c:	5021883a 	mov	r16,r10
 800dc50:	1886703a 	and	r3,r3,r2
 800dc54:	003eaf06 	br	800d714 <__alt_data_end+0xfc00d714>
 800dc58:	3825883a 	mov	r18,r7
 800dc5c:	003f0f06 	br	800d89c <__alt_data_end+0xfc00d89c>
 800dc60:	1c44b03a 	or	r2,r3,r17
 800dc64:	8000251e 	bne	r16,zero,800dcfc <__subdf3+0x66c>
 800dc68:	1000661e 	bne	r2,zero,800de04 <__subdf3+0x774>
 800dc6c:	2990b03a 	or	r8,r5,r6
 800dc70:	40009626 	beq	r8,zero,800decc <__subdf3+0x83c>
 800dc74:	2807883a 	mov	r3,r5
 800dc78:	3023883a 	mov	r17,r6
 800dc7c:	3825883a 	mov	r18,r7
 800dc80:	003ea406 	br	800d714 <__alt_data_end+0xfc00d714>
 800dc84:	127ff804 	addi	r9,r2,-32
 800dc88:	01000804 	movi	r4,32
 800dc8c:	2a52d83a 	srl	r9,r5,r9
 800dc90:	11008c26 	beq	r2,r4,800dec4 <__subdf3+0x834>
 800dc94:	01001004 	movi	r4,64
 800dc98:	2085c83a 	sub	r2,r4,r2
 800dc9c:	2884983a 	sll	r2,r5,r2
 800dca0:	118cb03a 	or	r6,r2,r6
 800dca4:	300cc03a 	cmpne	r6,r6,zero
 800dca8:	4992b03a 	or	r9,r9,r6
 800dcac:	0005883a 	mov	r2,zero
 800dcb0:	003f1206 	br	800d8fc <__alt_data_end+0xfc00d8fc>
 800dcb4:	0101ffc4 	movi	r4,2047
 800dcb8:	493f9c1e 	bne	r9,r4,800db2c <__alt_data_end+0xfc00db2c>
 800dcbc:	2807883a 	mov	r3,r5
 800dcc0:	3023883a 	mov	r17,r6
 800dcc4:	4821883a 	mov	r16,r9
 800dcc8:	3825883a 	mov	r18,r7
 800dccc:	003e9106 	br	800d714 <__alt_data_end+0xfc00d714>
 800dcd0:	80001f1e 	bne	r16,zero,800dd50 <__subdf3+0x6c0>
 800dcd4:	1c48b03a 	or	r4,r3,r17
 800dcd8:	20005a26 	beq	r4,zero,800de44 <__subdf3+0x7b4>
 800dcdc:	0084303a 	nor	r2,zero,r2
 800dce0:	1000561e 	bne	r2,zero,800de3c <__subdf3+0x7ac>
 800dce4:	89a3883a 	add	r17,r17,r6
 800dce8:	1945883a 	add	r2,r3,r5
 800dcec:	898d803a 	cmpltu	r6,r17,r6
 800dcf0:	3087883a 	add	r3,r6,r2
 800dcf4:	4821883a 	mov	r16,r9
 800dcf8:	003f0506 	br	800d910 <__alt_data_end+0xfc00d910>
 800dcfc:	10002b1e 	bne	r2,zero,800ddac <__subdf3+0x71c>
 800dd00:	2984b03a 	or	r2,r5,r6
 800dd04:	10008026 	beq	r2,zero,800df08 <__subdf3+0x878>
 800dd08:	2807883a 	mov	r3,r5
 800dd0c:	3023883a 	mov	r17,r6
 800dd10:	3825883a 	mov	r18,r7
 800dd14:	0401ffc4 	movi	r16,2047
 800dd18:	003e7e06 	br	800d714 <__alt_data_end+0xfc00d714>
 800dd1c:	3809883a 	mov	r4,r7
 800dd20:	0011883a 	mov	r8,zero
 800dd24:	0005883a 	mov	r2,zero
 800dd28:	003ee306 	br	800d8b8 <__alt_data_end+0xfc00d8b8>
 800dd2c:	1c62b03a 	or	r17,r3,r17
 800dd30:	8822c03a 	cmpne	r17,r17,zero
 800dd34:	0005883a 	mov	r2,zero
 800dd38:	003f8906 	br	800db60 <__alt_data_end+0xfc00db60>
 800dd3c:	3809883a 	mov	r4,r7
 800dd40:	4821883a 	mov	r16,r9
 800dd44:	0011883a 	mov	r8,zero
 800dd48:	0005883a 	mov	r2,zero
 800dd4c:	003eda06 	br	800d8b8 <__alt_data_end+0xfc00d8b8>
 800dd50:	0101ffc4 	movi	r4,2047
 800dd54:	49003b26 	beq	r9,r4,800de44 <__subdf3+0x7b4>
 800dd58:	0085c83a 	sub	r2,zero,r2
 800dd5c:	18c02034 	orhi	r3,r3,128
 800dd60:	01000e04 	movi	r4,56
 800dd64:	20806e16 	blt	r4,r2,800df20 <__subdf3+0x890>
 800dd68:	010007c4 	movi	r4,31
 800dd6c:	20807716 	blt	r4,r2,800df4c <__subdf3+0x8bc>
 800dd70:	01000804 	movi	r4,32
 800dd74:	2089c83a 	sub	r4,r4,r2
 800dd78:	1914983a 	sll	r10,r3,r4
 800dd7c:	8890d83a 	srl	r8,r17,r2
 800dd80:	8908983a 	sll	r4,r17,r4
 800dd84:	1884d83a 	srl	r2,r3,r2
 800dd88:	5222b03a 	or	r17,r10,r8
 800dd8c:	2006c03a 	cmpne	r3,r4,zero
 800dd90:	88e2b03a 	or	r17,r17,r3
 800dd94:	89a3883a 	add	r17,r17,r6
 800dd98:	1145883a 	add	r2,r2,r5
 800dd9c:	898d803a 	cmpltu	r6,r17,r6
 800dda0:	3087883a 	add	r3,r6,r2
 800dda4:	4821883a 	mov	r16,r9
 800dda8:	003ed906 	br	800d910 <__alt_data_end+0xfc00d910>
 800ddac:	2984b03a 	or	r2,r5,r6
 800ddb0:	10004226 	beq	r2,zero,800debc <__subdf3+0x82c>
 800ddb4:	1808d0fa 	srli	r4,r3,3
 800ddb8:	8822d0fa 	srli	r17,r17,3
 800ddbc:	1806977a 	slli	r3,r3,29
 800ddc0:	2080022c 	andhi	r2,r4,8
 800ddc4:	1c62b03a 	or	r17,r3,r17
 800ddc8:	10000826 	beq	r2,zero,800ddec <__subdf3+0x75c>
 800ddcc:	2812d0fa 	srli	r9,r5,3
 800ddd0:	4880022c 	andhi	r2,r9,8
 800ddd4:	1000051e 	bne	r2,zero,800ddec <__subdf3+0x75c>
 800ddd8:	300cd0fa 	srli	r6,r6,3
 800dddc:	2804977a 	slli	r2,r5,29
 800dde0:	4809883a 	mov	r4,r9
 800dde4:	3825883a 	mov	r18,r7
 800dde8:	11a2b03a 	or	r17,r2,r6
 800ddec:	8806d77a 	srli	r3,r17,29
 800ddf0:	200890fa 	slli	r4,r4,3
 800ddf4:	882290fa 	slli	r17,r17,3
 800ddf8:	0401ffc4 	movi	r16,2047
 800ddfc:	1906b03a 	or	r3,r3,r4
 800de00:	003e4406 	br	800d714 <__alt_data_end+0xfc00d714>
 800de04:	2984b03a 	or	r2,r5,r6
 800de08:	103e4226 	beq	r2,zero,800d714 <__alt_data_end+0xfc00d714>
 800de0c:	8989c83a 	sub	r4,r17,r6
 800de10:	8911803a 	cmpltu	r8,r17,r4
 800de14:	1945c83a 	sub	r2,r3,r5
 800de18:	1205c83a 	sub	r2,r2,r8
 800de1c:	1200202c 	andhi	r8,r2,128
 800de20:	403e9a26 	beq	r8,zero,800d88c <__alt_data_end+0xfc00d88c>
 800de24:	3463c83a 	sub	r17,r6,r17
 800de28:	28c5c83a 	sub	r2,r5,r3
 800de2c:	344d803a 	cmpltu	r6,r6,r17
 800de30:	1187c83a 	sub	r3,r2,r6
 800de34:	3825883a 	mov	r18,r7
 800de38:	003e3606 	br	800d714 <__alt_data_end+0xfc00d714>
 800de3c:	0101ffc4 	movi	r4,2047
 800de40:	493fc71e 	bne	r9,r4,800dd60 <__alt_data_end+0xfc00dd60>
 800de44:	2807883a 	mov	r3,r5
 800de48:	3023883a 	mov	r17,r6
 800de4c:	4821883a 	mov	r16,r9
 800de50:	003e3006 	br	800d714 <__alt_data_end+0xfc00d714>
 800de54:	10003626 	beq	r2,zero,800df30 <__subdf3+0x8a0>
 800de58:	2984b03a 	or	r2,r5,r6
 800de5c:	10001726 	beq	r2,zero,800debc <__subdf3+0x82c>
 800de60:	1808d0fa 	srli	r4,r3,3
 800de64:	8822d0fa 	srli	r17,r17,3
 800de68:	1806977a 	slli	r3,r3,29
 800de6c:	2080022c 	andhi	r2,r4,8
 800de70:	1c62b03a 	or	r17,r3,r17
 800de74:	10000726 	beq	r2,zero,800de94 <__subdf3+0x804>
 800de78:	2812d0fa 	srli	r9,r5,3
 800de7c:	4880022c 	andhi	r2,r9,8
 800de80:	1000041e 	bne	r2,zero,800de94 <__subdf3+0x804>
 800de84:	300cd0fa 	srli	r6,r6,3
 800de88:	2804977a 	slli	r2,r5,29
 800de8c:	4809883a 	mov	r4,r9
 800de90:	11a2b03a 	or	r17,r2,r6
 800de94:	8806d77a 	srli	r3,r17,29
 800de98:	200890fa 	slli	r4,r4,3
 800de9c:	882290fa 	slli	r17,r17,3
 800dea0:	3825883a 	mov	r18,r7
 800dea4:	1906b03a 	or	r3,r3,r4
 800dea8:	0401ffc4 	movi	r16,2047
 800deac:	003e1906 	br	800d714 <__alt_data_end+0xfc00d714>
 800deb0:	000b883a 	mov	r5,zero
 800deb4:	0005883a 	mov	r2,zero
 800deb8:	003e2e06 	br	800d774 <__alt_data_end+0xfc00d774>
 800debc:	0401ffc4 	movi	r16,2047
 800dec0:	003e1406 	br	800d714 <__alt_data_end+0xfc00d714>
 800dec4:	0005883a 	mov	r2,zero
 800dec8:	003f7506 	br	800dca0 <__alt_data_end+0xfc00dca0>
 800decc:	0005883a 	mov	r2,zero
 800ded0:	0009883a 	mov	r4,zero
 800ded4:	003e7806 	br	800d8b8 <__alt_data_end+0xfc00d8b8>
 800ded8:	123ff804 	addi	r8,r2,-32
 800dedc:	01000804 	movi	r4,32
 800dee0:	1a10d83a 	srl	r8,r3,r8
 800dee4:	11002526 	beq	r2,r4,800df7c <__subdf3+0x8ec>
 800dee8:	01001004 	movi	r4,64
 800deec:	2085c83a 	sub	r2,r4,r2
 800def0:	1884983a 	sll	r2,r3,r2
 800def4:	1444b03a 	or	r2,r2,r17
 800def8:	1004c03a 	cmpne	r2,r2,zero
 800defc:	40a2b03a 	or	r17,r8,r2
 800df00:	0005883a 	mov	r2,zero
 800df04:	003f1606 	br	800db60 <__alt_data_end+0xfc00db60>
 800df08:	02000434 	movhi	r8,16
 800df0c:	0009883a 	mov	r4,zero
 800df10:	423fffc4 	addi	r8,r8,-1
 800df14:	00bfffc4 	movi	r2,-1
 800df18:	0401ffc4 	movi	r16,2047
 800df1c:	003e6606 	br	800d8b8 <__alt_data_end+0xfc00d8b8>
 800df20:	1c62b03a 	or	r17,r3,r17
 800df24:	8822c03a 	cmpne	r17,r17,zero
 800df28:	0005883a 	mov	r2,zero
 800df2c:	003f9906 	br	800dd94 <__alt_data_end+0xfc00dd94>
 800df30:	2807883a 	mov	r3,r5
 800df34:	3023883a 	mov	r17,r6
 800df38:	0401ffc4 	movi	r16,2047
 800df3c:	003df506 	br	800d714 <__alt_data_end+0xfc00d714>
 800df40:	2807883a 	mov	r3,r5
 800df44:	3023883a 	mov	r17,r6
 800df48:	003df206 	br	800d714 <__alt_data_end+0xfc00d714>
 800df4c:	123ff804 	addi	r8,r2,-32
 800df50:	01000804 	movi	r4,32
 800df54:	1a10d83a 	srl	r8,r3,r8
 800df58:	11000a26 	beq	r2,r4,800df84 <__subdf3+0x8f4>
 800df5c:	01001004 	movi	r4,64
 800df60:	2085c83a 	sub	r2,r4,r2
 800df64:	1884983a 	sll	r2,r3,r2
 800df68:	1444b03a 	or	r2,r2,r17
 800df6c:	1004c03a 	cmpne	r2,r2,zero
 800df70:	40a2b03a 	or	r17,r8,r2
 800df74:	0005883a 	mov	r2,zero
 800df78:	003f8606 	br	800dd94 <__alt_data_end+0xfc00dd94>
 800df7c:	0005883a 	mov	r2,zero
 800df80:	003fdc06 	br	800def4 <__alt_data_end+0xfc00def4>
 800df84:	0005883a 	mov	r2,zero
 800df88:	003ff706 	br	800df68 <__alt_data_end+0xfc00df68>

0800df8c <__fixdfsi>:
 800df8c:	280cd53a 	srli	r6,r5,20
 800df90:	00c00434 	movhi	r3,16
 800df94:	18ffffc4 	addi	r3,r3,-1
 800df98:	3181ffcc 	andi	r6,r6,2047
 800df9c:	01c0ff84 	movi	r7,1022
 800dfa0:	28c6703a 	and	r3,r5,r3
 800dfa4:	280ad7fa 	srli	r5,r5,31
 800dfa8:	3980120e 	bge	r7,r6,800dff4 <__fixdfsi+0x68>
 800dfac:	00810744 	movi	r2,1053
 800dfb0:	11800c16 	blt	r2,r6,800dfe4 <__fixdfsi+0x58>
 800dfb4:	00810cc4 	movi	r2,1075
 800dfb8:	1185c83a 	sub	r2,r2,r6
 800dfbc:	01c007c4 	movi	r7,31
 800dfc0:	18c00434 	orhi	r3,r3,16
 800dfc4:	38800d16 	blt	r7,r2,800dffc <__fixdfsi+0x70>
 800dfc8:	31befb44 	addi	r6,r6,-1043
 800dfcc:	2084d83a 	srl	r2,r4,r2
 800dfd0:	1986983a 	sll	r3,r3,r6
 800dfd4:	1884b03a 	or	r2,r3,r2
 800dfd8:	28000726 	beq	r5,zero,800dff8 <__fixdfsi+0x6c>
 800dfdc:	0085c83a 	sub	r2,zero,r2
 800dfe0:	f800283a 	ret
 800dfe4:	00a00034 	movhi	r2,32768
 800dfe8:	10bfffc4 	addi	r2,r2,-1
 800dfec:	2885883a 	add	r2,r5,r2
 800dff0:	f800283a 	ret
 800dff4:	0005883a 	mov	r2,zero
 800dff8:	f800283a 	ret
 800dffc:	008104c4 	movi	r2,1043
 800e000:	1185c83a 	sub	r2,r2,r6
 800e004:	1884d83a 	srl	r2,r3,r2
 800e008:	003ff306 	br	800dfd8 <__alt_data_end+0xfc00dfd8>

0800e00c <__floatsidf>:
 800e00c:	defffd04 	addi	sp,sp,-12
 800e010:	dfc00215 	stw	ra,8(sp)
 800e014:	dc400115 	stw	r17,4(sp)
 800e018:	dc000015 	stw	r16,0(sp)
 800e01c:	20002b26 	beq	r4,zero,800e0cc <__floatsidf+0xc0>
 800e020:	2023883a 	mov	r17,r4
 800e024:	2020d7fa 	srli	r16,r4,31
 800e028:	20002d16 	blt	r4,zero,800e0e0 <__floatsidf+0xd4>
 800e02c:	8809883a 	mov	r4,r17
 800e030:	80012500 	call	8001250 <__clzsi2>
 800e034:	01410784 	movi	r5,1054
 800e038:	288bc83a 	sub	r5,r5,r2
 800e03c:	01010cc4 	movi	r4,1075
 800e040:	2149c83a 	sub	r4,r4,r5
 800e044:	00c007c4 	movi	r3,31
 800e048:	1900160e 	bge	r3,r4,800e0a4 <__floatsidf+0x98>
 800e04c:	00c104c4 	movi	r3,1043
 800e050:	1947c83a 	sub	r3,r3,r5
 800e054:	88c6983a 	sll	r3,r17,r3
 800e058:	00800434 	movhi	r2,16
 800e05c:	10bfffc4 	addi	r2,r2,-1
 800e060:	1886703a 	and	r3,r3,r2
 800e064:	2941ffcc 	andi	r5,r5,2047
 800e068:	800d883a 	mov	r6,r16
 800e06c:	0005883a 	mov	r2,zero
 800e070:	280a953a 	slli	r5,r5,20
 800e074:	31803fcc 	andi	r6,r6,255
 800e078:	01000434 	movhi	r4,16
 800e07c:	300c97fa 	slli	r6,r6,31
 800e080:	213fffc4 	addi	r4,r4,-1
 800e084:	1906703a 	and	r3,r3,r4
 800e088:	1946b03a 	or	r3,r3,r5
 800e08c:	1986b03a 	or	r3,r3,r6
 800e090:	dfc00217 	ldw	ra,8(sp)
 800e094:	dc400117 	ldw	r17,4(sp)
 800e098:	dc000017 	ldw	r16,0(sp)
 800e09c:	dec00304 	addi	sp,sp,12
 800e0a0:	f800283a 	ret
 800e0a4:	00c002c4 	movi	r3,11
 800e0a8:	1887c83a 	sub	r3,r3,r2
 800e0ac:	88c6d83a 	srl	r3,r17,r3
 800e0b0:	8904983a 	sll	r2,r17,r4
 800e0b4:	01000434 	movhi	r4,16
 800e0b8:	213fffc4 	addi	r4,r4,-1
 800e0bc:	2941ffcc 	andi	r5,r5,2047
 800e0c0:	1906703a 	and	r3,r3,r4
 800e0c4:	800d883a 	mov	r6,r16
 800e0c8:	003fe906 	br	800e070 <__alt_data_end+0xfc00e070>
 800e0cc:	000d883a 	mov	r6,zero
 800e0d0:	000b883a 	mov	r5,zero
 800e0d4:	0007883a 	mov	r3,zero
 800e0d8:	0005883a 	mov	r2,zero
 800e0dc:	003fe406 	br	800e070 <__alt_data_end+0xfc00e070>
 800e0e0:	0123c83a 	sub	r17,zero,r4
 800e0e4:	003fd106 	br	800e02c <__alt_data_end+0xfc00e02c>

0800e0e8 <__floatunsidf>:
 800e0e8:	defffe04 	addi	sp,sp,-8
 800e0ec:	dc000015 	stw	r16,0(sp)
 800e0f0:	dfc00115 	stw	ra,4(sp)
 800e0f4:	2021883a 	mov	r16,r4
 800e0f8:	20002226 	beq	r4,zero,800e184 <__floatunsidf+0x9c>
 800e0fc:	80012500 	call	8001250 <__clzsi2>
 800e100:	01010784 	movi	r4,1054
 800e104:	2089c83a 	sub	r4,r4,r2
 800e108:	01810cc4 	movi	r6,1075
 800e10c:	310dc83a 	sub	r6,r6,r4
 800e110:	00c007c4 	movi	r3,31
 800e114:	1980120e 	bge	r3,r6,800e160 <__floatunsidf+0x78>
 800e118:	00c104c4 	movi	r3,1043
 800e11c:	1907c83a 	sub	r3,r3,r4
 800e120:	80ca983a 	sll	r5,r16,r3
 800e124:	00800434 	movhi	r2,16
 800e128:	10bfffc4 	addi	r2,r2,-1
 800e12c:	2101ffcc 	andi	r4,r4,2047
 800e130:	0021883a 	mov	r16,zero
 800e134:	288a703a 	and	r5,r5,r2
 800e138:	2008953a 	slli	r4,r4,20
 800e13c:	00c00434 	movhi	r3,16
 800e140:	18ffffc4 	addi	r3,r3,-1
 800e144:	28c6703a 	and	r3,r5,r3
 800e148:	8005883a 	mov	r2,r16
 800e14c:	1906b03a 	or	r3,r3,r4
 800e150:	dfc00117 	ldw	ra,4(sp)
 800e154:	dc000017 	ldw	r16,0(sp)
 800e158:	dec00204 	addi	sp,sp,8
 800e15c:	f800283a 	ret
 800e160:	00c002c4 	movi	r3,11
 800e164:	188bc83a 	sub	r5,r3,r2
 800e168:	814ad83a 	srl	r5,r16,r5
 800e16c:	00c00434 	movhi	r3,16
 800e170:	18ffffc4 	addi	r3,r3,-1
 800e174:	81a0983a 	sll	r16,r16,r6
 800e178:	2101ffcc 	andi	r4,r4,2047
 800e17c:	28ca703a 	and	r5,r5,r3
 800e180:	003fed06 	br	800e138 <__alt_data_end+0xfc00e138>
 800e184:	0009883a 	mov	r4,zero
 800e188:	000b883a 	mov	r5,zero
 800e18c:	003fea06 	br	800e138 <__alt_data_end+0xfc00e138>

0800e190 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e190:	defffe04 	addi	sp,sp,-8
 800e194:	dfc00115 	stw	ra,4(sp)
 800e198:	df000015 	stw	fp,0(sp)
 800e19c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e1a0:	d0a00b17 	ldw	r2,-32724(gp)
 800e1a4:	10000326 	beq	r2,zero,800e1b4 <alt_get_errno+0x24>
 800e1a8:	d0a00b17 	ldw	r2,-32724(gp)
 800e1ac:	103ee83a 	callr	r2
 800e1b0:	00000106 	br	800e1b8 <alt_get_errno+0x28>
 800e1b4:	d0a2c704 	addi	r2,gp,-29924
}
 800e1b8:	e037883a 	mov	sp,fp
 800e1bc:	dfc00117 	ldw	ra,4(sp)
 800e1c0:	df000017 	ldw	fp,0(sp)
 800e1c4:	dec00204 	addi	sp,sp,8
 800e1c8:	f800283a 	ret

0800e1cc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800e1cc:	defffb04 	addi	sp,sp,-20
 800e1d0:	dfc00415 	stw	ra,16(sp)
 800e1d4:	df000315 	stw	fp,12(sp)
 800e1d8:	df000304 	addi	fp,sp,12
 800e1dc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800e1e0:	e0bfff17 	ldw	r2,-4(fp)
 800e1e4:	10000816 	blt	r2,zero,800e208 <close+0x3c>
 800e1e8:	01400304 	movi	r5,12
 800e1ec:	e13fff17 	ldw	r4,-4(fp)
 800e1f0:	80012b40 	call	80012b4 <__mulsi3>
 800e1f4:	1007883a 	mov	r3,r2
 800e1f8:	00820074 	movhi	r2,2049
 800e1fc:	1088f404 	addi	r2,r2,9168
 800e200:	1885883a 	add	r2,r3,r2
 800e204:	00000106 	br	800e20c <close+0x40>
 800e208:	0005883a 	mov	r2,zero
 800e20c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800e210:	e0bffd17 	ldw	r2,-12(fp)
 800e214:	10001926 	beq	r2,zero,800e27c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800e218:	e0bffd17 	ldw	r2,-12(fp)
 800e21c:	10800017 	ldw	r2,0(r2)
 800e220:	10800417 	ldw	r2,16(r2)
 800e224:	10000626 	beq	r2,zero,800e240 <close+0x74>
 800e228:	e0bffd17 	ldw	r2,-12(fp)
 800e22c:	10800017 	ldw	r2,0(r2)
 800e230:	10800417 	ldw	r2,16(r2)
 800e234:	e13ffd17 	ldw	r4,-12(fp)
 800e238:	103ee83a 	callr	r2
 800e23c:	00000106 	br	800e244 <close+0x78>
 800e240:	0005883a 	mov	r2,zero
 800e244:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800e248:	e13fff17 	ldw	r4,-4(fp)
 800e24c:	800e8980 	call	800e898 <alt_release_fd>
    if (rval < 0)
 800e250:	e0bffe17 	ldw	r2,-8(fp)
 800e254:	1000070e 	bge	r2,zero,800e274 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 800e258:	800e1900 	call	800e190 <alt_get_errno>
 800e25c:	1007883a 	mov	r3,r2
 800e260:	e0bffe17 	ldw	r2,-8(fp)
 800e264:	0085c83a 	sub	r2,zero,r2
 800e268:	18800015 	stw	r2,0(r3)
      return -1;
 800e26c:	00bfffc4 	movi	r2,-1
 800e270:	00000706 	br	800e290 <close+0xc4>
    }
    return 0;
 800e274:	0005883a 	mov	r2,zero
 800e278:	00000506 	br	800e290 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800e27c:	800e1900 	call	800e190 <alt_get_errno>
 800e280:	1007883a 	mov	r3,r2
 800e284:	00801444 	movi	r2,81
 800e288:	18800015 	stw	r2,0(r3)
    return -1;
 800e28c:	00bfffc4 	movi	r2,-1
  }
}
 800e290:	e037883a 	mov	sp,fp
 800e294:	dfc00117 	ldw	ra,4(sp)
 800e298:	df000017 	ldw	fp,0(sp)
 800e29c:	dec00204 	addi	sp,sp,8
 800e2a0:	f800283a 	ret

0800e2a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800e2a4:	defffc04 	addi	sp,sp,-16
 800e2a8:	df000315 	stw	fp,12(sp)
 800e2ac:	df000304 	addi	fp,sp,12
 800e2b0:	e13ffd15 	stw	r4,-12(fp)
 800e2b4:	e17ffe15 	stw	r5,-8(fp)
 800e2b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800e2bc:	e0bfff17 	ldw	r2,-4(fp)
}
 800e2c0:	e037883a 	mov	sp,fp
 800e2c4:	df000017 	ldw	fp,0(sp)
 800e2c8:	dec00104 	addi	sp,sp,4
 800e2cc:	f800283a 	ret

0800e2d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e2d0:	defffe04 	addi	sp,sp,-8
 800e2d4:	dfc00115 	stw	ra,4(sp)
 800e2d8:	df000015 	stw	fp,0(sp)
 800e2dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e2e0:	d0a00b17 	ldw	r2,-32724(gp)
 800e2e4:	10000326 	beq	r2,zero,800e2f4 <alt_get_errno+0x24>
 800e2e8:	d0a00b17 	ldw	r2,-32724(gp)
 800e2ec:	103ee83a 	callr	r2
 800e2f0:	00000106 	br	800e2f8 <alt_get_errno+0x28>
 800e2f4:	d0a2c704 	addi	r2,gp,-29924
}
 800e2f8:	e037883a 	mov	sp,fp
 800e2fc:	dfc00117 	ldw	ra,4(sp)
 800e300:	df000017 	ldw	fp,0(sp)
 800e304:	dec00204 	addi	sp,sp,8
 800e308:	f800283a 	ret

0800e30c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800e30c:	defffb04 	addi	sp,sp,-20
 800e310:	dfc00415 	stw	ra,16(sp)
 800e314:	df000315 	stw	fp,12(sp)
 800e318:	df000304 	addi	fp,sp,12
 800e31c:	e13ffe15 	stw	r4,-8(fp)
 800e320:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800e324:	e0bffe17 	ldw	r2,-8(fp)
 800e328:	10000816 	blt	r2,zero,800e34c <fstat+0x40>
 800e32c:	01400304 	movi	r5,12
 800e330:	e13ffe17 	ldw	r4,-8(fp)
 800e334:	80012b40 	call	80012b4 <__mulsi3>
 800e338:	1007883a 	mov	r3,r2
 800e33c:	00820074 	movhi	r2,2049
 800e340:	1088f404 	addi	r2,r2,9168
 800e344:	1885883a 	add	r2,r3,r2
 800e348:	00000106 	br	800e350 <fstat+0x44>
 800e34c:	0005883a 	mov	r2,zero
 800e350:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800e354:	e0bffd17 	ldw	r2,-12(fp)
 800e358:	10001026 	beq	r2,zero,800e39c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800e35c:	e0bffd17 	ldw	r2,-12(fp)
 800e360:	10800017 	ldw	r2,0(r2)
 800e364:	10800817 	ldw	r2,32(r2)
 800e368:	10000726 	beq	r2,zero,800e388 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 800e36c:	e0bffd17 	ldw	r2,-12(fp)
 800e370:	10800017 	ldw	r2,0(r2)
 800e374:	10800817 	ldw	r2,32(r2)
 800e378:	e17fff17 	ldw	r5,-4(fp)
 800e37c:	e13ffd17 	ldw	r4,-12(fp)
 800e380:	103ee83a 	callr	r2
 800e384:	00000a06 	br	800e3b0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800e388:	e0bfff17 	ldw	r2,-4(fp)
 800e38c:	00c80004 	movi	r3,8192
 800e390:	10c00115 	stw	r3,4(r2)
      return 0;
 800e394:	0005883a 	mov	r2,zero
 800e398:	00000506 	br	800e3b0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800e39c:	800e2d00 	call	800e2d0 <alt_get_errno>
 800e3a0:	1007883a 	mov	r3,r2
 800e3a4:	00801444 	movi	r2,81
 800e3a8:	18800015 	stw	r2,0(r3)
    return -1;
 800e3ac:	00bfffc4 	movi	r2,-1
  }
}
 800e3b0:	e037883a 	mov	sp,fp
 800e3b4:	dfc00117 	ldw	ra,4(sp)
 800e3b8:	df000017 	ldw	fp,0(sp)
 800e3bc:	dec00204 	addi	sp,sp,8
 800e3c0:	f800283a 	ret

0800e3c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e3c4:	defffe04 	addi	sp,sp,-8
 800e3c8:	dfc00115 	stw	ra,4(sp)
 800e3cc:	df000015 	stw	fp,0(sp)
 800e3d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e3d4:	d0a00b17 	ldw	r2,-32724(gp)
 800e3d8:	10000326 	beq	r2,zero,800e3e8 <alt_get_errno+0x24>
 800e3dc:	d0a00b17 	ldw	r2,-32724(gp)
 800e3e0:	103ee83a 	callr	r2
 800e3e4:	00000106 	br	800e3ec <alt_get_errno+0x28>
 800e3e8:	d0a2c704 	addi	r2,gp,-29924
}
 800e3ec:	e037883a 	mov	sp,fp
 800e3f0:	dfc00117 	ldw	ra,4(sp)
 800e3f4:	df000017 	ldw	fp,0(sp)
 800e3f8:	dec00204 	addi	sp,sp,8
 800e3fc:	f800283a 	ret

0800e400 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800e400:	deffed04 	addi	sp,sp,-76
 800e404:	dfc01215 	stw	ra,72(sp)
 800e408:	df001115 	stw	fp,68(sp)
 800e40c:	df001104 	addi	fp,sp,68
 800e410:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800e414:	e0bfff17 	ldw	r2,-4(fp)
 800e418:	10000816 	blt	r2,zero,800e43c <isatty+0x3c>
 800e41c:	01400304 	movi	r5,12
 800e420:	e13fff17 	ldw	r4,-4(fp)
 800e424:	80012b40 	call	80012b4 <__mulsi3>
 800e428:	1007883a 	mov	r3,r2
 800e42c:	00820074 	movhi	r2,2049
 800e430:	1088f404 	addi	r2,r2,9168
 800e434:	1885883a 	add	r2,r3,r2
 800e438:	00000106 	br	800e440 <isatty+0x40>
 800e43c:	0005883a 	mov	r2,zero
 800e440:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800e444:	e0bfef17 	ldw	r2,-68(fp)
 800e448:	10000e26 	beq	r2,zero,800e484 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800e44c:	e0bfef17 	ldw	r2,-68(fp)
 800e450:	10800017 	ldw	r2,0(r2)
 800e454:	10800817 	ldw	r2,32(r2)
 800e458:	1000021e 	bne	r2,zero,800e464 <isatty+0x64>
    {
      return 1;
 800e45c:	00800044 	movi	r2,1
 800e460:	00000d06 	br	800e498 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800e464:	e0bff004 	addi	r2,fp,-64
 800e468:	100b883a 	mov	r5,r2
 800e46c:	e13fff17 	ldw	r4,-4(fp)
 800e470:	800e30c0 	call	800e30c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800e474:	e0bff117 	ldw	r2,-60(fp)
 800e478:	10880020 	cmpeqi	r2,r2,8192
 800e47c:	10803fcc 	andi	r2,r2,255
 800e480:	00000506 	br	800e498 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800e484:	800e3c40 	call	800e3c4 <alt_get_errno>
 800e488:	1007883a 	mov	r3,r2
 800e48c:	00801444 	movi	r2,81
 800e490:	18800015 	stw	r2,0(r3)
    return 0;
 800e494:	0005883a 	mov	r2,zero
  }
}
 800e498:	e037883a 	mov	sp,fp
 800e49c:	dfc00117 	ldw	ra,4(sp)
 800e4a0:	df000017 	ldw	fp,0(sp)
 800e4a4:	dec00204 	addi	sp,sp,8
 800e4a8:	f800283a 	ret

0800e4ac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800e4ac:	defffc04 	addi	sp,sp,-16
 800e4b0:	df000315 	stw	fp,12(sp)
 800e4b4:	df000304 	addi	fp,sp,12
 800e4b8:	e13ffd15 	stw	r4,-12(fp)
 800e4bc:	e17ffe15 	stw	r5,-8(fp)
 800e4c0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800e4c4:	e0fffe17 	ldw	r3,-8(fp)
 800e4c8:	e0bffd17 	ldw	r2,-12(fp)
 800e4cc:	18800c26 	beq	r3,r2,800e500 <alt_load_section+0x54>
  {
    while( to != end )
 800e4d0:	00000806 	br	800e4f4 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800e4d4:	e0bffe17 	ldw	r2,-8(fp)
 800e4d8:	10c00104 	addi	r3,r2,4
 800e4dc:	e0fffe15 	stw	r3,-8(fp)
 800e4e0:	e0fffd17 	ldw	r3,-12(fp)
 800e4e4:	19000104 	addi	r4,r3,4
 800e4e8:	e13ffd15 	stw	r4,-12(fp)
 800e4ec:	18c00017 	ldw	r3,0(r3)
 800e4f0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800e4f4:	e0fffe17 	ldw	r3,-8(fp)
 800e4f8:	e0bfff17 	ldw	r2,-4(fp)
 800e4fc:	18bff51e 	bne	r3,r2,800e4d4 <__alt_data_end+0xfc00e4d4>
    {
      *to++ = *from++;
    }
  }
}
 800e500:	0001883a 	nop
 800e504:	e037883a 	mov	sp,fp
 800e508:	df000017 	ldw	fp,0(sp)
 800e50c:	dec00104 	addi	sp,sp,4
 800e510:	f800283a 	ret

0800e514 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800e514:	defffe04 	addi	sp,sp,-8
 800e518:	dfc00115 	stw	ra,4(sp)
 800e51c:	df000015 	stw	fp,0(sp)
 800e520:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800e524:	01820074 	movhi	r6,2049
 800e528:	31897204 	addi	r6,r6,9672
 800e52c:	01420074 	movhi	r5,2049
 800e530:	2946c104 	addi	r5,r5,6916
 800e534:	01020074 	movhi	r4,2049
 800e538:	21097204 	addi	r4,r4,9672
 800e53c:	800e4ac0 	call	800e4ac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800e540:	01820034 	movhi	r6,2048
 800e544:	31808c04 	addi	r6,r6,560
 800e548:	01420034 	movhi	r5,2048
 800e54c:	29400804 	addi	r5,r5,32
 800e550:	01020034 	movhi	r4,2048
 800e554:	21000804 	addi	r4,r4,32
 800e558:	800e4ac0 	call	800e4ac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800e55c:	01820074 	movhi	r6,2049
 800e560:	3186c104 	addi	r6,r6,6916
 800e564:	01420074 	movhi	r5,2049
 800e568:	29458704 	addi	r5,r5,5660
 800e56c:	01020074 	movhi	r4,2049
 800e570:	21058704 	addi	r4,r4,5660
 800e574:	800e4ac0 	call	800e4ac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800e578:	80108e80 	call	80108e8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800e57c:	8010b380 	call	8010b38 <alt_icache_flush_all>
}
 800e580:	0001883a 	nop
 800e584:	e037883a 	mov	sp,fp
 800e588:	dfc00117 	ldw	ra,4(sp)
 800e58c:	df000017 	ldw	fp,0(sp)
 800e590:	dec00204 	addi	sp,sp,8
 800e594:	f800283a 	ret

0800e598 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e598:	defffe04 	addi	sp,sp,-8
 800e59c:	dfc00115 	stw	ra,4(sp)
 800e5a0:	df000015 	stw	fp,0(sp)
 800e5a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e5a8:	d0a00b17 	ldw	r2,-32724(gp)
 800e5ac:	10000326 	beq	r2,zero,800e5bc <alt_get_errno+0x24>
 800e5b0:	d0a00b17 	ldw	r2,-32724(gp)
 800e5b4:	103ee83a 	callr	r2
 800e5b8:	00000106 	br	800e5c0 <alt_get_errno+0x28>
 800e5bc:	d0a2c704 	addi	r2,gp,-29924
}
 800e5c0:	e037883a 	mov	sp,fp
 800e5c4:	dfc00117 	ldw	ra,4(sp)
 800e5c8:	df000017 	ldw	fp,0(sp)
 800e5cc:	dec00204 	addi	sp,sp,8
 800e5d0:	f800283a 	ret

0800e5d4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800e5d4:	defff904 	addi	sp,sp,-28
 800e5d8:	dfc00615 	stw	ra,24(sp)
 800e5dc:	df000515 	stw	fp,20(sp)
 800e5e0:	df000504 	addi	fp,sp,20
 800e5e4:	e13ffd15 	stw	r4,-12(fp)
 800e5e8:	e17ffe15 	stw	r5,-8(fp)
 800e5ec:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800e5f0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800e5f4:	e0bffd17 	ldw	r2,-12(fp)
 800e5f8:	10000816 	blt	r2,zero,800e61c <lseek+0x48>
 800e5fc:	01400304 	movi	r5,12
 800e600:	e13ffd17 	ldw	r4,-12(fp)
 800e604:	80012b40 	call	80012b4 <__mulsi3>
 800e608:	1007883a 	mov	r3,r2
 800e60c:	00820074 	movhi	r2,2049
 800e610:	1088f404 	addi	r2,r2,9168
 800e614:	1885883a 	add	r2,r3,r2
 800e618:	00000106 	br	800e620 <lseek+0x4c>
 800e61c:	0005883a 	mov	r2,zero
 800e620:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800e624:	e0bffc17 	ldw	r2,-16(fp)
 800e628:	10001026 	beq	r2,zero,800e66c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800e62c:	e0bffc17 	ldw	r2,-16(fp)
 800e630:	10800017 	ldw	r2,0(r2)
 800e634:	10800717 	ldw	r2,28(r2)
 800e638:	10000926 	beq	r2,zero,800e660 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800e63c:	e0bffc17 	ldw	r2,-16(fp)
 800e640:	10800017 	ldw	r2,0(r2)
 800e644:	10800717 	ldw	r2,28(r2)
 800e648:	e1bfff17 	ldw	r6,-4(fp)
 800e64c:	e17ffe17 	ldw	r5,-8(fp)
 800e650:	e13ffc17 	ldw	r4,-16(fp)
 800e654:	103ee83a 	callr	r2
 800e658:	e0bffb15 	stw	r2,-20(fp)
 800e65c:	00000506 	br	800e674 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800e660:	00bfde84 	movi	r2,-134
 800e664:	e0bffb15 	stw	r2,-20(fp)
 800e668:	00000206 	br	800e674 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 800e66c:	00bfebc4 	movi	r2,-81
 800e670:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800e674:	e0bffb17 	ldw	r2,-20(fp)
 800e678:	1000070e 	bge	r2,zero,800e698 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 800e67c:	800e5980 	call	800e598 <alt_get_errno>
 800e680:	1007883a 	mov	r3,r2
 800e684:	e0bffb17 	ldw	r2,-20(fp)
 800e688:	0085c83a 	sub	r2,zero,r2
 800e68c:	18800015 	stw	r2,0(r3)
    rc = -1;
 800e690:	00bfffc4 	movi	r2,-1
 800e694:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800e698:	e0bffb17 	ldw	r2,-20(fp)
}
 800e69c:	e037883a 	mov	sp,fp
 800e6a0:	dfc00117 	ldw	ra,4(sp)
 800e6a4:	df000017 	ldw	fp,0(sp)
 800e6a8:	dec00204 	addi	sp,sp,8
 800e6ac:	f800283a 	ret

0800e6b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800e6b0:	defffd04 	addi	sp,sp,-12
 800e6b4:	dfc00215 	stw	ra,8(sp)
 800e6b8:	df000115 	stw	fp,4(sp)
 800e6bc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800e6c0:	0009883a 	mov	r4,zero
 800e6c4:	800eb080 	call	800eb08 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800e6c8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800e6cc:	800eb400 	call	800eb40 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800e6d0:	80109e80 	call	80109e8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800e6d4:	01020074 	movhi	r4,2049
 800e6d8:	21029204 	addi	r4,r4,2632
 800e6dc:	80111200 	call	8011120 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800e6e0:	d0a2c817 	ldw	r2,-29920(gp)
 800e6e4:	d0e2c917 	ldw	r3,-29916(gp)
 800e6e8:	d122ca17 	ldw	r4,-29912(gp)
 800e6ec:	200d883a 	mov	r6,r4
 800e6f0:	180b883a 	mov	r5,r3
 800e6f4:	1009883a 	mov	r4,r2
 800e6f8:	80003c00 	call	80003c0 <main>
 800e6fc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800e700:	01000044 	movi	r4,1
 800e704:	800e1cc0 	call	800e1cc <close>
  exit (result);
 800e708:	e13fff17 	ldw	r4,-4(fp)
 800e70c:	80111340 	call	8011134 <exit>

0800e710 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800e710:	defffe04 	addi	sp,sp,-8
 800e714:	df000115 	stw	fp,4(sp)
 800e718:	df000104 	addi	fp,sp,4
 800e71c:	e13fff15 	stw	r4,-4(fp)
}
 800e720:	0001883a 	nop
 800e724:	e037883a 	mov	sp,fp
 800e728:	df000017 	ldw	fp,0(sp)
 800e72c:	dec00104 	addi	sp,sp,4
 800e730:	f800283a 	ret

0800e734 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800e734:	defffe04 	addi	sp,sp,-8
 800e738:	df000115 	stw	fp,4(sp)
 800e73c:	df000104 	addi	fp,sp,4
 800e740:	e13fff15 	stw	r4,-4(fp)
}
 800e744:	0001883a 	nop
 800e748:	e037883a 	mov	sp,fp
 800e74c:	df000017 	ldw	fp,0(sp)
 800e750:	dec00104 	addi	sp,sp,4
 800e754:	f800283a 	ret

0800e758 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e758:	defffe04 	addi	sp,sp,-8
 800e75c:	dfc00115 	stw	ra,4(sp)
 800e760:	df000015 	stw	fp,0(sp)
 800e764:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e768:	d0a00b17 	ldw	r2,-32724(gp)
 800e76c:	10000326 	beq	r2,zero,800e77c <alt_get_errno+0x24>
 800e770:	d0a00b17 	ldw	r2,-32724(gp)
 800e774:	103ee83a 	callr	r2
 800e778:	00000106 	br	800e780 <alt_get_errno+0x28>
 800e77c:	d0a2c704 	addi	r2,gp,-29924
}
 800e780:	e037883a 	mov	sp,fp
 800e784:	dfc00117 	ldw	ra,4(sp)
 800e788:	df000017 	ldw	fp,0(sp)
 800e78c:	dec00204 	addi	sp,sp,8
 800e790:	f800283a 	ret

0800e794 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800e794:	defff904 	addi	sp,sp,-28
 800e798:	dfc00615 	stw	ra,24(sp)
 800e79c:	df000515 	stw	fp,20(sp)
 800e7a0:	df000504 	addi	fp,sp,20
 800e7a4:	e13ffd15 	stw	r4,-12(fp)
 800e7a8:	e17ffe15 	stw	r5,-8(fp)
 800e7ac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800e7b0:	e0bffd17 	ldw	r2,-12(fp)
 800e7b4:	10000816 	blt	r2,zero,800e7d8 <read+0x44>
 800e7b8:	01400304 	movi	r5,12
 800e7bc:	e13ffd17 	ldw	r4,-12(fp)
 800e7c0:	80012b40 	call	80012b4 <__mulsi3>
 800e7c4:	1007883a 	mov	r3,r2
 800e7c8:	00820074 	movhi	r2,2049
 800e7cc:	1088f404 	addi	r2,r2,9168
 800e7d0:	1885883a 	add	r2,r3,r2
 800e7d4:	00000106 	br	800e7dc <read+0x48>
 800e7d8:	0005883a 	mov	r2,zero
 800e7dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800e7e0:	e0bffb17 	ldw	r2,-20(fp)
 800e7e4:	10002226 	beq	r2,zero,800e870 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800e7e8:	e0bffb17 	ldw	r2,-20(fp)
 800e7ec:	10800217 	ldw	r2,8(r2)
 800e7f0:	108000cc 	andi	r2,r2,3
 800e7f4:	10800060 	cmpeqi	r2,r2,1
 800e7f8:	1000181e 	bne	r2,zero,800e85c <read+0xc8>
        (fd->dev->read))
 800e7fc:	e0bffb17 	ldw	r2,-20(fp)
 800e800:	10800017 	ldw	r2,0(r2)
 800e804:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800e808:	10001426 	beq	r2,zero,800e85c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800e80c:	e0bffb17 	ldw	r2,-20(fp)
 800e810:	10800017 	ldw	r2,0(r2)
 800e814:	10800517 	ldw	r2,20(r2)
 800e818:	e0ffff17 	ldw	r3,-4(fp)
 800e81c:	180d883a 	mov	r6,r3
 800e820:	e17ffe17 	ldw	r5,-8(fp)
 800e824:	e13ffb17 	ldw	r4,-20(fp)
 800e828:	103ee83a 	callr	r2
 800e82c:	e0bffc15 	stw	r2,-16(fp)
 800e830:	e0bffc17 	ldw	r2,-16(fp)
 800e834:	1000070e 	bge	r2,zero,800e854 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 800e838:	800e7580 	call	800e758 <alt_get_errno>
 800e83c:	1007883a 	mov	r3,r2
 800e840:	e0bffc17 	ldw	r2,-16(fp)
 800e844:	0085c83a 	sub	r2,zero,r2
 800e848:	18800015 	stw	r2,0(r3)
          return -1;
 800e84c:	00bfffc4 	movi	r2,-1
 800e850:	00000c06 	br	800e884 <read+0xf0>
        }
        return rval;
 800e854:	e0bffc17 	ldw	r2,-16(fp)
 800e858:	00000a06 	br	800e884 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800e85c:	800e7580 	call	800e758 <alt_get_errno>
 800e860:	1007883a 	mov	r3,r2
 800e864:	00800344 	movi	r2,13
 800e868:	18800015 	stw	r2,0(r3)
 800e86c:	00000406 	br	800e880 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800e870:	800e7580 	call	800e758 <alt_get_errno>
 800e874:	1007883a 	mov	r3,r2
 800e878:	00801444 	movi	r2,81
 800e87c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800e880:	00bfffc4 	movi	r2,-1
}
 800e884:	e037883a 	mov	sp,fp
 800e888:	dfc00117 	ldw	ra,4(sp)
 800e88c:	df000017 	ldw	fp,0(sp)
 800e890:	dec00204 	addi	sp,sp,8
 800e894:	f800283a 	ret

0800e898 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800e898:	defffc04 	addi	sp,sp,-16
 800e89c:	dfc00315 	stw	ra,12(sp)
 800e8a0:	df000215 	stw	fp,8(sp)
 800e8a4:	dc000115 	stw	r16,4(sp)
 800e8a8:	df000204 	addi	fp,sp,8
 800e8ac:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800e8b0:	e0bffe17 	ldw	r2,-8(fp)
 800e8b4:	108000d0 	cmplti	r2,r2,3
 800e8b8:	1000111e 	bne	r2,zero,800e900 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800e8bc:	04020074 	movhi	r16,2049
 800e8c0:	8408f404 	addi	r16,r16,9168
 800e8c4:	e0bffe17 	ldw	r2,-8(fp)
 800e8c8:	01400304 	movi	r5,12
 800e8cc:	1009883a 	mov	r4,r2
 800e8d0:	80012b40 	call	80012b4 <__mulsi3>
 800e8d4:	8085883a 	add	r2,r16,r2
 800e8d8:	10800204 	addi	r2,r2,8
 800e8dc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800e8e0:	04020074 	movhi	r16,2049
 800e8e4:	8408f404 	addi	r16,r16,9168
 800e8e8:	e0bffe17 	ldw	r2,-8(fp)
 800e8ec:	01400304 	movi	r5,12
 800e8f0:	1009883a 	mov	r4,r2
 800e8f4:	80012b40 	call	80012b4 <__mulsi3>
 800e8f8:	8085883a 	add	r2,r16,r2
 800e8fc:	10000015 	stw	zero,0(r2)
  }
}
 800e900:	0001883a 	nop
 800e904:	e6ffff04 	addi	sp,fp,-4
 800e908:	dfc00217 	ldw	ra,8(sp)
 800e90c:	df000117 	ldw	fp,4(sp)
 800e910:	dc000017 	ldw	r16,0(sp)
 800e914:	dec00304 	addi	sp,sp,12
 800e918:	f800283a 	ret

0800e91c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800e91c:	defff904 	addi	sp,sp,-28
 800e920:	df000615 	stw	fp,24(sp)
 800e924:	df000604 	addi	fp,sp,24
 800e928:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e92c:	0005303a 	rdctl	r2,status
 800e930:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e934:	e0fffe17 	ldw	r3,-8(fp)
 800e938:	00bfff84 	movi	r2,-2
 800e93c:	1884703a 	and	r2,r3,r2
 800e940:	1001703a 	wrctl	status,r2
  
  return context;
 800e944:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800e948:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800e94c:	d0a00c17 	ldw	r2,-32720(gp)
 800e950:	10c000c4 	addi	r3,r2,3
 800e954:	00bfff04 	movi	r2,-4
 800e958:	1884703a 	and	r2,r3,r2
 800e95c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800e960:	d0e00c17 	ldw	r3,-32720(gp)
 800e964:	e0bfff17 	ldw	r2,-4(fp)
 800e968:	1887883a 	add	r3,r3,r2
 800e96c:	00830034 	movhi	r2,3072
 800e970:	10800004 	addi	r2,r2,0
 800e974:	10c0062e 	bgeu	r2,r3,800e990 <sbrk+0x74>
 800e978:	e0bffb17 	ldw	r2,-20(fp)
 800e97c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e980:	e0bffa17 	ldw	r2,-24(fp)
 800e984:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800e988:	00bfffc4 	movi	r2,-1
 800e98c:	00000b06 	br	800e9bc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800e990:	d0a00c17 	ldw	r2,-32720(gp)
 800e994:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 800e998:	d0e00c17 	ldw	r3,-32720(gp)
 800e99c:	e0bfff17 	ldw	r2,-4(fp)
 800e9a0:	1885883a 	add	r2,r3,r2
 800e9a4:	d0a00c15 	stw	r2,-32720(gp)
 800e9a8:	e0bffb17 	ldw	r2,-20(fp)
 800e9ac:	e0bffc15 	stw	r2,-16(fp)
 800e9b0:	e0bffc17 	ldw	r2,-16(fp)
 800e9b4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800e9b8:	e0bffd17 	ldw	r2,-12(fp)
} 
 800e9bc:	e037883a 	mov	sp,fp
 800e9c0:	df000017 	ldw	fp,0(sp)
 800e9c4:	dec00104 	addi	sp,sp,4
 800e9c8:	f800283a 	ret

0800e9cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e9cc:	defffe04 	addi	sp,sp,-8
 800e9d0:	dfc00115 	stw	ra,4(sp)
 800e9d4:	df000015 	stw	fp,0(sp)
 800e9d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e9dc:	d0a00b17 	ldw	r2,-32724(gp)
 800e9e0:	10000326 	beq	r2,zero,800e9f0 <alt_get_errno+0x24>
 800e9e4:	d0a00b17 	ldw	r2,-32724(gp)
 800e9e8:	103ee83a 	callr	r2
 800e9ec:	00000106 	br	800e9f4 <alt_get_errno+0x28>
 800e9f0:	d0a2c704 	addi	r2,gp,-29924
}
 800e9f4:	e037883a 	mov	sp,fp
 800e9f8:	dfc00117 	ldw	ra,4(sp)
 800e9fc:	df000017 	ldw	fp,0(sp)
 800ea00:	dec00204 	addi	sp,sp,8
 800ea04:	f800283a 	ret

0800ea08 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800ea08:	defff904 	addi	sp,sp,-28
 800ea0c:	dfc00615 	stw	ra,24(sp)
 800ea10:	df000515 	stw	fp,20(sp)
 800ea14:	df000504 	addi	fp,sp,20
 800ea18:	e13ffd15 	stw	r4,-12(fp)
 800ea1c:	e17ffe15 	stw	r5,-8(fp)
 800ea20:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ea24:	e0bffd17 	ldw	r2,-12(fp)
 800ea28:	10000816 	blt	r2,zero,800ea4c <write+0x44>
 800ea2c:	01400304 	movi	r5,12
 800ea30:	e13ffd17 	ldw	r4,-12(fp)
 800ea34:	80012b40 	call	80012b4 <__mulsi3>
 800ea38:	1007883a 	mov	r3,r2
 800ea3c:	00820074 	movhi	r2,2049
 800ea40:	1088f404 	addi	r2,r2,9168
 800ea44:	1885883a 	add	r2,r3,r2
 800ea48:	00000106 	br	800ea50 <write+0x48>
 800ea4c:	0005883a 	mov	r2,zero
 800ea50:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800ea54:	e0bffb17 	ldw	r2,-20(fp)
 800ea58:	10002126 	beq	r2,zero,800eae0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800ea5c:	e0bffb17 	ldw	r2,-20(fp)
 800ea60:	10800217 	ldw	r2,8(r2)
 800ea64:	108000cc 	andi	r2,r2,3
 800ea68:	10001826 	beq	r2,zero,800eacc <write+0xc4>
 800ea6c:	e0bffb17 	ldw	r2,-20(fp)
 800ea70:	10800017 	ldw	r2,0(r2)
 800ea74:	10800617 	ldw	r2,24(r2)
 800ea78:	10001426 	beq	r2,zero,800eacc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800ea7c:	e0bffb17 	ldw	r2,-20(fp)
 800ea80:	10800017 	ldw	r2,0(r2)
 800ea84:	10800617 	ldw	r2,24(r2)
 800ea88:	e0ffff17 	ldw	r3,-4(fp)
 800ea8c:	180d883a 	mov	r6,r3
 800ea90:	e17ffe17 	ldw	r5,-8(fp)
 800ea94:	e13ffb17 	ldw	r4,-20(fp)
 800ea98:	103ee83a 	callr	r2
 800ea9c:	e0bffc15 	stw	r2,-16(fp)
 800eaa0:	e0bffc17 	ldw	r2,-16(fp)
 800eaa4:	1000070e 	bge	r2,zero,800eac4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 800eaa8:	800e9cc0 	call	800e9cc <alt_get_errno>
 800eaac:	1007883a 	mov	r3,r2
 800eab0:	e0bffc17 	ldw	r2,-16(fp)
 800eab4:	0085c83a 	sub	r2,zero,r2
 800eab8:	18800015 	stw	r2,0(r3)
        return -1;
 800eabc:	00bfffc4 	movi	r2,-1
 800eac0:	00000c06 	br	800eaf4 <write+0xec>
      }
      return rval;
 800eac4:	e0bffc17 	ldw	r2,-16(fp)
 800eac8:	00000a06 	br	800eaf4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800eacc:	800e9cc0 	call	800e9cc <alt_get_errno>
 800ead0:	1007883a 	mov	r3,r2
 800ead4:	00800344 	movi	r2,13
 800ead8:	18800015 	stw	r2,0(r3)
 800eadc:	00000406 	br	800eaf0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800eae0:	800e9cc0 	call	800e9cc <alt_get_errno>
 800eae4:	1007883a 	mov	r3,r2
 800eae8:	00801444 	movi	r2,81
 800eaec:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800eaf0:	00bfffc4 	movi	r2,-1
}
 800eaf4:	e037883a 	mov	sp,fp
 800eaf8:	dfc00117 	ldw	ra,4(sp)
 800eafc:	df000017 	ldw	fp,0(sp)
 800eb00:	dec00204 	addi	sp,sp,8
 800eb04:	f800283a 	ret

0800eb08 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800eb08:	defffd04 	addi	sp,sp,-12
 800eb0c:	dfc00215 	stw	ra,8(sp)
 800eb10:	df000115 	stw	fp,4(sp)
 800eb14:	df000104 	addi	fp,sp,4
 800eb18:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 800eb1c:	80110600 	call	8011060 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800eb20:	00800044 	movi	r2,1
 800eb24:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800eb28:	0001883a 	nop
 800eb2c:	e037883a 	mov	sp,fp
 800eb30:	dfc00117 	ldw	ra,4(sp)
 800eb34:	df000017 	ldw	fp,0(sp)
 800eb38:	dec00204 	addi	sp,sp,8
 800eb3c:	f800283a 	ret

0800eb40 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800eb40:	defffe04 	addi	sp,sp,-8
 800eb44:	dfc00115 	stw	ra,4(sp)
 800eb48:	df000015 	stw	fp,0(sp)
 800eb4c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
 800eb50:	01020074 	movhi	r4,2049
 800eb54:	21095404 	addi	r4,r4,9552
 800eb58:	800edc80 	call	800edc8 <alt_avalon_i2c_init>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 800eb5c:	0001883a 	nop
}
 800eb60:	0001883a 	nop
 800eb64:	e037883a 	mov	sp,fp
 800eb68:	dfc00117 	ldw	ra,4(sp)
 800eb6c:	df000017 	ldw	fp,0(sp)
 800eb70:	dec00204 	addi	sp,sp,8
 800eb74:	f800283a 	ret

0800eb78 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
 800eb78:	defff904 	addi	sp,sp,-28
 800eb7c:	dfc00615 	stw	ra,24(sp)
 800eb80:	df000515 	stw	fp,20(sp)
 800eb84:	df000504 	addi	fp,sp,20
 800eb88:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
 800eb8c:	008000b4 	movhi	r2,2
 800eb90:	10a1a804 	addi	r2,r2,-31072
 800eb94:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
 800eb98:	e0bfff17 	ldw	r2,-4(fp)
 800eb9c:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
 800eba0:	e0bffc17 	ldw	r2,-16(fp)
 800eba4:	10800717 	ldw	r2,28(r2)
 800eba8:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
 800ebac:	e0bffd17 	ldw	r2,-12(fp)
 800ebb0:	10800217 	ldw	r2,8(r2)
 800ebb4:	10800098 	cmpnei	r2,r2,2
 800ebb8:	1000251e 	bne	r2,zero,800ec50 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
 800ebbc:	e0bffd17 	ldw	r2,-12(fp)
 800ebc0:	10c00017 	ldw	r3,0(r2)
 800ebc4:	e0bffd17 	ldw	r2,-12(fp)
 800ebc8:	10800117 	ldw	r2,4(r2)
 800ebcc:	e13ffe04 	addi	r4,fp,-8
 800ebd0:	200f883a 	mov	r7,r4
 800ebd4:	100d883a 	mov	r6,r2
 800ebd8:	180b883a 	mov	r5,r3
 800ebdc:	e13ffc17 	ldw	r4,-16(fp)
 800ebe0:	800f3280 	call	800f328 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
 800ebe4:	e0bffd17 	ldw	r2,-12(fp)
 800ebe8:	10c00117 	ldw	r3,4(r2)
 800ebec:	e0bffe17 	ldw	r2,-8(fp)
 800ebf0:	1887c83a 	sub	r3,r3,r2
 800ebf4:	e0bffd17 	ldw	r2,-12(fp)
 800ebf8:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
 800ebfc:	e0bffd17 	ldw	r2,-12(fp)
 800ec00:	10c00017 	ldw	r3,0(r2)
 800ec04:	e0bffe17 	ldw	r2,-8(fp)
 800ec08:	1887883a 	add	r3,r3,r2
 800ec0c:	e0bffd17 	ldw	r2,-12(fp)
 800ec10:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
 800ec14:	e0bffd17 	ldw	r2,-12(fp)
 800ec18:	10800117 	ldw	r2,4(r2)
 800ec1c:	10000c26 	beq	r2,zero,800ec50 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800ec20:	01400704 	movi	r5,28
 800ec24:	e13ffc17 	ldw	r4,-16(fp)
 800ec28:	80104e00 	call	80104e0 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 800ec2c:	01400084 	movi	r5,2
 800ec30:	e13ffc17 	ldw	r4,-16(fp)
 800ec34:	80105840 	call	8010584 <alt_avalon_i2c_int_enable>
 800ec38:	00000e06 	br	800ec74 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
 800ec3c:	e0bffb17 	ldw	r2,-20(fp)
 800ec40:	10bfffc4 	addi	r2,r2,-1
 800ec44:	e0bffb15 	stw	r2,-20(fp)
 800ec48:	e0bffb17 	ldw	r2,-20(fp)
 800ec4c:	10000426 	beq	r2,zero,800ec60 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
 800ec50:	e13ffc17 	ldw	r4,-16(fp)
 800ec54:	800f2e40 	call	800f2e4 <alt_avalon_i2c_is_busy>
 800ec58:	103ff81e 	bne	r2,zero,800ec3c <__alt_data_end+0xfc00ec3c>
 800ec5c:	00000106 	br	800ec64 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
 800ec60:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
 800ec64:	e13ffc17 	ldw	r4,-16(fp)
 800ec68:	800ef8c0 	call	800ef8c <alt_avalon_i2c_disable>

    irq->irq_busy=0;
 800ec6c:	e0bffd17 	ldw	r2,-12(fp)
 800ec70:	10000215 	stw	zero,8(r2)
}
 800ec74:	e037883a 	mov	sp,fp
 800ec78:	dfc00117 	ldw	ra,4(sp)
 800ec7c:	df000017 	ldw	fp,0(sp)
 800ec80:	dec00204 	addi	sp,sp,8
 800ec84:	f800283a 	ret

0800ec88 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
 800ec88:	defffc04 	addi	sp,sp,-16
 800ec8c:	dfc00315 	stw	ra,12(sp)
 800ec90:	df000215 	stw	fp,8(sp)
 800ec94:	df000204 	addi	fp,sp,8
 800ec98:	e13ffe15 	stw	r4,-8(fp)
 800ec9c:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
 800eca0:	e0bfff17 	ldw	r2,-4(fp)
 800eca4:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
 800eca8:	e1ffff17 	ldw	r7,-4(fp)
 800ecac:	000d883a 	mov	r6,zero
 800ecb0:	01420074 	movhi	r5,2049
 800ecb4:	297ade04 	addi	r5,r5,-5256
 800ecb8:	e13ffe17 	ldw	r4,-8(fp)
 800ecbc:	800ed740 	call	800ed74 <alt_avalon_i2c_register_callback>
}
 800ecc0:	0001883a 	nop
 800ecc4:	e037883a 	mov	sp,fp
 800ecc8:	dfc00117 	ldw	ra,4(sp)
 800eccc:	df000017 	ldw	fp,0(sp)
 800ecd0:	dec00204 	addi	sp,sp,8
 800ecd4:	f800283a 	ret

0800ecd8 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
 800ecd8:	defff904 	addi	sp,sp,-28
 800ecdc:	dfc00615 	stw	ra,24(sp)
 800ece0:	df000515 	stw	fp,20(sp)
 800ece4:	df000504 	addi	fp,sp,20
 800ece8:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
 800ecec:	e0bfff17 	ldw	r2,-4(fp)
 800ecf0:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 800ecf4:	014007c4 	movi	r5,31
 800ecf8:	e13ffb17 	ldw	r4,-20(fp)
 800ecfc:	801051c0 	call	801051c <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800ed00:	01400704 	movi	r5,28
 800ed04:	e13ffb17 	ldw	r4,-20(fp)
 800ed08:	80104e00 	call	80104e0 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 800ed0c:	e0bffb17 	ldw	r2,-20(fp)
 800ed10:	10800617 	ldw	r2,24(r2)
 800ed14:	10001126 	beq	r2,zero,800ed5c <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ed18:	0005303a 	rdctl	r2,status
 800ed1c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ed20:	e0fffd17 	ldw	r3,-12(fp)
 800ed24:	00bfff84 	movi	r2,-2
 800ed28:	1884703a 	and	r2,r3,r2
 800ed2c:	1001703a 	wrctl	status,r2
  
  return context;
 800ed30:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
 800ed34:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
 800ed38:	e0bffb17 	ldw	r2,-20(fp)
 800ed3c:	10800617 	ldw	r2,24(r2)
 800ed40:	e13ffb17 	ldw	r4,-20(fp)
 800ed44:	103ee83a 	callr	r2
 800ed48:	e0bffc17 	ldw	r2,-16(fp)
 800ed4c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ed50:	e0bffe17 	ldw	r2,-8(fp)
 800ed54:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
 800ed58:	0001883a 	nop
 800ed5c:	0001883a 	nop
}
 800ed60:	e037883a 	mov	sp,fp
 800ed64:	dfc00117 	ldw	ra,4(sp)
 800ed68:	df000017 	ldw	fp,0(sp)
 800ed6c:	dec00204 	addi	sp,sp,8
 800ed70:	f800283a 	ret

0800ed74 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
 800ed74:	defffb04 	addi	sp,sp,-20
 800ed78:	df000415 	stw	fp,16(sp)
 800ed7c:	df000404 	addi	fp,sp,16
 800ed80:	e13ffc15 	stw	r4,-16(fp)
 800ed84:	e17ffd15 	stw	r5,-12(fp)
 800ed88:	e1bffe15 	stw	r6,-8(fp)
 800ed8c:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
 800ed90:	e0bffc17 	ldw	r2,-16(fp)
 800ed94:	e0fffd17 	ldw	r3,-12(fp)
 800ed98:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
 800ed9c:	e0bffc17 	ldw	r2,-16(fp)
 800eda0:	e0ffff17 	ldw	r3,-4(fp)
 800eda4:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
 800eda8:	e0bffc17 	ldw	r2,-16(fp)
 800edac:	e0fffe17 	ldw	r3,-8(fp)
 800edb0:	10c00815 	stw	r3,32(r2)

    return ;
 800edb4:	0001883a 	nop
}
 800edb8:	e037883a 	mov	sp,fp
 800edbc:	df000017 	ldw	fp,0(sp)
 800edc0:	dec00104 	addi	sp,sp,4
 800edc4:	f800283a 	ret

0800edc8 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
 800edc8:	defff704 	addi	sp,sp,-36
 800edcc:	dfc00815 	stw	ra,32(sp)
 800edd0:	df000715 	stw	fp,28(sp)
 800edd4:	df000704 	addi	fp,sp,28
 800edd8:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
 800eddc:	e13fff17 	ldw	r4,-4(fp)
 800ede0:	800ef8c0 	call	800ef8c <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 800ede4:	014007c4 	movi	r5,31
 800ede8:	e13fff17 	ldw	r4,-4(fp)
 800edec:	801051c0 	call	801051c <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800edf0:	01400704 	movi	r5,28
 800edf4:	e13fff17 	ldw	r4,-4(fp)
 800edf8:	80104e00 	call	80104e0 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
 800edfc:	014000c4 	movi	r5,3
 800ee00:	e13fff17 	ldw	r4,-4(fp)
 800ee04:	80107280 	call	8010728 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
 800ee08:	014000c4 	movi	r5,3
 800ee0c:	e13fff17 	ldw	r4,-4(fp)
 800ee10:	80106780 	call	8010678 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
 800ee14:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
 800ee18:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
 800ee1c:	e0bffb04 	addi	r2,fp,-20
 800ee20:	018000b4 	movhi	r6,2
 800ee24:	31a1a804 	addi	r6,r6,-31072
 800ee28:	100b883a 	mov	r5,r2
 800ee2c:	e13fff17 	ldw	r4,-4(fp)
 800ee30:	800f1e80 	call	800f1e8 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
 800ee34:	e0bffb04 	addi	r2,fp,-20
 800ee38:	100b883a 	mov	r5,r2
 800ee3c:	e13fff17 	ldw	r4,-4(fp)
 800ee40:	800f0880 	call	800f088 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
 800ee44:	d1600d04 	addi	r5,gp,-32716
 800ee48:	e13fff17 	ldw	r4,-4(fp)
 800ee4c:	80109440 	call	8010944 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 800ee50:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
 800ee54:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
 800ee58:	e0bffa17 	ldw	r2,-24(fp)
 800ee5c:	10000c1e 	bne	r2,zero,800ee90 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
 800ee60:	e0bfff17 	ldw	r2,-4(fp)
 800ee64:	10c00417 	ldw	r3,16(r2)
 800ee68:	e0bfff17 	ldw	r2,-4(fp)
 800ee6c:	10800517 	ldw	r2,20(r2)
 800ee70:	d8000015 	stw	zero,0(sp)
 800ee74:	e1ffff17 	ldw	r7,-4(fp)
 800ee78:	01820074 	movhi	r6,2049
 800ee7c:	31bb3604 	addi	r6,r6,-4904
 800ee80:	100b883a 	mov	r5,r2
 800ee84:	1809883a 	mov	r4,r3
 800ee88:	8010b580 	call	8010b58 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
 800ee8c:	00000406 	br	800eea0 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
 800ee90:	01020074 	movhi	r4,2049
 800ee94:	2106b904 	addi	r4,r4,6884
 800ee98:	8010df80 	call	8010df8 <alt_printf>
    }

    return;
 800ee9c:	0001883a 	nop

}
 800eea0:	e037883a 	mov	sp,fp
 800eea4:	dfc00117 	ldw	ra,4(sp)
 800eea8:	df000017 	ldw	fp,0(sp)
 800eeac:	dec00204 	addi	sp,sp,8
 800eeb0:	f800283a 	ret

0800eeb4 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
 800eeb4:	defffc04 	addi	sp,sp,-16
 800eeb8:	dfc00315 	stw	ra,12(sp)
 800eebc:	df000215 	stw	fp,8(sp)
 800eec0:	df000204 	addi	fp,sp,8
 800eec4:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
 800eec8:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
 800eecc:	d1600d04 	addi	r5,gp,-32716
 800eed0:	e13fff17 	ldw	r4,-4(fp)
 800eed4:	8010aa80 	call	8010aa8 <alt_find_dev>
 800eed8:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 800eedc:	e0bffe17 	ldw	r2,-8(fp)
}
 800eee0:	e037883a 	mov	sp,fp
 800eee4:	dfc00117 	ldw	ra,4(sp)
 800eee8:	df000017 	ldw	fp,0(sp)
 800eeec:	dec00204 	addi	sp,sp,8
 800eef0:	f800283a 	ret

0800eef4 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 800eef4:	defffc04 	addi	sp,sp,-16
 800eef8:	df000315 	stw	fp,12(sp)
 800eefc:	df000304 	addi	fp,sp,12
 800ef00:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 800ef04:	e0bfff17 	ldw	r2,-4(fp)
 800ef08:	10800717 	ldw	r2,28(r2)
 800ef0c:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
 800ef10:	e0bfff17 	ldw	r2,-4(fp)
 800ef14:	10800317 	ldw	r2,12(r2)
 800ef18:	10800204 	addi	r2,r2,8
 800ef1c:	10800037 	ldwio	r2,0(r2)
 800ef20:	1080004c 	andi	r2,r2,1
 800ef24:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
 800ef28:	e0bffe17 	ldw	r2,-8(fp)
 800ef2c:	10000226 	beq	r2,zero,800ef38 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
 800ef30:	00bffe44 	movi	r2,-7
 800ef34:	00001106 	br	800ef7c <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
 800ef38:	e0bfff17 	ldw	r2,-4(fp)
 800ef3c:	10c00617 	ldw	r3,24(r2)
 800ef40:	00820074 	movhi	r2,2049
 800ef44:	10bade04 	addi	r2,r2,-5256
 800ef48:	1880021e 	bne	r3,r2,800ef54 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
 800ef4c:	e0bffd17 	ldw	r2,-12(fp)
 800ef50:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
 800ef54:	e0bfff17 	ldw	r2,-4(fp)
 800ef58:	10800317 	ldw	r2,12(r2)
 800ef5c:	10800204 	addi	r2,r2,8
 800ef60:	e0ffff17 	ldw	r3,-4(fp)
 800ef64:	18c00317 	ldw	r3,12(r3)
 800ef68:	18c00204 	addi	r3,r3,8
 800ef6c:	18c00037 	ldwio	r3,0(r3)
 800ef70:	18c00054 	ori	r3,r3,1
 800ef74:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 800ef78:	0005883a 	mov	r2,zero
}
 800ef7c:	e037883a 	mov	sp,fp
 800ef80:	df000017 	ldw	fp,0(sp)
 800ef84:	dec00104 	addi	sp,sp,4
 800ef88:	f800283a 	ret

0800ef8c <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 800ef8c:	defffe04 	addi	sp,sp,-8
 800ef90:	df000115 	stw	fp,4(sp)
 800ef94:	df000104 	addi	fp,sp,4
 800ef98:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 800ef9c:	e0bfff17 	ldw	r2,-4(fp)
 800efa0:	10800317 	ldw	r2,12(r2)
 800efa4:	10800204 	addi	r2,r2,8
 800efa8:	e0ffff17 	ldw	r3,-4(fp)
 800efac:	18c00317 	ldw	r3,12(r3)
 800efb0:	18c00204 	addi	r3,r3,8
 800efb4:	19000037 	ldwio	r4,0(r3)
 800efb8:	00ffff84 	movi	r3,-2
 800efbc:	20c6703a 	and	r3,r4,r3
 800efc0:	10c00035 	stwio	r3,0(r2)

}
 800efc4:	0001883a 	nop
 800efc8:	e037883a 	mov	sp,fp
 800efcc:	df000017 	ldw	fp,0(sp)
 800efd0:	dec00104 	addi	sp,sp,4
 800efd4:	f800283a 	ret

0800efd8 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 800efd8:	defffd04 	addi	sp,sp,-12
 800efdc:	df000215 	stw	fp,8(sp)
 800efe0:	df000204 	addi	fp,sp,8
 800efe4:	e13ffe15 	stw	r4,-8(fp)
 800efe8:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
 800efec:	e0bffe17 	ldw	r2,-8(fp)
 800eff0:	10c00d17 	ldw	r3,52(r2)
 800eff4:	e0bfff17 	ldw	r2,-4(fp)
 800eff8:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
 800effc:	e0bffe17 	ldw	r2,-8(fp)
 800f000:	10800317 	ldw	r2,12(r2)
 800f004:	10800204 	addi	r2,r2,8
 800f008:	10800037 	ldwio	r2,0(r2)
 800f00c:	1080008c 	andi	r2,r2,2
 800f010:	1005d07a 	srai	r2,r2,1
 800f014:	1007883a 	mov	r3,r2
 800f018:	e0bfff17 	ldw	r2,-4(fp)
 800f01c:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
 800f020:	e0bffe17 	ldw	r2,-8(fp)
 800f024:	10800317 	ldw	r2,12(r2)
 800f028:	10800904 	addi	r2,r2,36
 800f02c:	10800037 	ldwio	r2,0(r2)
 800f030:	1007883a 	mov	r3,r2
 800f034:	e0bfff17 	ldw	r2,-4(fp)
 800f038:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
 800f03c:	e0bffe17 	ldw	r2,-8(fp)
 800f040:	10800317 	ldw	r2,12(r2)
 800f044:	10800804 	addi	r2,r2,32
 800f048:	10800037 	ldwio	r2,0(r2)
 800f04c:	1007883a 	mov	r3,r2
 800f050:	e0bfff17 	ldw	r2,-4(fp)
 800f054:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
 800f058:	e0bffe17 	ldw	r2,-8(fp)
 800f05c:	10800317 	ldw	r2,12(r2)
 800f060:	10800a04 	addi	r2,r2,40
 800f064:	10800037 	ldwio	r2,0(r2)
 800f068:	1007883a 	mov	r3,r2
 800f06c:	e0bfff17 	ldw	r2,-4(fp)
 800f070:	10c0030d 	sth	r3,12(r2)
}
 800f074:	0001883a 	nop
 800f078:	e037883a 	mov	sp,fp
 800f07c:	df000017 	ldw	fp,0(sp)
 800f080:	dec00104 	addi	sp,sp,4
 800f084:	f800283a 	ret

0800f088 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 800f088:	defffd04 	addi	sp,sp,-12
 800f08c:	df000215 	stw	fp,8(sp)
 800f090:	df000204 	addi	fp,sp,8
 800f094:	e13ffe15 	stw	r4,-8(fp)
 800f098:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
 800f09c:	e0bfff17 	ldw	r2,-4(fp)
 800f0a0:	10c00017 	ldw	r3,0(r2)
 800f0a4:	e0bffe17 	ldw	r2,-8(fp)
 800f0a8:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
 800f0ac:	e0bffe17 	ldw	r2,-8(fp)
 800f0b0:	10800317 	ldw	r2,12(r2)
 800f0b4:	10c00204 	addi	r3,r2,8
 800f0b8:	e0bffe17 	ldw	r2,-8(fp)
 800f0bc:	10800317 	ldw	r2,12(r2)
 800f0c0:	10800204 	addi	r2,r2,8
 800f0c4:	10800037 	ldwio	r2,0(r2)
 800f0c8:	1009883a 	mov	r4,r2
 800f0cc:	00bfff44 	movi	r2,-3
 800f0d0:	2088703a 	and	r4,r4,r2
 800f0d4:	e0bfff17 	ldw	r2,-4(fp)
 800f0d8:	10800117 	ldw	r2,4(r2)
 800f0dc:	1085883a 	add	r2,r2,r2
 800f0e0:	1080008c 	andi	r2,r2,2
 800f0e4:	2084b03a 	or	r2,r4,r2
 800f0e8:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
 800f0ec:	e0bffe17 	ldw	r2,-8(fp)
 800f0f0:	10800317 	ldw	r2,12(r2)
 800f0f4:	10800904 	addi	r2,r2,36
 800f0f8:	e0ffff17 	ldw	r3,-4(fp)
 800f0fc:	18c0020b 	ldhu	r3,8(r3)
 800f100:	18ffffcc 	andi	r3,r3,65535
 800f104:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
 800f108:	e0bffe17 	ldw	r2,-8(fp)
 800f10c:	10800317 	ldw	r2,12(r2)
 800f110:	10800804 	addi	r2,r2,32
 800f114:	e0ffff17 	ldw	r3,-4(fp)
 800f118:	18c0028b 	ldhu	r3,10(r3)
 800f11c:	18ffffcc 	andi	r3,r3,65535
 800f120:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
 800f124:	e0bffe17 	ldw	r2,-8(fp)
 800f128:	10800317 	ldw	r2,12(r2)
 800f12c:	10800a04 	addi	r2,r2,40
 800f130:	e0ffff17 	ldw	r3,-4(fp)
 800f134:	18c0030b 	ldhu	r3,12(r3)
 800f138:	18ffffcc 	andi	r3,r3,65535
 800f13c:	10c00035 	stwio	r3,0(r2)
}
 800f140:	0001883a 	nop
 800f144:	e037883a 	mov	sp,fp
 800f148:	df000017 	ldw	fp,0(sp)
 800f14c:	dec00104 	addi	sp,sp,4
 800f150:	f800283a 	ret

0800f154 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
 800f154:	defffb04 	addi	sp,sp,-20
 800f158:	dfc00415 	stw	ra,16(sp)
 800f15c:	df000315 	stw	fp,12(sp)
 800f160:	df000304 	addi	fp,sp,12
 800f164:	e13ffd15 	stw	r4,-12(fp)
 800f168:	e17ffe15 	stw	r5,-8(fp)
 800f16c:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
 800f170:	e0bffe17 	ldw	r2,-8(fp)
 800f174:	1080028b 	ldhu	r2,10(r2)
 800f178:	10bfffcc 	andi	r2,r2,65535
 800f17c:	10000426 	beq	r2,zero,800f190 <alt_avalon_i2c_master_config_speed_get+0x3c>
 800f180:	e0bffe17 	ldw	r2,-8(fp)
 800f184:	1080020b 	ldhu	r2,8(r2)
 800f188:	10bfffcc 	andi	r2,r2,65535
 800f18c:	1000021e 	bne	r2,zero,800f198 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
 800f190:	00bfff44 	movi	r2,-3
 800f194:	00000f06 	br	800f1d4 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
 800f198:	e0bffd17 	ldw	r2,-12(fp)
 800f19c:	11000c17 	ldw	r4,48(r2)
 800f1a0:	e0bffe17 	ldw	r2,-8(fp)
 800f1a4:	1080028b 	ldhu	r2,10(r2)
 800f1a8:	10ffffcc 	andi	r3,r2,65535
 800f1ac:	e0bffe17 	ldw	r2,-8(fp)
 800f1b0:	1080020b 	ldhu	r2,8(r2)
 800f1b4:	10bfffcc 	andi	r2,r2,65535
 800f1b8:	1885883a 	add	r2,r3,r2
 800f1bc:	100b883a 	mov	r5,r2
 800f1c0:	800b8940 	call	800b894 <__udivsi3>
 800f1c4:	1007883a 	mov	r3,r2
 800f1c8:	e0bfff17 	ldw	r2,-4(fp)
 800f1cc:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 800f1d0:	0005883a 	mov	r2,zero
}
 800f1d4:	e037883a 	mov	sp,fp
 800f1d8:	dfc00117 	ldw	ra,4(sp)
 800f1dc:	df000017 	ldw	fp,0(sp)
 800f1e0:	dec00204 	addi	sp,sp,8
 800f1e4:	f800283a 	ret

0800f1e8 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
 800f1e8:	defff904 	addi	sp,sp,-28
 800f1ec:	dfc00615 	stw	ra,24(sp)
 800f1f0:	df000515 	stw	fp,20(sp)
 800f1f4:	df000504 	addi	fp,sp,20
 800f1f8:	e13ffd15 	stw	r4,-12(fp)
 800f1fc:	e17ffe15 	stw	r5,-8(fp)
 800f200:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
 800f204:	e0ffff17 	ldw	r3,-4(fp)
 800f208:	008001b4 	movhi	r2,6
 800f20c:	1086a004 	addi	r2,r2,6784
 800f210:	10c00436 	bltu	r2,r3,800f224 <alt_avalon_i2c_master_config_speed_set+0x3c>
 800f214:	e0bfff17 	ldw	r2,-4(fp)
 800f218:	10000226 	beq	r2,zero,800f224 <alt_avalon_i2c_master_config_speed_set+0x3c>
 800f21c:	e0bfff17 	ldw	r2,-4(fp)
 800f220:	1000021e 	bne	r2,zero,800f22c <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
 800f224:	00bfff04 	movi	r2,-4
 800f228:	00002906 	br	800f2d0 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 800f22c:	e0bffd17 	ldw	r2,-12(fp)
 800f230:	10c00c17 	ldw	r3,48(r2)
 800f234:	e0bfff17 	ldw	r2,-4(fp)
 800f238:	1085883a 	add	r2,r2,r2
 800f23c:	100b883a 	mov	r5,r2
 800f240:	1809883a 	mov	r4,r3
 800f244:	800b8940 	call	800b894 <__udivsi3>
 800f248:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 800f24c:	e0bffb17 	ldw	r2,-20(fp)
 800f250:	10800f04 	addi	r2,r2,60
 800f254:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 800f258:	e0bffb17 	ldw	r2,-20(fp)
 800f25c:	10bff104 	addi	r2,r2,-60
 800f260:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
 800f264:	e0ffff17 	ldw	r3,-4(fp)
 800f268:	008000b4 	movhi	r2,2
 800f26c:	10a1a804 	addi	r2,r2,-31072
 800f270:	10c0042e 	bgeu	r2,r3,800f284 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
 800f274:	e0bffe17 	ldw	r2,-8(fp)
 800f278:	00c00044 	movi	r3,1
 800f27c:	10c00115 	stw	r3,4(r2)
 800f280:	00000206 	br	800f28c <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
 800f284:	e0bffe17 	ldw	r2,-8(fp)
 800f288:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
 800f28c:	e0bffb17 	ldw	r2,-20(fp)
 800f290:	1007883a 	mov	r3,r2
 800f294:	e0bffe17 	ldw	r2,-8(fp)
 800f298:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
 800f29c:	e0bffc17 	ldw	r2,-16(fp)
 800f2a0:	1007883a 	mov	r3,r2
 800f2a4:	e0bffe17 	ldw	r2,-8(fp)
 800f2a8:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 800f2ac:	e0bffb17 	ldw	r2,-20(fp)
 800f2b0:	1007883a 	mov	r3,r2
 800f2b4:	e0bffb17 	ldw	r2,-20(fp)
 800f2b8:	1004d07a 	srli	r2,r2,1
 800f2bc:	1885c83a 	sub	r2,r3,r2
 800f2c0:	1007883a 	mov	r3,r2
 800f2c4:	e0bffe17 	ldw	r2,-8(fp)
 800f2c8:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
 800f2cc:	0005883a 	mov	r2,zero

}
 800f2d0:	e037883a 	mov	sp,fp
 800f2d4:	dfc00117 	ldw	ra,4(sp)
 800f2d8:	df000017 	ldw	fp,0(sp)
 800f2dc:	dec00204 	addi	sp,sp,8
 800f2e0:	f800283a 	ret

0800f2e4 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 800f2e4:	defffe04 	addi	sp,sp,-8
 800f2e8:	df000115 	stw	fp,4(sp)
 800f2ec:	df000104 	addi	fp,sp,4
 800f2f0:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 800f2f4:	e0bfff17 	ldw	r2,-4(fp)
 800f2f8:	10800317 	ldw	r2,12(r2)
 800f2fc:	10800504 	addi	r2,r2,20
 800f300:	10800037 	ldwio	r2,0(r2)
 800f304:	1080004c 	andi	r2,r2,1
 800f308:	10000226 	beq	r2,zero,800f314 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
 800f30c:	00800044 	movi	r2,1
 800f310:	00000106 	br	800f318 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
 800f314:	0005883a 	mov	r2,zero
}
 800f318:	e037883a 	mov	sp,fp
 800f31c:	df000017 	ldw	fp,0(sp)
 800f320:	dec00104 	addi	sp,sp,4
 800f324:	f800283a 	ret

0800f328 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
 800f328:	defffb04 	addi	sp,sp,-20
 800f32c:	df000415 	stw	fp,16(sp)
 800f330:	df000404 	addi	fp,sp,16
 800f334:	e13ffc15 	stw	r4,-16(fp)
 800f338:	e17ffd15 	stw	r5,-12(fp)
 800f33c:	e1bffe15 	stw	r6,-8(fp)
 800f340:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
 800f344:	e0bfff17 	ldw	r2,-4(fp)
 800f348:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 800f34c:	00001406 	br	800f3a0 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 800f350:	e0bfff17 	ldw	r2,-4(fp)
 800f354:	10800017 	ldw	r2,0(r2)
 800f358:	e0fffd17 	ldw	r3,-12(fp)
 800f35c:	1885883a 	add	r2,r3,r2
 800f360:	e0fffc17 	ldw	r3,-16(fp)
 800f364:	18c00317 	ldw	r3,12(r3)
 800f368:	18c00104 	addi	r3,r3,4
 800f36c:	18c00037 	ldwio	r3,0(r3)
 800f370:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
 800f374:	e0bfff17 	ldw	r2,-4(fp)
 800f378:	10800017 	ldw	r2,0(r2)
 800f37c:	10c00044 	addi	r3,r2,1
 800f380:	e0bfff17 	ldw	r2,-4(fp)
 800f384:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 800f388:	e0bfff17 	ldw	r2,-4(fp)
 800f38c:	10c00017 	ldw	r3,0(r2)
 800f390:	e0bffe17 	ldw	r2,-8(fp)
 800f394:	1880021e 	bne	r3,r2,800f3a0 <alt_avalon_i2c_rx_read_available+0x78>
 800f398:	e0bffe17 	ldw	r2,-8(fp)
 800f39c:	1000061e 	bne	r2,zero,800f3b8 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 800f3a0:	e0bffc17 	ldw	r2,-16(fp)
 800f3a4:	10800317 	ldw	r2,12(r2)
 800f3a8:	10800704 	addi	r2,r2,28
 800f3ac:	10800037 	ldwio	r2,0(r2)
 800f3b0:	103fe71e 	bne	r2,zero,800f350 <__alt_data_end+0xfc00f350>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
 800f3b4:	00000106 	br	800f3bc <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 800f3b8:	0001883a 	nop
    }
}
 800f3bc:	0001883a 	nop
 800f3c0:	e037883a 	mov	sp,fp
 800f3c4:	df000017 	ldw	fp,0(sp)
 800f3c8:	dec00104 	addi	sp,sp,4
 800f3cc:	f800283a 	ret

0800f3d0 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
 800f3d0:	defffa04 	addi	sp,sp,-24
 800f3d4:	dfc00515 	stw	ra,20(sp)
 800f3d8:	df000415 	stw	fp,16(sp)
 800f3dc:	df000404 	addi	fp,sp,16
 800f3e0:	e13ffe15 	stw	r4,-8(fp)
 800f3e4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
 800f3e8:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
 800f3ec:	008000b4 	movhi	r2,2
 800f3f0:	10a1a804 	addi	r2,r2,-31072
 800f3f4:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 800f3f8:	00000d06 	br	800f430 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
 800f3fc:	e0bffd17 	ldw	r2,-12(fp)
 800f400:	108002a8 	cmpgeui	r2,r2,10
 800f404:	1000021e 	bne	r2,zero,800f410 <alt_avalon_i2c_rx_read+0x40>
 800f408:	0109c404 	movi	r4,10000
 800f40c:	80107900 	call	8010790 <alt_busy_sleep>
      if (--timeout == 0)
 800f410:	e0bffd17 	ldw	r2,-12(fp)
 800f414:	10bfffc4 	addi	r2,r2,-1
 800f418:	e0bffd15 	stw	r2,-12(fp)
 800f41c:	e0bffd17 	ldw	r2,-12(fp)
 800f420:	1000031e 	bne	r2,zero,800f430 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
 800f424:	00bfff84 	movi	r2,-2
 800f428:	e0bffc15 	stw	r2,-16(fp)
        break;
 800f42c:	00000506 	br	800f444 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 800f430:	e0bffe17 	ldw	r2,-8(fp)
 800f434:	10800317 	ldw	r2,12(r2)
 800f438:	10800704 	addi	r2,r2,28
 800f43c:	10800037 	ldwio	r2,0(r2)
 800f440:	103fee26 	beq	r2,zero,800f3fc <__alt_data_end+0xfc00f3fc>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 800f444:	e0bffe17 	ldw	r2,-8(fp)
 800f448:	10800317 	ldw	r2,12(r2)
 800f44c:	10800104 	addi	r2,r2,4
 800f450:	10800037 	ldwio	r2,0(r2)
 800f454:	1007883a 	mov	r3,r2
 800f458:	e0bfff17 	ldw	r2,-4(fp)
 800f45c:	10c00005 	stb	r3,0(r2)
        
    return status;
 800f460:	e0bffc17 	ldw	r2,-16(fp)
}
 800f464:	e037883a 	mov	sp,fp
 800f468:	dfc00117 	ldw	ra,4(sp)
 800f46c:	df000017 	ldw	fp,0(sp)
 800f470:	dec00204 	addi	sp,sp,8
 800f474:	f800283a 	ret

0800f478 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
 800f478:	defff804 	addi	sp,sp,-32
 800f47c:	dfc00715 	stw	ra,28(sp)
 800f480:	df000615 	stw	fp,24(sp)
 800f484:	df000604 	addi	fp,sp,24
 800f488:	e13ffc15 	stw	r4,-16(fp)
 800f48c:	2809883a 	mov	r4,r5
 800f490:	3007883a 	mov	r3,r6
 800f494:	3805883a 	mov	r2,r7
 800f498:	e13ffd05 	stb	r4,-12(fp)
 800f49c:	e0fffe05 	stb	r3,-8(fp)
 800f4a0:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
 800f4a4:	0089c404 	movi	r2,10000
 800f4a8:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 800f4ac:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 800f4b0:	00000c06 	br	800f4e4 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
 800f4b4:	e0bffa17 	ldw	r2,-24(fp)
 800f4b8:	108002a8 	cmpgeui	r2,r2,10
 800f4bc:	1000021e 	bne	r2,zero,800f4c8 <alt_avalon_i2c_cmd_write+0x50>
 800f4c0:	0109c404 	movi	r4,10000
 800f4c4:	80107900 	call	8010790 <alt_busy_sleep>
      if (--timeout == 0)
 800f4c8:	e0bffa17 	ldw	r2,-24(fp)
 800f4cc:	10bfffc4 	addi	r2,r2,-1
 800f4d0:	e0bffa15 	stw	r2,-24(fp)
 800f4d4:	e0bffa17 	ldw	r2,-24(fp)
 800f4d8:	1000021e 	bne	r2,zero,800f4e4 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
 800f4dc:	00bfff84 	movi	r2,-2
 800f4e0:	00001906 	br	800f548 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 800f4e4:	e0bffc17 	ldw	r2,-16(fp)
 800f4e8:	10800317 	ldw	r2,12(r2)
 800f4ec:	10800404 	addi	r2,r2,16
 800f4f0:	10800037 	ldwio	r2,0(r2)
 800f4f4:	1080004c 	andi	r2,r2,1
 800f4f8:	103fee26 	beq	r2,zero,800f4b4 <__alt_data_end+0xfc00f4b4>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
 800f4fc:	e0bffc17 	ldw	r2,-16(fp)
 800f500:	10800317 	ldw	r2,12(r2)
 800f504:	e13ffd03 	ldbu	r4,-12(fp)
 800f508:	e0fffe03 	ldbu	r3,-8(fp)
 800f50c:	1806927a 	slli	r3,r3,9
 800f510:	20c8b03a 	or	r4,r4,r3
 800f514:	e0ffff03 	ldbu	r3,-4(fp)
 800f518:	1806923a 	slli	r3,r3,8
 800f51c:	20c6b03a 	or	r3,r4,r3
 800f520:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 800f524:	e0bffb04 	addi	r2,fp,-20
 800f528:	100b883a 	mov	r5,r2
 800f52c:	e13ffc17 	ldw	r4,-16(fp)
 800f530:	800f6b80 	call	800f6b8 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
 800f534:	e0bffb04 	addi	r2,fp,-20
 800f538:	100b883a 	mov	r5,r2
 800f53c:	e13ffc17 	ldw	r4,-16(fp)
 800f540:	800f7040 	call	800f704 <alt_avalon_i2c_check_arblost>
    
    return status;
 800f544:	e0bffb17 	ldw	r2,-20(fp)
}
 800f548:	e037883a 	mov	sp,fp
 800f54c:	dfc00117 	ldw	ra,4(sp)
 800f550:	df000017 	ldw	fp,0(sp)
 800f554:	dec00204 	addi	sp,sp,8
 800f558:	f800283a 	ret

0800f55c <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
 800f55c:	defffa04 	addi	sp,sp,-24
 800f560:	dfc00515 	stw	ra,20(sp)
 800f564:	df000415 	stw	fp,16(sp)
 800f568:	df000404 	addi	fp,sp,16
 800f56c:	e13ffd15 	stw	r4,-12(fp)
 800f570:	e17ffe15 	stw	r5,-8(fp)
 800f574:	3005883a 	mov	r2,r6
 800f578:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
 800f57c:	e0bffd17 	ldw	r2,-12(fp)
 800f580:	10800d17 	ldw	r2,52(r2)
 800f584:	10800058 	cmpnei	r2,r2,1
 800f588:	10001c1e 	bne	r2,zero,800f5fc <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 800f58c:	e0bffd17 	ldw	r2,-12(fp)
 800f590:	10800917 	ldw	r2,36(r2)
 800f594:	109e0014 	ori	r2,r2,30720
 800f598:	1004d1fa 	srli	r2,r2,7
 800f59c:	1007883a 	mov	r3,r2
 800f5a0:	00bfff84 	movi	r2,-2
 800f5a4:	1884703a 	and	r2,r3,r2
 800f5a8:	1007883a 	mov	r3,r2
 800f5ac:	e0bffe17 	ldw	r2,-8(fp)
 800f5b0:	1884b03a 	or	r2,r3,r2
 800f5b4:	10803fcc 	andi	r2,r2,255
 800f5b8:	e0ffff03 	ldbu	r3,-4(fp)
 800f5bc:	000f883a 	mov	r7,zero
 800f5c0:	180d883a 	mov	r6,r3
 800f5c4:	100b883a 	mov	r5,r2
 800f5c8:	e13ffd17 	ldw	r4,-12(fp)
 800f5cc:	800f4780 	call	800f478 <alt_avalon_i2c_cmd_write>
 800f5d0:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
 800f5d4:	e0bffd17 	ldw	r2,-12(fp)
 800f5d8:	10800917 	ldw	r2,36(r2)
 800f5dc:	10803fcc 	andi	r2,r2,255
 800f5e0:	000f883a 	mov	r7,zero
 800f5e4:	000d883a 	mov	r6,zero
 800f5e8:	100b883a 	mov	r5,r2
 800f5ec:	e13ffd17 	ldw	r4,-12(fp)
 800f5f0:	800f4780 	call	800f478 <alt_avalon_i2c_cmd_write>
 800f5f4:	e0bffc15 	stw	r2,-16(fp)
 800f5f8:	00000e06 	br	800f634 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 800f5fc:	e0bffd17 	ldw	r2,-12(fp)
 800f600:	10800917 	ldw	r2,36(r2)
 800f604:	1085883a 	add	r2,r2,r2
 800f608:	1007883a 	mov	r3,r2
 800f60c:	e0bffe17 	ldw	r2,-8(fp)
 800f610:	1884b03a 	or	r2,r3,r2
 800f614:	10803fcc 	andi	r2,r2,255
 800f618:	e0ffff03 	ldbu	r3,-4(fp)
 800f61c:	000f883a 	mov	r7,zero
 800f620:	180d883a 	mov	r6,r3
 800f624:	100b883a 	mov	r5,r2
 800f628:	e13ffd17 	ldw	r4,-12(fp)
 800f62c:	800f4780 	call	800f478 <alt_avalon_i2c_cmd_write>
 800f630:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
 800f634:	e0bffc17 	ldw	r2,-16(fp)
}
 800f638:	e037883a 	mov	sp,fp
 800f63c:	dfc00117 	ldw	ra,4(sp)
 800f640:	df000017 	ldw	fp,0(sp)
 800f644:	dec00204 	addi	sp,sp,8
 800f648:	f800283a 	ret

0800f64c <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
 800f64c:	defffd04 	addi	sp,sp,-12
 800f650:	df000215 	stw	fp,8(sp)
 800f654:	df000204 	addi	fp,sp,8
 800f658:	e13ffe15 	stw	r4,-8(fp)
 800f65c:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
 800f660:	e0bffe17 	ldw	r2,-8(fp)
 800f664:	10c00917 	ldw	r3,36(r2)
 800f668:	e0bfff17 	ldw	r2,-4(fp)
 800f66c:	10c00015 	stw	r3,0(r2)
}
 800f670:	0001883a 	nop
 800f674:	e037883a 	mov	sp,fp
 800f678:	df000017 	ldw	fp,0(sp)
 800f67c:	dec00104 	addi	sp,sp,4
 800f680:	f800283a 	ret

0800f684 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
 800f684:	defffd04 	addi	sp,sp,-12
 800f688:	df000215 	stw	fp,8(sp)
 800f68c:	df000204 	addi	fp,sp,8
 800f690:	e13ffe15 	stw	r4,-8(fp)
 800f694:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
 800f698:	e0bffe17 	ldw	r2,-8(fp)
 800f69c:	e0ffff17 	ldw	r3,-4(fp)
 800f6a0:	10c00915 	stw	r3,36(r2)
}
 800f6a4:	0001883a 	nop
 800f6a8:	e037883a 	mov	sp,fp
 800f6ac:	df000017 	ldw	fp,0(sp)
 800f6b0:	dec00104 	addi	sp,sp,4
 800f6b4:	f800283a 	ret

0800f6b8 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
 800f6b8:	defffd04 	addi	sp,sp,-12
 800f6bc:	df000215 	stw	fp,8(sp)
 800f6c0:	df000204 	addi	fp,sp,8
 800f6c4:	e13ffe15 	stw	r4,-8(fp)
 800f6c8:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 800f6cc:	e0bffe17 	ldw	r2,-8(fp)
 800f6d0:	10800317 	ldw	r2,12(r2)
 800f6d4:	10800404 	addi	r2,r2,16
 800f6d8:	10800037 	ldwio	r2,0(r2)
 800f6dc:	1080010c 	andi	r2,r2,4
 800f6e0:	10000326 	beq	r2,zero,800f6f0 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 800f6e4:	e0bfff17 	ldw	r2,-4(fp)
 800f6e8:	00fffec4 	movi	r3,-5
 800f6ec:	10c00015 	stw	r3,0(r2)
    }
}
 800f6f0:	0001883a 	nop
 800f6f4:	e037883a 	mov	sp,fp
 800f6f8:	df000017 	ldw	fp,0(sp)
 800f6fc:	dec00104 	addi	sp,sp,4
 800f700:	f800283a 	ret

0800f704 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
 800f704:	defffd04 	addi	sp,sp,-12
 800f708:	df000215 	stw	fp,8(sp)
 800f70c:	df000204 	addi	fp,sp,8
 800f710:	e13ffe15 	stw	r4,-8(fp)
 800f714:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
 800f718:	e0bffe17 	ldw	r2,-8(fp)
 800f71c:	10800317 	ldw	r2,12(r2)
 800f720:	10800404 	addi	r2,r2,16
 800f724:	10800037 	ldwio	r2,0(r2)
 800f728:	1080020c 	andi	r2,r2,8
 800f72c:	10000326 	beq	r2,zero,800f73c <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
 800f730:	e0bfff17 	ldw	r2,-4(fp)
 800f734:	00fffe84 	movi	r3,-6
 800f738:	10c00015 	stw	r3,0(r2)
    }
}
 800f73c:	0001883a 	nop
 800f740:	e037883a 	mov	sp,fp
 800f744:	df000017 	ldw	fp,0(sp)
 800f748:	dec00104 	addi	sp,sp,4
 800f74c:	f800283a 	ret

0800f750 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 800f750:	defff804 	addi	sp,sp,-32
 800f754:	dfc00715 	stw	ra,28(sp)
 800f758:	df000615 	stw	fp,24(sp)
 800f75c:	df000604 	addi	fp,sp,24
 800f760:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 800f764:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 800f768:	e0bfff17 	ldw	r2,-4(fp)
 800f76c:	10800717 	ldw	r2,28(r2)
 800f770:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
 800f774:	e0bffb17 	ldw	r2,-20(fp)
 800f778:	10800117 	ldw	r2,4(r2)
 800f77c:	10800044 	addi	r2,r2,1
 800f780:	0149c404 	movi	r5,10000
 800f784:	1009883a 	mov	r4,r2
 800f788:	80012b40 	call	80012b4 <__mulsi3>
 800f78c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
 800f790:	e0bffd04 	addi	r2,fp,-12
 800f794:	100b883a 	mov	r5,r2
 800f798:	e13fff17 	ldw	r4,-4(fp)
 800f79c:	80105e80 	call	80105e8 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
 800f7a0:	e0bffd17 	ldw	r2,-12(fp)
 800f7a4:	100b883a 	mov	r5,r2
 800f7a8:	e13fff17 	ldw	r4,-4(fp)
 800f7ac:	801051c0 	call	801051c <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 800f7b0:	e0bffc04 	addi	r2,fp,-16
 800f7b4:	100b883a 	mov	r5,r2
 800f7b8:	e13fff17 	ldw	r4,-4(fp)
 800f7bc:	800f6b80 	call	800f6b8 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
 800f7c0:	e0bffc17 	ldw	r2,-16(fp)
 800f7c4:	10002226 	beq	r2,zero,800f850 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
 800f7c8:	e0bffb17 	ldw	r2,-20(fp)
 800f7cc:	10800217 	ldw	r2,8(r2)
 800f7d0:	10001d26 	beq	r2,zero,800f848 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 800f7d4:	00000d06 	br	800f80c <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
 800f7d8:	e0bffa17 	ldw	r2,-24(fp)
 800f7dc:	108002a8 	cmpgeui	r2,r2,10
 800f7e0:	1000021e 	bne	r2,zero,800f7ec <alt_avalon_i2c_interrupt_transaction_status+0x9c>
 800f7e4:	0109c404 	movi	r4,10000
 800f7e8:	80107900 	call	8010790 <alt_busy_sleep>
              if (--timeout == 0)
 800f7ec:	e0bffa17 	ldw	r2,-24(fp)
 800f7f0:	10bfffc4 	addi	r2,r2,-1
 800f7f4:	e0bffa15 	stw	r2,-24(fp)
 800f7f8:	e0bffa17 	ldw	r2,-24(fp)
 800f7fc:	1000031e 	bne	r2,zero,800f80c <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
 800f800:	00bfff84 	movi	r2,-2
 800f804:	e0bffc15 	stw	r2,-16(fp)
                 break;
 800f808:	00000306 	br	800f818 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 800f80c:	e13fff17 	ldw	r4,-4(fp)
 800f810:	800f2e40 	call	800f2e4 <alt_avalon_i2c_is_busy>
 800f814:	103ff01e 	bne	r2,zero,800f7d8 <__alt_data_end+0xfc00f7d8>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
 800f818:	e0bffb17 	ldw	r2,-20(fp)
 800f81c:	10800017 	ldw	r2,0(r2)
 800f820:	e0fffe04 	addi	r3,fp,-8
 800f824:	180f883a 	mov	r7,r3
 800f828:	000d883a 	mov	r6,zero
 800f82c:	100b883a 	mov	r5,r2
 800f830:	e13fff17 	ldw	r4,-4(fp)
 800f834:	800f3280 	call	800f328 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
 800f838:	e13fff17 	ldw	r4,-4(fp)
 800f83c:	800ef8c0 	call	800ef8c <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
 800f840:	e0bffb17 	ldw	r2,-20(fp)
 800f844:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
 800f848:	e0bffc17 	ldw	r2,-16(fp)
 800f84c:	00000a06 	br	800f878 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
 800f850:	e0bffb17 	ldw	r2,-20(fp)
 800f854:	10800217 	ldw	r2,8(r2)
 800f858:	10000626 	beq	r2,zero,800f874 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
 800f85c:	e0bffd17 	ldw	r2,-12(fp)
 800f860:	100b883a 	mov	r5,r2
 800f864:	e13fff17 	ldw	r4,-4(fp)
 800f868:	80105840 	call	8010584 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
 800f86c:	00bffe44 	movi	r2,-7
 800f870:	00000106 	br	800f878 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
 800f874:	0005883a 	mov	r2,zero
}
 800f878:	e037883a 	mov	sp,fp
 800f87c:	dfc00117 	ldw	ra,4(sp)
 800f880:	df000017 	ldw	fp,0(sp)
 800f884:	dec00204 	addi	sp,sp,8
 800f888:	f800283a 	ret

0800f88c <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 800f88c:	defff704 	addi	sp,sp,-36
 800f890:	dfc00815 	stw	ra,32(sp)
 800f894:	df000715 	stw	fp,28(sp)
 800f898:	df000704 	addi	fp,sp,28
 800f89c:	e13ffc15 	stw	r4,-16(fp)
 800f8a0:	e17ffd15 	stw	r5,-12(fp)
 800f8a4:	e1bffe15 	stw	r6,-8(fp)
 800f8a8:	3805883a 	mov	r2,r7
 800f8ac:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 800f8b0:	0089c404 	movi	r2,10000
 800f8b4:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
 800f8b8:	00002206 	br	800f944 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
 800f8bc:	e0bffb17 	ldw	r2,-20(fp)
 800f8c0:	108002a8 	cmpgeui	r2,r2,10
 800f8c4:	1000021e 	bne	r2,zero,800f8d0 <alt_avalon_i2c_master_tx+0x44>
 800f8c8:	0109c404 	movi	r4,10000
 800f8cc:	80107900 	call	8010790 <alt_busy_sleep>
      if (use_interrupts)
 800f8d0:	e0bfff03 	ldbu	r2,-4(fp)
 800f8d4:	10000926 	beq	r2,zero,800f8fc <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
 800f8d8:	00800044 	movi	r2,1
 800f8dc:	d8800015 	stw	r2,0(sp)
 800f8e0:	000f883a 	mov	r7,zero
 800f8e4:	e1bffe17 	ldw	r6,-8(fp)
 800f8e8:	e17ffd17 	ldw	r5,-12(fp)
 800f8ec:	e13ffc17 	ldw	r4,-16(fp)
 800f8f0:	800fe380 	call	800fe38 <alt_avalon_i2c_master_transmit_using_interrupts>
 800f8f4:	e0bffa15 	stw	r2,-24(fp)
 800f8f8:	00000806 	br	800f91c <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
 800f8fc:	00800044 	movi	r2,1
 800f900:	d8800015 	stw	r2,0(sp)
 800f904:	000f883a 	mov	r7,zero
 800f908:	e1bffe17 	ldw	r6,-8(fp)
 800f90c:	e17ffd17 	ldw	r5,-12(fp)
 800f910:	e13ffc17 	ldw	r4,-16(fp)
 800f914:	800fc780 	call	800fc78 <alt_avalon_i2c_master_transmit>
 800f918:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 800f91c:	e0bffa17 	ldw	r2,-24(fp)
 800f920:	10bffea0 	cmpeqi	r2,r2,-6
 800f924:	1000061e 	bne	r2,zero,800f940 <alt_avalon_i2c_master_tx+0xb4>
 800f928:	e0bffa17 	ldw	r2,-24(fp)
 800f92c:	10bffee0 	cmpeqi	r2,r2,-5
 800f930:	1000031e 	bne	r2,zero,800f940 <alt_avalon_i2c_master_tx+0xb4>
 800f934:	e0bffa17 	ldw	r2,-24(fp)
 800f938:	10bffe58 	cmpnei	r2,r2,-7
 800f93c:	1000061e 	bne	r2,zero,800f958 <alt_avalon_i2c_master_tx+0xcc>
 800f940:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
 800f944:	e0bffb17 	ldw	r2,-20(fp)
 800f948:	10ffffc4 	addi	r3,r2,-1
 800f94c:	e0fffb15 	stw	r3,-20(fp)
 800f950:	103fda1e 	bne	r2,zero,800f8bc <__alt_data_end+0xfc00f8bc>
 800f954:	00000106 	br	800f95c <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
 800f958:	0001883a 	nop
    }

    return status;
 800f95c:	e0bffa17 	ldw	r2,-24(fp)
}        
 800f960:	e037883a 	mov	sp,fp
 800f964:	dfc00117 	ldw	ra,4(sp)
 800f968:	df000017 	ldw	fp,0(sp)
 800f96c:	dec00204 	addi	sp,sp,8
 800f970:	f800283a 	ret

0800f974 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 800f974:	defff704 	addi	sp,sp,-36
 800f978:	dfc00815 	stw	ra,32(sp)
 800f97c:	df000715 	stw	fp,28(sp)
 800f980:	df000704 	addi	fp,sp,28
 800f984:	e13ffc15 	stw	r4,-16(fp)
 800f988:	e17ffd15 	stw	r5,-12(fp)
 800f98c:	e1bffe15 	stw	r6,-8(fp)
 800f990:	3805883a 	mov	r2,r7
 800f994:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 800f998:	0089c404 	movi	r2,10000
 800f99c:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
 800f9a0:	e0bfff03 	ldbu	r2,-4(fp)
 800f9a4:	10003426 	beq	r2,zero,800fa78 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
 800f9a8:	00001706 	br	800fa08 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
 800f9ac:	e0bffb17 	ldw	r2,-20(fp)
 800f9b0:	108002a8 	cmpgeui	r2,r2,10
 800f9b4:	1000021e 	bne	r2,zero,800f9c0 <alt_avalon_i2c_master_rx+0x4c>
 800f9b8:	0109c404 	movi	r4,10000
 800f9bc:	80107900 	call	8010790 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 800f9c0:	00800044 	movi	r2,1
 800f9c4:	d8800015 	stw	r2,0(sp)
 800f9c8:	000f883a 	mov	r7,zero
 800f9cc:	e1bffe17 	ldw	r6,-8(fp)
 800f9d0:	e17ffd17 	ldw	r5,-12(fp)
 800f9d4:	e13ffc17 	ldw	r4,-16(fp)
 800f9d8:	80102540 	call	8010254 <alt_avalon_i2c_master_receive_using_interrupts>
 800f9dc:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 800f9e0:	e0bffa17 	ldw	r2,-24(fp)
 800f9e4:	10bffea0 	cmpeqi	r2,r2,-6
 800f9e8:	1000061e 	bne	r2,zero,800fa04 <alt_avalon_i2c_master_rx+0x90>
 800f9ec:	e0bffa17 	ldw	r2,-24(fp)
 800f9f0:	10bffee0 	cmpeqi	r2,r2,-5
 800f9f4:	1000031e 	bne	r2,zero,800fa04 <alt_avalon_i2c_master_rx+0x90>
 800f9f8:	e0bffa17 	ldw	r2,-24(fp)
 800f9fc:	10bffe58 	cmpnei	r2,r2,-7
 800fa00:	1000221e 	bne	r2,zero,800fa8c <alt_avalon_i2c_master_rx+0x118>
 800fa04:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
 800fa08:	e0bffb17 	ldw	r2,-20(fp)
 800fa0c:	10ffffc4 	addi	r3,r2,-1
 800fa10:	e0fffb15 	stw	r3,-20(fp)
 800fa14:	103fe51e 	bne	r2,zero,800f9ac <__alt_data_end+0xfc00f9ac>
 800fa18:	00001f06 	br	800fa98 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 800fa1c:	e0bffb17 	ldw	r2,-20(fp)
 800fa20:	108002a8 	cmpgeui	r2,r2,10
 800fa24:	1000021e 	bne	r2,zero,800fa30 <alt_avalon_i2c_master_rx+0xbc>
 800fa28:	0109c404 	movi	r4,10000
 800fa2c:	80107900 	call	8010790 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 800fa30:	00800044 	movi	r2,1
 800fa34:	d8800015 	stw	r2,0(sp)
 800fa38:	000f883a 	mov	r7,zero
 800fa3c:	e1bffe17 	ldw	r6,-8(fp)
 800fa40:	e17ffd17 	ldw	r5,-12(fp)
 800fa44:	e13ffc17 	ldw	r4,-16(fp)
 800fa48:	80100440 	call	8010044 <alt_avalon_i2c_master_receive>
 800fa4c:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 800fa50:	e0bffa17 	ldw	r2,-24(fp)
 800fa54:	10bffea0 	cmpeqi	r2,r2,-6
 800fa58:	1000061e 	bne	r2,zero,800fa74 <alt_avalon_i2c_master_rx+0x100>
 800fa5c:	e0bffa17 	ldw	r2,-24(fp)
 800fa60:	10bffee0 	cmpeqi	r2,r2,-5
 800fa64:	1000031e 	bne	r2,zero,800fa74 <alt_avalon_i2c_master_rx+0x100>
 800fa68:	e0bffa17 	ldw	r2,-24(fp)
 800fa6c:	10bffe58 	cmpnei	r2,r2,-7
 800fa70:	1000081e 	bne	r2,zero,800fa94 <alt_avalon_i2c_master_rx+0x120>
 800fa74:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
 800fa78:	e0bffb17 	ldw	r2,-20(fp)
 800fa7c:	10ffffc4 	addi	r3,r2,-1
 800fa80:	e0fffb15 	stw	r3,-20(fp)
 800fa84:	103fe51e 	bne	r2,zero,800fa1c <__alt_data_end+0xfc00fa1c>
 800fa88:	00000306 	br	800fa98 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 800fa8c:	0001883a 	nop
 800fa90:	00000106 	br	800fa98 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 800fa94:	0001883a 	nop
      }
    }
    
    return status;
 800fa98:	e0bffa17 	ldw	r2,-24(fp)
}        
 800fa9c:	e037883a 	mov	sp,fp
 800faa0:	dfc00117 	ldw	ra,4(sp)
 800faa4:	df000017 	ldw	fp,0(sp)
 800faa8:	dec00204 	addi	sp,sp,8
 800faac:	f800283a 	ret

0800fab0 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
 800fab0:	defff604 	addi	sp,sp,-40
 800fab4:	dfc00915 	stw	ra,36(sp)
 800fab8:	df000815 	stw	fp,32(sp)
 800fabc:	df000804 	addi	fp,sp,32
 800fac0:	e13ffb15 	stw	r4,-20(fp)
 800fac4:	e17ffc15 	stw	r5,-16(fp)
 800fac8:	e1bffd15 	stw	r6,-12(fp)
 800facc:	e1fffe15 	stw	r7,-8(fp)
 800fad0:	e0800317 	ldw	r2,12(fp)
 800fad4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 800fad8:	0089c404 	movi	r2,10000
 800fadc:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
 800fae0:	e0bfff03 	ldbu	r2,-4(fp)
 800fae4:	10005626 	beq	r2,zero,800fc40 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
 800fae8:	00002806 	br	800fb8c <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
 800faec:	e0bffa17 	ldw	r2,-24(fp)
 800faf0:	108002a8 	cmpgeui	r2,r2,10
 800faf4:	1000021e 	bne	r2,zero,800fb00 <alt_avalon_i2c_master_tx_rx+0x50>
 800faf8:	0109c404 	movi	r4,10000
 800fafc:	80107900 	call	8010790 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 800fb00:	d8000015 	stw	zero,0(sp)
 800fb04:	000f883a 	mov	r7,zero
 800fb08:	e1bffd17 	ldw	r6,-12(fp)
 800fb0c:	e17ffc17 	ldw	r5,-16(fp)
 800fb10:	e13ffb17 	ldw	r4,-20(fp)
 800fb14:	800fe380 	call	800fe38 <alt_avalon_i2c_master_transmit_using_interrupts>
 800fb18:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 800fb1c:	e0bff917 	ldw	r2,-28(fp)
 800fb20:	10bffea0 	cmpeqi	r2,r2,-6
 800fb24:	1000191e 	bne	r2,zero,800fb8c <alt_avalon_i2c_master_tx_rx+0xdc>
 800fb28:	e0bff917 	ldw	r2,-28(fp)
 800fb2c:	10bffee0 	cmpeqi	r2,r2,-5
 800fb30:	1000161e 	bne	r2,zero,800fb8c <alt_avalon_i2c_master_tx_rx+0xdc>
 800fb34:	e0bff917 	ldw	r2,-28(fp)
 800fb38:	10bffe58 	cmpnei	r2,r2,-7
 800fb3c:	1000011e 	bne	r2,zero,800fb44 <alt_avalon_i2c_master_tx_rx+0x94>
 800fb40:	00001206 	br	800fb8c <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 800fb44:	00800044 	movi	r2,1
 800fb48:	d8800015 	stw	r2,0(sp)
 800fb4c:	01c00044 	movi	r7,1
 800fb50:	e1800217 	ldw	r6,8(fp)
 800fb54:	e17ffe17 	ldw	r5,-8(fp)
 800fb58:	e13ffb17 	ldw	r4,-20(fp)
 800fb5c:	80102540 	call	8010254 <alt_avalon_i2c_master_receive_using_interrupts>
 800fb60:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 800fb64:	e0bff917 	ldw	r2,-28(fp)
 800fb68:	10bffea0 	cmpeqi	r2,r2,-6
 800fb6c:	1000061e 	bne	r2,zero,800fb88 <alt_avalon_i2c_master_tx_rx+0xd8>
 800fb70:	e0bff917 	ldw	r2,-28(fp)
 800fb74:	10bffee0 	cmpeqi	r2,r2,-5
 800fb78:	1000031e 	bne	r2,zero,800fb88 <alt_avalon_i2c_master_tx_rx+0xd8>
 800fb7c:	e0bff917 	ldw	r2,-28(fp)
 800fb80:	10bffe58 	cmpnei	r2,r2,-7
 800fb84:	1000331e 	bne	r2,zero,800fc54 <alt_avalon_i2c_master_tx_rx+0x1a4>
 800fb88:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
 800fb8c:	e0bffa17 	ldw	r2,-24(fp)
 800fb90:	10ffffc4 	addi	r3,r2,-1
 800fb94:	e0fffa15 	stw	r3,-24(fp)
 800fb98:	103fd41e 	bne	r2,zero,800faec <__alt_data_end+0xfc00faec>
 800fb9c:	00003006 	br	800fc60 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 800fba0:	e0bffa17 	ldw	r2,-24(fp)
 800fba4:	108002a8 	cmpgeui	r2,r2,10
 800fba8:	1000021e 	bne	r2,zero,800fbb4 <alt_avalon_i2c_master_tx_rx+0x104>
 800fbac:	0109c404 	movi	r4,10000
 800fbb0:	80107900 	call	8010790 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 800fbb4:	d8000015 	stw	zero,0(sp)
 800fbb8:	000f883a 	mov	r7,zero
 800fbbc:	e1bffd17 	ldw	r6,-12(fp)
 800fbc0:	e17ffc17 	ldw	r5,-16(fp)
 800fbc4:	e13ffb17 	ldw	r4,-20(fp)
 800fbc8:	800fc780 	call	800fc78 <alt_avalon_i2c_master_transmit>
 800fbcc:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 800fbd0:	e0bff917 	ldw	r2,-28(fp)
 800fbd4:	10bffea0 	cmpeqi	r2,r2,-6
 800fbd8:	1000191e 	bne	r2,zero,800fc40 <alt_avalon_i2c_master_tx_rx+0x190>
 800fbdc:	e0bff917 	ldw	r2,-28(fp)
 800fbe0:	10bffee0 	cmpeqi	r2,r2,-5
 800fbe4:	1000161e 	bne	r2,zero,800fc40 <alt_avalon_i2c_master_tx_rx+0x190>
 800fbe8:	e0bff917 	ldw	r2,-28(fp)
 800fbec:	10bffe58 	cmpnei	r2,r2,-7
 800fbf0:	1000011e 	bne	r2,zero,800fbf8 <alt_avalon_i2c_master_tx_rx+0x148>
 800fbf4:	00001206 	br	800fc40 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 800fbf8:	00800044 	movi	r2,1
 800fbfc:	d8800015 	stw	r2,0(sp)
 800fc00:	01c00044 	movi	r7,1
 800fc04:	e1800217 	ldw	r6,8(fp)
 800fc08:	e17ffe17 	ldw	r5,-8(fp)
 800fc0c:	e13ffb17 	ldw	r4,-20(fp)
 800fc10:	80100440 	call	8010044 <alt_avalon_i2c_master_receive>
 800fc14:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 800fc18:	e0bff917 	ldw	r2,-28(fp)
 800fc1c:	10bffea0 	cmpeqi	r2,r2,-6
 800fc20:	1000061e 	bne	r2,zero,800fc3c <alt_avalon_i2c_master_tx_rx+0x18c>
 800fc24:	e0bff917 	ldw	r2,-28(fp)
 800fc28:	10bffee0 	cmpeqi	r2,r2,-5
 800fc2c:	1000031e 	bne	r2,zero,800fc3c <alt_avalon_i2c_master_tx_rx+0x18c>
 800fc30:	e0bff917 	ldw	r2,-28(fp)
 800fc34:	10bffe58 	cmpnei	r2,r2,-7
 800fc38:	1000081e 	bne	r2,zero,800fc5c <alt_avalon_i2c_master_tx_rx+0x1ac>
 800fc3c:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
 800fc40:	e0bffa17 	ldw	r2,-24(fp)
 800fc44:	10ffffc4 	addi	r3,r2,-1
 800fc48:	e0fffa15 	stw	r3,-24(fp)
 800fc4c:	103fd41e 	bne	r2,zero,800fba0 <__alt_data_end+0xfc00fba0>
 800fc50:	00000306 	br	800fc60 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 800fc54:	0001883a 	nop
 800fc58:	00000106 	br	800fc60 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 800fc5c:	0001883a 	nop
      }
    }
    
    return status;
 800fc60:	e0bff917 	ldw	r2,-28(fp)
}                                       
 800fc64:	e037883a 	mov	sp,fp
 800fc68:	dfc00117 	ldw	ra,4(sp)
 800fc6c:	df000017 	ldw	fp,0(sp)
 800fc70:	dec00204 	addi	sp,sp,8
 800fc74:	f800283a 	ret

0800fc78 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 800fc78:	defff704 	addi	sp,sp,-36
 800fc7c:	dfc00815 	stw	ra,32(sp)
 800fc80:	df000715 	stw	fp,28(sp)
 800fc84:	df000704 	addi	fp,sp,28
 800fc88:	e13ffb15 	stw	r4,-20(fp)
 800fc8c:	e17ffc15 	stw	r5,-16(fp)
 800fc90:	e1bffd15 	stw	r6,-12(fp)
 800fc94:	3807883a 	mov	r3,r7
 800fc98:	e0800217 	ldw	r2,8(fp)
 800fc9c:	e0fffe05 	stb	r3,-8(fp)
 800fca0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 800fca4:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
 800fca8:	0149c404 	movi	r5,10000
 800fcac:	e13ffd17 	ldw	r4,-12(fp)
 800fcb0:	80012b40 	call	80012b4 <__mulsi3>
 800fcb4:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
 800fcb8:	e0bffd17 	ldw	r2,-12(fp)
 800fcbc:	1000021e 	bne	r2,zero,800fcc8 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 800fcc0:	0005883a 	mov	r2,zero
 800fcc4:	00005706 	br	800fe24 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 800fcc8:	e0bffe03 	ldbu	r2,-8(fp)
 800fccc:	10000a1e 	bne	r2,zero,800fcf8 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 800fcd0:	e13ffb17 	ldw	r4,-20(fp)
 800fcd4:	800eef40 	call	800eef4 <alt_avalon_i2c_enable>
 800fcd8:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 800fcdc:	e0bffa17 	ldw	r2,-24(fp)
 800fce0:	10000226 	beq	r2,zero,800fcec <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
 800fce4:	e0bffa17 	ldw	r2,-24(fp)
 800fce8:	00004e06 	br	800fe24 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800fcec:	01400704 	movi	r5,28
 800fcf0:	e13ffb17 	ldw	r4,-20(fp)
 800fcf4:	80104e00 	call	80104e0 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 800fcf8:	e0bffe03 	ldbu	r2,-8(fp)
 800fcfc:	100d883a 	mov	r6,r2
 800fd00:	000b883a 	mov	r5,zero
 800fd04:	e13ffb17 	ldw	r4,-20(fp)
 800fd08:	800f55c0 	call	800f55c <alt_avalon_i2c_send_address>
 800fd0c:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
 800fd10:	e0bffa17 	ldw	r2,-24(fp)
 800fd14:	1000271e 	bne	r2,zero,800fdb4 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 800fd18:	00000f06 	br	800fd58 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 800fd1c:	e0bffc17 	ldw	r2,-16(fp)
 800fd20:	10800003 	ldbu	r2,0(r2)
 800fd24:	10803fcc 	andi	r2,r2,255
 800fd28:	000f883a 	mov	r7,zero
 800fd2c:	000d883a 	mov	r6,zero
 800fd30:	100b883a 	mov	r5,r2
 800fd34:	e13ffb17 	ldw	r4,-20(fp)
 800fd38:	800f4780 	call	800f478 <alt_avalon_i2c_cmd_write>
 800fd3c:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
 800fd40:	e0bffc17 	ldw	r2,-16(fp)
 800fd44:	10800044 	addi	r2,r2,1
 800fd48:	e0bffc15 	stw	r2,-16(fp)
            --size;
 800fd4c:	e0bffd17 	ldw	r2,-12(fp)
 800fd50:	10bfffc4 	addi	r2,r2,-1
 800fd54:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 800fd58:	e0bffd17 	ldw	r2,-12(fp)
 800fd5c:	108000b0 	cmpltui	r2,r2,2
 800fd60:	1000021e 	bne	r2,zero,800fd6c <alt_avalon_i2c_master_transmit+0xf4>
 800fd64:	e0bffa17 	ldw	r2,-24(fp)
 800fd68:	103fec26 	beq	r2,zero,800fd1c <__alt_data_end+0xfc00fd1c>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 800fd6c:	e0bffa17 	ldw	r2,-24(fp)
 800fd70:	1000101e 	bne	r2,zero,800fdb4 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 800fd74:	e0bffc17 	ldw	r2,-16(fp)
 800fd78:	10800003 	ldbu	r2,0(r2)
 800fd7c:	10803fcc 	andi	r2,r2,255
 800fd80:	e0ffff03 	ldbu	r3,-4(fp)
 800fd84:	180f883a 	mov	r7,r3
 800fd88:	000d883a 	mov	r6,zero
 800fd8c:	100b883a 	mov	r5,r2
 800fd90:	e13ffb17 	ldw	r4,-20(fp)
 800fd94:	800f4780 	call	800f478 <alt_avalon_i2c_cmd_write>
 800fd98:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
 800fd9c:	e0bffc17 	ldw	r2,-16(fp)
 800fda0:	10800044 	addi	r2,r2,1
 800fda4:	e0bffc15 	stw	r2,-16(fp)
            --size;
 800fda8:	e0bffd17 	ldw	r2,-12(fp)
 800fdac:	10bfffc4 	addi	r2,r2,-1
 800fdb0:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 800fdb4:	e0bfff03 	ldbu	r2,-4(fp)
 800fdb8:	1000101e 	bne	r2,zero,800fdfc <alt_avalon_i2c_master_transmit+0x184>
 800fdbc:	e0bffa17 	ldw	r2,-24(fp)
 800fdc0:	10001726 	beq	r2,zero,800fe20 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 800fdc4:	00000d06 	br	800fdfc <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
 800fdc8:	e0bff917 	ldw	r2,-28(fp)
 800fdcc:	108002a8 	cmpgeui	r2,r2,10
 800fdd0:	1000021e 	bne	r2,zero,800fddc <alt_avalon_i2c_master_transmit+0x164>
 800fdd4:	0109c404 	movi	r4,10000
 800fdd8:	80107900 	call	8010790 <alt_busy_sleep>
            if (--timeout == 0)
 800fddc:	e0bff917 	ldw	r2,-28(fp)
 800fde0:	10bfffc4 	addi	r2,r2,-1
 800fde4:	e0bff915 	stw	r2,-28(fp)
 800fde8:	e0bff917 	ldw	r2,-28(fp)
 800fdec:	1000031e 	bne	r2,zero,800fdfc <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 800fdf0:	00bfff84 	movi	r2,-2
 800fdf4:	e0bffa15 	stw	r2,-24(fp)
               break;
 800fdf8:	00000306 	br	800fe08 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 800fdfc:	e13ffb17 	ldw	r4,-20(fp)
 800fe00:	800f2e40 	call	800f2e4 <alt_avalon_i2c_is_busy>
 800fe04:	103ff01e 	bne	r2,zero,800fdc8 <__alt_data_end+0xfc00fdc8>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
 800fe08:	e0bffa04 	addi	r2,fp,-24
 800fe0c:	100b883a 	mov	r5,r2
 800fe10:	e13ffb17 	ldw	r4,-20(fp)
 800fe14:	800f6b80 	call	800f6b8 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 800fe18:	e13ffb17 	ldw	r4,-20(fp)
 800fe1c:	800ef8c0 	call	800ef8c <alt_avalon_i2c_disable>
    }


    return status;
 800fe20:	e0bffa17 	ldw	r2,-24(fp)
}
 800fe24:	e037883a 	mov	sp,fp
 800fe28:	dfc00117 	ldw	ra,4(sp)
 800fe2c:	df000017 	ldw	fp,0(sp)
 800fe30:	dec00204 	addi	sp,sp,8
 800fe34:	f800283a 	ret

0800fe38 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 800fe38:	defff604 	addi	sp,sp,-40
 800fe3c:	dfc00915 	stw	ra,36(sp)
 800fe40:	df000815 	stw	fp,32(sp)
 800fe44:	df000804 	addi	fp,sp,32
 800fe48:	e13ffb15 	stw	r4,-20(fp)
 800fe4c:	e17ffc15 	stw	r5,-16(fp)
 800fe50:	e1bffd15 	stw	r6,-12(fp)
 800fe54:	3807883a 	mov	r3,r7
 800fe58:	e0800217 	ldw	r2,8(fp)
 800fe5c:	e0fffe05 	stb	r3,-8(fp)
 800fe60:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 800fe64:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
 800fe68:	0149c404 	movi	r5,10000
 800fe6c:	e13ffd17 	ldw	r4,-12(fp)
 800fe70:	80012b40 	call	80012b4 <__mulsi3>
 800fe74:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 800fe78:	e0bffb17 	ldw	r2,-20(fp)
 800fe7c:	10800717 	ldw	r2,28(r2)
 800fe80:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
 800fe84:	e0bffd17 	ldw	r2,-12(fp)
 800fe88:	1000021e 	bne	r2,zero,800fe94 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
 800fe8c:	0005883a 	mov	r2,zero
 800fe90:	00006706 	br	8010030 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 800fe94:	e0bffb17 	ldw	r2,-20(fp)
 800fe98:	10c00617 	ldw	r3,24(r2)
 800fe9c:	00820074 	movhi	r2,2049
 800fea0:	10bade04 	addi	r2,r2,-5256
 800fea4:	18800226 	beq	r3,r2,800feb0 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 800fea8:	00bfff44 	movi	r2,-3
 800feac:	00006006 	br	8010030 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 800feb0:	e0bffe03 	ldbu	r2,-8(fp)
 800feb4:	10000a1e 	bne	r2,zero,800fee0 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 800feb8:	e13ffb17 	ldw	r4,-20(fp)
 800febc:	800eef40 	call	800eef4 <alt_avalon_i2c_enable>
 800fec0:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 800fec4:	e0bff817 	ldw	r2,-32(fp)
 800fec8:	10000226 	beq	r2,zero,800fed4 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
 800fecc:	e0bff817 	ldw	r2,-32(fp)
 800fed0:	00005706 	br	8010030 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800fed4:	01400704 	movi	r5,28
 800fed8:	e13ffb17 	ldw	r4,-20(fp)
 800fedc:	80104e00 	call	80104e0 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 800fee0:	e0bffe03 	ldbu	r2,-8(fp)
 800fee4:	100d883a 	mov	r6,r2
 800fee8:	000b883a 	mov	r5,zero
 800feec:	e13ffb17 	ldw	r4,-20(fp)
 800fef0:	800f55c0 	call	800f55c <alt_avalon_i2c_send_address>
 800fef4:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
 800fef8:	e0bff817 	ldw	r2,-32(fp)
 800fefc:	1000271e 	bne	r2,zero,800ff9c <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 800ff00:	00000f06 	br	800ff40 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 800ff04:	e0bffc17 	ldw	r2,-16(fp)
 800ff08:	10800003 	ldbu	r2,0(r2)
 800ff0c:	10803fcc 	andi	r2,r2,255
 800ff10:	000f883a 	mov	r7,zero
 800ff14:	000d883a 	mov	r6,zero
 800ff18:	100b883a 	mov	r5,r2
 800ff1c:	e13ffb17 	ldw	r4,-20(fp)
 800ff20:	800f4780 	call	800f478 <alt_avalon_i2c_cmd_write>
 800ff24:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
 800ff28:	e0bffc17 	ldw	r2,-16(fp)
 800ff2c:	10800044 	addi	r2,r2,1
 800ff30:	e0bffc15 	stw	r2,-16(fp)
            --size;
 800ff34:	e0bffd17 	ldw	r2,-12(fp)
 800ff38:	10bfffc4 	addi	r2,r2,-1
 800ff3c:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 800ff40:	e0bffd17 	ldw	r2,-12(fp)
 800ff44:	108000b0 	cmpltui	r2,r2,2
 800ff48:	1000021e 	bne	r2,zero,800ff54 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
 800ff4c:	e0bff817 	ldw	r2,-32(fp)
 800ff50:	103fec26 	beq	r2,zero,800ff04 <__alt_data_end+0xfc00ff04>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 800ff54:	e0bff817 	ldw	r2,-32(fp)
 800ff58:	1000101e 	bne	r2,zero,800ff9c <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 800ff5c:	e0bffc17 	ldw	r2,-16(fp)
 800ff60:	10800003 	ldbu	r2,0(r2)
 800ff64:	10803fcc 	andi	r2,r2,255
 800ff68:	e0ffff03 	ldbu	r3,-4(fp)
 800ff6c:	180f883a 	mov	r7,r3
 800ff70:	000d883a 	mov	r6,zero
 800ff74:	100b883a 	mov	r5,r2
 800ff78:	e13ffb17 	ldw	r4,-20(fp)
 800ff7c:	800f4780 	call	800f478 <alt_avalon_i2c_cmd_write>
 800ff80:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
 800ff84:	e0bffc17 	ldw	r2,-16(fp)
 800ff88:	10800044 	addi	r2,r2,1
 800ff8c:	e0bffc15 	stw	r2,-16(fp)
            --size;
 800ff90:	e0bffd17 	ldw	r2,-12(fp)
 800ff94:	10bfffc4 	addi	r2,r2,-1
 800ff98:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 800ff9c:	e0bff817 	ldw	r2,-32(fp)
 800ffa0:	10001426 	beq	r2,zero,800fff4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 800ffa4:	00000d06 	br	800ffdc <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
 800ffa8:	e0bff917 	ldw	r2,-28(fp)
 800ffac:	108002a8 	cmpgeui	r2,r2,10
 800ffb0:	1000021e 	bne	r2,zero,800ffbc <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
 800ffb4:	0109c404 	movi	r4,10000
 800ffb8:	80107900 	call	8010790 <alt_busy_sleep>
            if (--timeout == 0)
 800ffbc:	e0bff917 	ldw	r2,-28(fp)
 800ffc0:	10bfffc4 	addi	r2,r2,-1
 800ffc4:	e0bff915 	stw	r2,-28(fp)
 800ffc8:	e0bff917 	ldw	r2,-28(fp)
 800ffcc:	1000031e 	bne	r2,zero,800ffdc <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 800ffd0:	00bfff84 	movi	r2,-2
 800ffd4:	e0bff815 	stw	r2,-32(fp)
               break;
 800ffd8:	00000306 	br	800ffe8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 800ffdc:	e13ffb17 	ldw	r4,-20(fp)
 800ffe0:	800f2e40 	call	800f2e4 <alt_avalon_i2c_is_busy>
 800ffe4:	103ff01e 	bne	r2,zero,800ffa8 <__alt_data_end+0xfc00ffa8>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 800ffe8:	e13ffb17 	ldw	r4,-20(fp)
 800ffec:	800ef8c0 	call	800ef8c <alt_avalon_i2c_disable>
 800fff0:	00000e06 	br	801002c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
 800fff4:	e0bfff03 	ldbu	r2,-4(fp)
 800fff8:	10000c26 	beq	r2,zero,801002c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800fffc:	01400704 	movi	r5,28
 8010000:	e13ffb17 	ldw	r4,-20(fp)
 8010004:	80104e00 	call	80104e0 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
 8010008:	000b883a 	mov	r5,zero
 801000c:	e13ffb17 	ldw	r4,-20(fp)
 8010010:	80107280 	call	8010728 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
 8010014:	e0bffa17 	ldw	r2,-24(fp)
 8010018:	00c00044 	movi	r3,1
 801001c:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
 8010020:	01400044 	movi	r5,1
 8010024:	e13ffb17 	ldw	r4,-20(fp)
 8010028:	80105840 	call	8010584 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
 801002c:	e0bff817 	ldw	r2,-32(fp)
}
 8010030:	e037883a 	mov	sp,fp
 8010034:	dfc00117 	ldw	ra,4(sp)
 8010038:	df000017 	ldw	fp,0(sp)
 801003c:	dec00204 	addi	sp,sp,8
 8010040:	f800283a 	ret

08010044 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 8010044:	defff404 	addi	sp,sp,-48
 8010048:	dfc00b15 	stw	ra,44(sp)
 801004c:	df000a15 	stw	fp,40(sp)
 8010050:	df000a04 	addi	fp,sp,40
 8010054:	e13ffb15 	stw	r4,-20(fp)
 8010058:	e17ffc15 	stw	r5,-16(fp)
 801005c:	e1bffd15 	stw	r6,-12(fp)
 8010060:	3807883a 	mov	r3,r7
 8010064:	e0800217 	ldw	r2,8(fp)
 8010068:	e0fffe05 	stb	r3,-8(fp)
 801006c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8010070:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
 8010074:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
 8010078:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
 801007c:	e0bffd17 	ldw	r2,-12(fp)
 8010080:	1000021e 	bne	r2,zero,801008c <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
 8010084:	0005883a 	mov	r2,zero
 8010088:	00006d06 	br	8010240 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 801008c:	e0bffe03 	ldbu	r2,-8(fp)
 8010090:	10000a1e 	bne	r2,zero,80100bc <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 8010094:	e13ffb17 	ldw	r4,-20(fp)
 8010098:	800eef40 	call	800eef4 <alt_avalon_i2c_enable>
 801009c:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 80100a0:	e0bff917 	ldw	r2,-28(fp)
 80100a4:	10000226 	beq	r2,zero,80100b0 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
 80100a8:	e0bff917 	ldw	r2,-28(fp)
 80100ac:	00006406 	br	8010240 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 80100b0:	01400704 	movi	r5,28
 80100b4:	e13ffb17 	ldw	r4,-20(fp)
 80100b8:	80104e00 	call	80104e0 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 80100bc:	e0bffe03 	ldbu	r2,-8(fp)
 80100c0:	100d883a 	mov	r6,r2
 80100c4:	01400044 	movi	r5,1
 80100c8:	e13ffb17 	ldw	r4,-20(fp)
 80100cc:	800f55c0 	call	800f55c <alt_avalon_i2c_send_address>
 80100d0:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 80100d4:	e0bff917 	ldw	r2,-28(fp)
 80100d8:	1000341e 	bne	r2,zero,80101ac <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 80100dc:	00001906 	br	8010144 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 80100e0:	000f883a 	mov	r7,zero
 80100e4:	000d883a 	mov	r6,zero
 80100e8:	000b883a 	mov	r5,zero
 80100ec:	e13ffb17 	ldw	r4,-20(fp)
 80100f0:	800f4780 	call	800f478 <alt_avalon_i2c_cmd_write>
 80100f4:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
 80100f8:	e0bff817 	ldw	r2,-32(fp)
 80100fc:	10800044 	addi	r2,r2,1
 8010100:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
 8010104:	e0bff917 	ldw	r2,-28(fp)
 8010108:	10000e1e 	bne	r2,zero,8010144 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
 801010c:	e0bffa04 	addi	r2,fp,-24
 8010110:	100f883a 	mov	r7,r2
 8010114:	000d883a 	mov	r6,zero
 8010118:	e17ffc17 	ldw	r5,-16(fp)
 801011c:	e13ffb17 	ldw	r4,-20(fp)
 8010120:	800f3280 	call	800f328 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
 8010124:	e0bffa17 	ldw	r2,-24(fp)
 8010128:	e0fffc17 	ldw	r3,-16(fp)
 801012c:	1885883a 	add	r2,r3,r2
 8010130:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
 8010134:	e0bffa17 	ldw	r2,-24(fp)
 8010138:	e0fff717 	ldw	r3,-36(fp)
 801013c:	1885883a 	add	r2,r3,r2
 8010140:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 8010144:	e0bffd17 	ldw	r2,-12(fp)
 8010148:	10bfffc4 	addi	r2,r2,-1
 801014c:	e0fff817 	ldw	r3,-32(fp)
 8010150:	1880022e 	bgeu	r3,r2,801015c <alt_avalon_i2c_master_receive+0x118>
 8010154:	e0bff917 	ldw	r2,-28(fp)
 8010158:	103fe126 	beq	r2,zero,80100e0 <__alt_data_end+0xfc0100e0>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 801015c:	e0bff917 	ldw	r2,-28(fp)
 8010160:	1000121e 	bne	r2,zero,80101ac <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 8010164:	e0bfff03 	ldbu	r2,-4(fp)
 8010168:	100f883a 	mov	r7,r2
 801016c:	000d883a 	mov	r6,zero
 8010170:	000b883a 	mov	r5,zero
 8010174:	e13ffb17 	ldw	r4,-20(fp)
 8010178:	800f4780 	call	800f478 <alt_avalon_i2c_cmd_write>
 801017c:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 8010180:	00000a06 	br	80101ac <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
 8010184:	e17ffc17 	ldw	r5,-16(fp)
 8010188:	e13ffb17 	ldw	r4,-20(fp)
 801018c:	800f3d00 	call	800f3d0 <alt_avalon_i2c_rx_read>
 8010190:	e0bff915 	stw	r2,-28(fp)
        buffer++;
 8010194:	e0bffc17 	ldw	r2,-16(fp)
 8010198:	10800044 	addi	r2,r2,1
 801019c:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
 80101a0:	e0bff717 	ldw	r2,-36(fp)
 80101a4:	10800044 	addi	r2,r2,1
 80101a8:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 80101ac:	e0fff717 	ldw	r3,-36(fp)
 80101b0:	e0bffd17 	ldw	r2,-12(fp)
 80101b4:	1880022e 	bgeu	r3,r2,80101c0 <alt_avalon_i2c_master_receive+0x17c>
 80101b8:	e0bff917 	ldw	r2,-28(fp)
 80101bc:	103ff126 	beq	r2,zero,8010184 <__alt_data_end+0xfc010184>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 80101c0:	e0bfff03 	ldbu	r2,-4(fp)
 80101c4:	1000021e 	bne	r2,zero,80101d0 <alt_avalon_i2c_master_receive+0x18c>
 80101c8:	e0bff917 	ldw	r2,-28(fp)
 80101cc:	10001b26 	beq	r2,zero,801023c <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
 80101d0:	0149c404 	movi	r5,10000
 80101d4:	e13ffd17 	ldw	r4,-12(fp)
 80101d8:	80012b40 	call	80012b4 <__mulsi3>
 80101dc:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 80101e0:	00000d06 	br	8010218 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
 80101e4:	e0bff617 	ldw	r2,-40(fp)
 80101e8:	108002a8 	cmpgeui	r2,r2,10
 80101ec:	1000021e 	bne	r2,zero,80101f8 <alt_avalon_i2c_master_receive+0x1b4>
 80101f0:	0109c404 	movi	r4,10000
 80101f4:	80107900 	call	8010790 <alt_busy_sleep>
            if (--timeout == 0)
 80101f8:	e0bff617 	ldw	r2,-40(fp)
 80101fc:	10bfffc4 	addi	r2,r2,-1
 8010200:	e0bff615 	stw	r2,-40(fp)
 8010204:	e0bff617 	ldw	r2,-40(fp)
 8010208:	1000031e 	bne	r2,zero,8010218 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 801020c:	00bfff84 	movi	r2,-2
 8010210:	e0bff915 	stw	r2,-28(fp)
               break;
 8010214:	00000306 	br	8010224 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 8010218:	e13ffb17 	ldw	r4,-20(fp)
 801021c:	800f2e40 	call	800f2e4 <alt_avalon_i2c_is_busy>
 8010220:	103ff01e 	bne	r2,zero,80101e4 <__alt_data_end+0xfc0101e4>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
 8010224:	e0bff904 	addi	r2,fp,-28
 8010228:	100b883a 	mov	r5,r2
 801022c:	e13ffb17 	ldw	r4,-20(fp)
 8010230:	800f6b80 	call	800f6b8 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 8010234:	e13ffb17 	ldw	r4,-20(fp)
 8010238:	800ef8c0 	call	800ef8c <alt_avalon_i2c_disable>
    }

    return status;
 801023c:	e0bff917 	ldw	r2,-28(fp)
}
 8010240:	e037883a 	mov	sp,fp
 8010244:	dfc00117 	ldw	ra,4(sp)
 8010248:	df000017 	ldw	fp,0(sp)
 801024c:	dec00204 	addi	sp,sp,8
 8010250:	f800283a 	ret

08010254 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 8010254:	defff504 	addi	sp,sp,-44
 8010258:	dfc00a15 	stw	ra,40(sp)
 801025c:	df000915 	stw	fp,36(sp)
 8010260:	df000904 	addi	fp,sp,36
 8010264:	e13ffb15 	stw	r4,-20(fp)
 8010268:	e17ffc15 	stw	r5,-16(fp)
 801026c:	e1bffd15 	stw	r6,-12(fp)
 8010270:	3807883a 	mov	r3,r7
 8010274:	e0800217 	ldw	r2,8(fp)
 8010278:	e0fffe05 	stb	r3,-8(fp)
 801027c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8010280:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 8010284:	e0bffb17 	ldw	r2,-20(fp)
 8010288:	10800717 	ldw	r2,28(r2)
 801028c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
 8010290:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
 8010294:	e0bffd17 	ldw	r2,-12(fp)
 8010298:	1000021e 	bne	r2,zero,80102a4 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 801029c:	0005883a 	mov	r2,zero
 80102a0:	00006306 	br	8010430 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 80102a4:	e0bffb17 	ldw	r2,-20(fp)
 80102a8:	10c00617 	ldw	r3,24(r2)
 80102ac:	00820074 	movhi	r2,2049
 80102b0:	10bade04 	addi	r2,r2,-5256
 80102b4:	18800226 	beq	r3,r2,80102c0 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 80102b8:	00bfff44 	movi	r2,-3
 80102bc:	00005c06 	br	8010430 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 80102c0:	e0bffe03 	ldbu	r2,-8(fp)
 80102c4:	10000a1e 	bne	r2,zero,80102f0 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 80102c8:	e13ffb17 	ldw	r4,-20(fp)
 80102cc:	800eef40 	call	800eef4 <alt_avalon_i2c_enable>
 80102d0:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 80102d4:	e0bff717 	ldw	r2,-36(fp)
 80102d8:	10000226 	beq	r2,zero,80102e4 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
 80102dc:	e0bff717 	ldw	r2,-36(fp)
 80102e0:	00005306 	br	8010430 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 80102e4:	01400704 	movi	r5,28
 80102e8:	e13ffb17 	ldw	r4,-20(fp)
 80102ec:	80104e00 	call	80104e0 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 80102f0:	e0bffe03 	ldbu	r2,-8(fp)
 80102f4:	100d883a 	mov	r6,r2
 80102f8:	01400044 	movi	r5,1
 80102fc:	e13ffb17 	ldw	r4,-20(fp)
 8010300:	800f55c0 	call	800f55c <alt_avalon_i2c_send_address>
 8010304:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 8010308:	e0bff717 	ldw	r2,-36(fp)
 801030c:	1000191e 	bne	r2,zero,8010374 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 8010310:	00000906 	br	8010338 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 8010314:	000f883a 	mov	r7,zero
 8010318:	000d883a 	mov	r6,zero
 801031c:	000b883a 	mov	r5,zero
 8010320:	e13ffb17 	ldw	r4,-20(fp)
 8010324:	800f4780 	call	800f478 <alt_avalon_i2c_cmd_write>
 8010328:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
 801032c:	e0bff917 	ldw	r2,-28(fp)
 8010330:	10800044 	addi	r2,r2,1
 8010334:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 8010338:	e0bffd17 	ldw	r2,-12(fp)
 801033c:	10bfffc4 	addi	r2,r2,-1
 8010340:	e0fff917 	ldw	r3,-28(fp)
 8010344:	1880022e 	bgeu	r3,r2,8010350 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
 8010348:	e0bff717 	ldw	r2,-36(fp)
 801034c:	103ff126 	beq	r2,zero,8010314 <__alt_data_end+0xfc010314>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 8010350:	e0bff717 	ldw	r2,-36(fp)
 8010354:	1000071e 	bne	r2,zero,8010374 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 8010358:	e0bfff03 	ldbu	r2,-4(fp)
 801035c:	100f883a 	mov	r7,r2
 8010360:	000d883a 	mov	r6,zero
 8010364:	000b883a 	mov	r5,zero
 8010368:	e13ffb17 	ldw	r4,-20(fp)
 801036c:	800f4780 	call	800f478 <alt_avalon_i2c_cmd_write>
 8010370:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 8010374:	e0bff717 	ldw	r2,-36(fp)
 8010378:	10001826 	beq	r2,zero,80103dc <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
 801037c:	0149c404 	movi	r5,10000
 8010380:	e13ffd17 	ldw	r4,-12(fp)
 8010384:	80012b40 	call	80012b4 <__mulsi3>
 8010388:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 801038c:	00000d06 	br	80103c4 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
 8010390:	e0bff817 	ldw	r2,-32(fp)
 8010394:	108002a8 	cmpgeui	r2,r2,10
 8010398:	1000021e 	bne	r2,zero,80103a4 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
 801039c:	0109c404 	movi	r4,10000
 80103a0:	80107900 	call	8010790 <alt_busy_sleep>
            if (--timeout == 0)
 80103a4:	e0bff817 	ldw	r2,-32(fp)
 80103a8:	10bfffc4 	addi	r2,r2,-1
 80103ac:	e0bff815 	stw	r2,-32(fp)
 80103b0:	e0bff817 	ldw	r2,-32(fp)
 80103b4:	1000031e 	bne	r2,zero,80103c4 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 80103b8:	00bfff84 	movi	r2,-2
 80103bc:	e0bff715 	stw	r2,-36(fp)
               break;
 80103c0:	00000306 	br	80103d0 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 80103c4:	e13ffb17 	ldw	r4,-20(fp)
 80103c8:	800f2e40 	call	800f2e4 <alt_avalon_i2c_is_busy>
 80103cc:	103ff01e 	bne	r2,zero,8010390 <__alt_data_end+0xfc010390>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 80103d0:	e13ffb17 	ldw	r4,-20(fp)
 80103d4:	800ef8c0 	call	800ef8c <alt_avalon_i2c_disable>
 80103d8:	00001406 	br	801042c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
 80103dc:	e0bfff03 	ldbu	r2,-4(fp)
 80103e0:	10001226 	beq	r2,zero,801042c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 80103e4:	01400704 	movi	r5,28
 80103e8:	e13ffb17 	ldw	r4,-20(fp)
 80103ec:	80104e00 	call	80104e0 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
 80103f0:	000b883a 	mov	r5,zero
 80103f4:	e13ffb17 	ldw	r4,-20(fp)
 80103f8:	80106780 	call	8010678 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
 80103fc:	e0bffa17 	ldw	r2,-24(fp)
 8010400:	00c00084 	movi	r3,2
 8010404:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
 8010408:	e0bffa17 	ldw	r2,-24(fp)
 801040c:	e0fffc17 	ldw	r3,-16(fp)
 8010410:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
 8010414:	e0bffa17 	ldw	r2,-24(fp)
 8010418:	e0fffd17 	ldw	r3,-12(fp)
 801041c:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 8010420:	01400084 	movi	r5,2
 8010424:	e13ffb17 	ldw	r4,-20(fp)
 8010428:	80105840 	call	8010584 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
 801042c:	e0bff717 	ldw	r2,-36(fp)
}
 8010430:	e037883a 	mov	sp,fp
 8010434:	dfc00117 	ldw	ra,4(sp)
 8010438:	df000017 	ldw	fp,0(sp)
 801043c:	dec00204 	addi	sp,sp,8
 8010440:	f800283a 	ret

08010444 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
 8010444:	defffd04 	addi	sp,sp,-12
 8010448:	df000215 	stw	fp,8(sp)
 801044c:	df000204 	addi	fp,sp,8
 8010450:	e13ffe15 	stw	r4,-8(fp)
 8010454:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
 8010458:	e0bffe17 	ldw	r2,-8(fp)
 801045c:	10800317 	ldw	r2,12(r2)
 8010460:	10800404 	addi	r2,r2,16
 8010464:	10c00037 	ldwio	r3,0(r2)
 8010468:	e0bffe17 	ldw	r2,-8(fp)
 801046c:	10800317 	ldw	r2,12(r2)
 8010470:	10800304 	addi	r2,r2,12
 8010474:	10800037 	ldwio	r2,0(r2)
 8010478:	1884703a 	and	r2,r3,r2
 801047c:	1007883a 	mov	r3,r2
 8010480:	e0bfff17 	ldw	r2,-4(fp)
 8010484:	10c00015 	stw	r3,0(r2)
}
 8010488:	0001883a 	nop
 801048c:	e037883a 	mov	sp,fp
 8010490:	df000017 	ldw	fp,0(sp)
 8010494:	dec00104 	addi	sp,sp,4
 8010498:	f800283a 	ret

0801049c <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
 801049c:	defffd04 	addi	sp,sp,-12
 80104a0:	df000215 	stw	fp,8(sp)
 80104a4:	df000204 	addi	fp,sp,8
 80104a8:	e13ffe15 	stw	r4,-8(fp)
 80104ac:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
 80104b0:	e0bffe17 	ldw	r2,-8(fp)
 80104b4:	10800317 	ldw	r2,12(r2)
 80104b8:	10800404 	addi	r2,r2,16
 80104bc:	10800037 	ldwio	r2,0(r2)
 80104c0:	1007883a 	mov	r3,r2
 80104c4:	e0bfff17 	ldw	r2,-4(fp)
 80104c8:	10c00015 	stw	r3,0(r2)
}
 80104cc:	0001883a 	nop
 80104d0:	e037883a 	mov	sp,fp
 80104d4:	df000017 	ldw	fp,0(sp)
 80104d8:	dec00104 	addi	sp,sp,4
 80104dc:	f800283a 	ret

080104e0 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 80104e0:	defffd04 	addi	sp,sp,-12
 80104e4:	df000215 	stw	fp,8(sp)
 80104e8:	df000204 	addi	fp,sp,8
 80104ec:	e13ffe15 	stw	r4,-8(fp)
 80104f0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 80104f4:	e0bffe17 	ldw	r2,-8(fp)
 80104f8:	10800317 	ldw	r2,12(r2)
 80104fc:	10800404 	addi	r2,r2,16
 8010500:	e0ffff17 	ldw	r3,-4(fp)
 8010504:	10c00035 	stwio	r3,0(r2)
}
 8010508:	0001883a 	nop
 801050c:	e037883a 	mov	sp,fp
 8010510:	df000017 	ldw	fp,0(sp)
 8010514:	dec00104 	addi	sp,sp,4
 8010518:	f800283a 	ret

0801051c <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 801051c:	defffb04 	addi	sp,sp,-20
 8010520:	dfc00415 	stw	ra,16(sp)
 8010524:	df000315 	stw	fp,12(sp)
 8010528:	df000304 	addi	fp,sp,12
 801052c:	e13ffe15 	stw	r4,-8(fp)
 8010530:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 8010534:	e17ffd04 	addi	r5,fp,-12
 8010538:	e13ffe17 	ldw	r4,-8(fp)
 801053c:	80105e80 	call	80105e8 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
 8010540:	e0bfff17 	ldw	r2,-4(fp)
 8010544:	0086303a 	nor	r3,zero,r2
 8010548:	e0bffd17 	ldw	r2,-12(fp)
 801054c:	1884703a 	and	r2,r3,r2
 8010550:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 8010554:	e0bffe17 	ldw	r2,-8(fp)
 8010558:	10800317 	ldw	r2,12(r2)
 801055c:	10800304 	addi	r2,r2,12
 8010560:	e0fffd17 	ldw	r3,-12(fp)
 8010564:	18c007cc 	andi	r3,r3,31
 8010568:	10c00035 	stwio	r3,0(r2)
}
 801056c:	0001883a 	nop
 8010570:	e037883a 	mov	sp,fp
 8010574:	dfc00117 	ldw	ra,4(sp)
 8010578:	df000017 	ldw	fp,0(sp)
 801057c:	dec00204 	addi	sp,sp,8
 8010580:	f800283a 	ret

08010584 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 8010584:	defffb04 	addi	sp,sp,-20
 8010588:	dfc00415 	stw	ra,16(sp)
 801058c:	df000315 	stw	fp,12(sp)
 8010590:	df000304 	addi	fp,sp,12
 8010594:	e13ffe15 	stw	r4,-8(fp)
 8010598:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 801059c:	e17ffd04 	addi	r5,fp,-12
 80105a0:	e13ffe17 	ldw	r4,-8(fp)
 80105a4:	80105e80 	call	80105e8 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
 80105a8:	e0fffd17 	ldw	r3,-12(fp)
 80105ac:	e0bfff17 	ldw	r2,-4(fp)
 80105b0:	1884b03a 	or	r2,r3,r2
 80105b4:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 80105b8:	e0bffe17 	ldw	r2,-8(fp)
 80105bc:	10800317 	ldw	r2,12(r2)
 80105c0:	10800304 	addi	r2,r2,12
 80105c4:	e0fffd17 	ldw	r3,-12(fp)
 80105c8:	18c007cc 	andi	r3,r3,31
 80105cc:	10c00035 	stwio	r3,0(r2)
}
 80105d0:	0001883a 	nop
 80105d4:	e037883a 	mov	sp,fp
 80105d8:	dfc00117 	ldw	ra,4(sp)
 80105dc:	df000017 	ldw	fp,0(sp)
 80105e0:	dec00204 	addi	sp,sp,8
 80105e4:	f800283a 	ret

080105e8 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
 80105e8:	defffd04 	addi	sp,sp,-12
 80105ec:	df000215 	stw	fp,8(sp)
 80105f0:	df000204 	addi	fp,sp,8
 80105f4:	e13ffe15 	stw	r4,-8(fp)
 80105f8:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 80105fc:	e0bffe17 	ldw	r2,-8(fp)
 8010600:	10800317 	ldw	r2,12(r2)
 8010604:	10800304 	addi	r2,r2,12
 8010608:	10800037 	ldwio	r2,0(r2)
 801060c:	10c007cc 	andi	r3,r2,31
 8010610:	e0bfff17 	ldw	r2,-4(fp)
 8010614:	10c00015 	stw	r3,0(r2)
}
 8010618:	0001883a 	nop
 801061c:	e037883a 	mov	sp,fp
 8010620:	df000017 	ldw	fp,0(sp)
 8010624:	dec00104 	addi	sp,sp,4
 8010628:	f800283a 	ret

0801062c <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
 801062c:	defffd04 	addi	sp,sp,-12
 8010630:	df000215 	stw	fp,8(sp)
 8010634:	df000204 	addi	fp,sp,8
 8010638:	e13ffe15 	stw	r4,-8(fp)
 801063c:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
 8010640:	e0bffe17 	ldw	r2,-8(fp)
 8010644:	10800317 	ldw	r2,12(r2)
 8010648:	10800204 	addi	r2,r2,8
 801064c:	10800037 	ldwio	r2,0(r2)
 8010650:	10800c0c 	andi	r2,r2,48
 8010654:	1005d13a 	srai	r2,r2,4
 8010658:	1007883a 	mov	r3,r2
 801065c:	e0bfff17 	ldw	r2,-4(fp)
 8010660:	10c00015 	stw	r3,0(r2)
}
 8010664:	0001883a 	nop
 8010668:	e037883a 	mov	sp,fp
 801066c:	df000017 	ldw	fp,0(sp)
 8010670:	dec00104 	addi	sp,sp,4
 8010674:	f800283a 	ret

08010678 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
 8010678:	defffd04 	addi	sp,sp,-12
 801067c:	df000215 	stw	fp,8(sp)
 8010680:	df000204 	addi	fp,sp,8
 8010684:	e13ffe15 	stw	r4,-8(fp)
 8010688:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
 801068c:	e0bffe17 	ldw	r2,-8(fp)
 8010690:	10800317 	ldw	r2,12(r2)
 8010694:	10800204 	addi	r2,r2,8
 8010698:	e0fffe17 	ldw	r3,-8(fp)
 801069c:	18c00317 	ldw	r3,12(r3)
 80106a0:	18c00204 	addi	r3,r3,8
 80106a4:	18c00037 	ldwio	r3,0(r3)
 80106a8:	1809883a 	mov	r4,r3
 80106ac:	00fff3c4 	movi	r3,-49
 80106b0:	20c8703a 	and	r4,r4,r3
 80106b4:	e0ffff17 	ldw	r3,-4(fp)
 80106b8:	1806913a 	slli	r3,r3,4
 80106bc:	18c00c0c 	andi	r3,r3,48
 80106c0:	20c6b03a 	or	r3,r4,r3
 80106c4:	10c00035 	stwio	r3,0(r2)
}
 80106c8:	0001883a 	nop
 80106cc:	e037883a 	mov	sp,fp
 80106d0:	df000017 	ldw	fp,0(sp)
 80106d4:	dec00104 	addi	sp,sp,4
 80106d8:	f800283a 	ret

080106dc <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
 80106dc:	defffd04 	addi	sp,sp,-12
 80106e0:	df000215 	stw	fp,8(sp)
 80106e4:	df000204 	addi	fp,sp,8
 80106e8:	e13ffe15 	stw	r4,-8(fp)
 80106ec:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
 80106f0:	e0bffe17 	ldw	r2,-8(fp)
 80106f4:	10800317 	ldw	r2,12(r2)
 80106f8:	10800204 	addi	r2,r2,8
 80106fc:	10800037 	ldwio	r2,0(r2)
 8010700:	1080030c 	andi	r2,r2,12
 8010704:	1005d0ba 	srai	r2,r2,2
 8010708:	1007883a 	mov	r3,r2
 801070c:	e0bfff17 	ldw	r2,-4(fp)
 8010710:	10c00015 	stw	r3,0(r2)
}
 8010714:	0001883a 	nop
 8010718:	e037883a 	mov	sp,fp
 801071c:	df000017 	ldw	fp,0(sp)
 8010720:	dec00104 	addi	sp,sp,4
 8010724:	f800283a 	ret

08010728 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
 8010728:	defffd04 	addi	sp,sp,-12
 801072c:	df000215 	stw	fp,8(sp)
 8010730:	df000204 	addi	fp,sp,8
 8010734:	e13ffe15 	stw	r4,-8(fp)
 8010738:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
 801073c:	e0bffe17 	ldw	r2,-8(fp)
 8010740:	10800317 	ldw	r2,12(r2)
 8010744:	10c00204 	addi	r3,r2,8
 8010748:	e0bffe17 	ldw	r2,-8(fp)
 801074c:	10800317 	ldw	r2,12(r2)
 8010750:	10800204 	addi	r2,r2,8
 8010754:	10800037 	ldwio	r2,0(r2)
 8010758:	1009883a 	mov	r4,r2
 801075c:	00bffcc4 	movi	r2,-13
 8010760:	2088703a 	and	r4,r4,r2
 8010764:	e0bfff17 	ldw	r2,-4(fp)
 8010768:	1085883a 	add	r2,r2,r2
 801076c:	1085883a 	add	r2,r2,r2
 8010770:	1080030c 	andi	r2,r2,12
 8010774:	2084b03a 	or	r2,r4,r2
 8010778:	18800035 	stwio	r2,0(r3)
}
 801077c:	0001883a 	nop
 8010780:	e037883a 	mov	sp,fp
 8010784:	df000017 	ldw	fp,0(sp)
 8010788:	dec00104 	addi	sp,sp,4
 801078c:	f800283a 	ret

08010790 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8010790:	defffa04 	addi	sp,sp,-24
 8010794:	dfc00515 	stw	ra,20(sp)
 8010798:	df000415 	stw	fp,16(sp)
 801079c:	df000404 	addi	fp,sp,16
 80107a0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 80107a4:	00800244 	movi	r2,9
 80107a8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 80107ac:	014003f4 	movhi	r5,15
 80107b0:	29509004 	addi	r5,r5,16960
 80107b4:	e13ffd17 	ldw	r4,-12(fp)
 80107b8:	80012b40 	call	80012b4 <__mulsi3>
 80107bc:	100b883a 	mov	r5,r2
 80107c0:	0100bef4 	movhi	r4,763
 80107c4:	213c2004 	addi	r4,r4,-3968
 80107c8:	800b8940 	call	800b894 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 80107cc:	100b883a 	mov	r5,r2
 80107d0:	01200034 	movhi	r4,32768
 80107d4:	213fffc4 	addi	r4,r4,-1
 80107d8:	800b8940 	call	800b894 <__udivsi3>
 80107dc:	100b883a 	mov	r5,r2
 80107e0:	e13fff17 	ldw	r4,-4(fp)
 80107e4:	800b8940 	call	800b894 <__udivsi3>
 80107e8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 80107ec:	e0bffe17 	ldw	r2,-8(fp)
 80107f0:	10002a26 	beq	r2,zero,801089c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 80107f4:	e03ffc15 	stw	zero,-16(fp)
 80107f8:	00001706 	br	8010858 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 80107fc:	00a00034 	movhi	r2,32768
 8010800:	10bfffc4 	addi	r2,r2,-1
 8010804:	10bfffc4 	addi	r2,r2,-1
 8010808:	103ffe1e 	bne	r2,zero,8010804 <__alt_data_end+0xfc010804>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 801080c:	014003f4 	movhi	r5,15
 8010810:	29509004 	addi	r5,r5,16960
 8010814:	e13ffd17 	ldw	r4,-12(fp)
 8010818:	80012b40 	call	80012b4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 801081c:	100b883a 	mov	r5,r2
 8010820:	0100bef4 	movhi	r4,763
 8010824:	213c2004 	addi	r4,r4,-3968
 8010828:	800b8940 	call	800b894 <__udivsi3>
 801082c:	100b883a 	mov	r5,r2
 8010830:	01200034 	movhi	r4,32768
 8010834:	213fffc4 	addi	r4,r4,-1
 8010838:	800b8940 	call	800b894 <__udivsi3>
 801083c:	1007883a 	mov	r3,r2
 8010840:	e0bfff17 	ldw	r2,-4(fp)
 8010844:	10c5c83a 	sub	r2,r2,r3
 8010848:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 801084c:	e0bffc17 	ldw	r2,-16(fp)
 8010850:	10800044 	addi	r2,r2,1
 8010854:	e0bffc15 	stw	r2,-16(fp)
 8010858:	e0fffc17 	ldw	r3,-16(fp)
 801085c:	e0bffe17 	ldw	r2,-8(fp)
 8010860:	18bfe616 	blt	r3,r2,80107fc <__alt_data_end+0xfc0107fc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8010864:	014003f4 	movhi	r5,15
 8010868:	29509004 	addi	r5,r5,16960
 801086c:	e13ffd17 	ldw	r4,-12(fp)
 8010870:	80012b40 	call	80012b4 <__mulsi3>
 8010874:	100b883a 	mov	r5,r2
 8010878:	0100bef4 	movhi	r4,763
 801087c:	213c2004 	addi	r4,r4,-3968
 8010880:	800b8940 	call	800b894 <__udivsi3>
 8010884:	e17fff17 	ldw	r5,-4(fp)
 8010888:	1009883a 	mov	r4,r2
 801088c:	80012b40 	call	80012b4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8010890:	10bfffc4 	addi	r2,r2,-1
 8010894:	103ffe1e 	bne	r2,zero,8010890 <__alt_data_end+0xfc010890>
 8010898:	00000d06 	br	80108d0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 801089c:	014003f4 	movhi	r5,15
 80108a0:	29509004 	addi	r5,r5,16960
 80108a4:	e13ffd17 	ldw	r4,-12(fp)
 80108a8:	80012b40 	call	80012b4 <__mulsi3>
 80108ac:	100b883a 	mov	r5,r2
 80108b0:	0100bef4 	movhi	r4,763
 80108b4:	213c2004 	addi	r4,r4,-3968
 80108b8:	800b8940 	call	800b894 <__udivsi3>
 80108bc:	e17fff17 	ldw	r5,-4(fp)
 80108c0:	1009883a 	mov	r4,r2
 80108c4:	80012b40 	call	80012b4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80108c8:	10bfffc4 	addi	r2,r2,-1
 80108cc:	00bffe16 	blt	zero,r2,80108c8 <__alt_data_end+0xfc0108c8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 80108d0:	0005883a 	mov	r2,zero
}
 80108d4:	e037883a 	mov	sp,fp
 80108d8:	dfc00117 	ldw	ra,4(sp)
 80108dc:	df000017 	ldw	fp,0(sp)
 80108e0:	dec00204 	addi	sp,sp,8
 80108e4:	f800283a 	ret

080108e8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 80108e8:	deffff04 	addi	sp,sp,-4
 80108ec:	df000015 	stw	fp,0(sp)
 80108f0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80108f4:	0001883a 	nop
 80108f8:	e037883a 	mov	sp,fp
 80108fc:	df000017 	ldw	fp,0(sp)
 8010900:	dec00104 	addi	sp,sp,4
 8010904:	f800283a 	ret

08010908 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010908:	defffe04 	addi	sp,sp,-8
 801090c:	dfc00115 	stw	ra,4(sp)
 8010910:	df000015 	stw	fp,0(sp)
 8010914:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010918:	d0a00b17 	ldw	r2,-32724(gp)
 801091c:	10000326 	beq	r2,zero,801092c <alt_get_errno+0x24>
 8010920:	d0a00b17 	ldw	r2,-32724(gp)
 8010924:	103ee83a 	callr	r2
 8010928:	00000106 	br	8010930 <alt_get_errno+0x28>
 801092c:	d0a2c704 	addi	r2,gp,-29924
}
 8010930:	e037883a 	mov	sp,fp
 8010934:	dfc00117 	ldw	ra,4(sp)
 8010938:	df000017 	ldw	fp,0(sp)
 801093c:	dec00204 	addi	sp,sp,8
 8010940:	f800283a 	ret

08010944 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8010944:	defffa04 	addi	sp,sp,-24
 8010948:	dfc00515 	stw	ra,20(sp)
 801094c:	df000415 	stw	fp,16(sp)
 8010950:	df000404 	addi	fp,sp,16
 8010954:	e13ffe15 	stw	r4,-8(fp)
 8010958:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 801095c:	e0bffe17 	ldw	r2,-8(fp)
 8010960:	10000326 	beq	r2,zero,8010970 <alt_dev_llist_insert+0x2c>
 8010964:	e0bffe17 	ldw	r2,-8(fp)
 8010968:	10800217 	ldw	r2,8(r2)
 801096c:	1000061e 	bne	r2,zero,8010988 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8010970:	80109080 	call	8010908 <alt_get_errno>
 8010974:	1007883a 	mov	r3,r2
 8010978:	00800584 	movi	r2,22
 801097c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8010980:	00bffa84 	movi	r2,-22
 8010984:	00001306 	br	80109d4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8010988:	e0bffe17 	ldw	r2,-8(fp)
 801098c:	e0ffff17 	ldw	r3,-4(fp)
 8010990:	e0fffc15 	stw	r3,-16(fp)
 8010994:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8010998:	e0bffd17 	ldw	r2,-12(fp)
 801099c:	e0fffc17 	ldw	r3,-16(fp)
 80109a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80109a4:	e0bffc17 	ldw	r2,-16(fp)
 80109a8:	10c00017 	ldw	r3,0(r2)
 80109ac:	e0bffd17 	ldw	r2,-12(fp)
 80109b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80109b4:	e0bffc17 	ldw	r2,-16(fp)
 80109b8:	10800017 	ldw	r2,0(r2)
 80109bc:	e0fffd17 	ldw	r3,-12(fp)
 80109c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80109c4:	e0bffc17 	ldw	r2,-16(fp)
 80109c8:	e0fffd17 	ldw	r3,-12(fp)
 80109cc:	10c00015 	stw	r3,0(r2)

  return 0;  
 80109d0:	0005883a 	mov	r2,zero
}
 80109d4:	e037883a 	mov	sp,fp
 80109d8:	dfc00117 	ldw	ra,4(sp)
 80109dc:	df000017 	ldw	fp,0(sp)
 80109e0:	dec00204 	addi	sp,sp,8
 80109e4:	f800283a 	ret

080109e8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 80109e8:	defffd04 	addi	sp,sp,-12
 80109ec:	dfc00215 	stw	ra,8(sp)
 80109f0:	df000115 	stw	fp,4(sp)
 80109f4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80109f8:	00820074 	movhi	r2,2049
 80109fc:	10858604 	addi	r2,r2,5656
 8010a00:	e0bfff15 	stw	r2,-4(fp)
 8010a04:	00000606 	br	8010a20 <_do_ctors+0x38>
        (*ctor) (); 
 8010a08:	e0bfff17 	ldw	r2,-4(fp)
 8010a0c:	10800017 	ldw	r2,0(r2)
 8010a10:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8010a14:	e0bfff17 	ldw	r2,-4(fp)
 8010a18:	10bfff04 	addi	r2,r2,-4
 8010a1c:	e0bfff15 	stw	r2,-4(fp)
 8010a20:	e0ffff17 	ldw	r3,-4(fp)
 8010a24:	00820074 	movhi	r2,2049
 8010a28:	10858704 	addi	r2,r2,5660
 8010a2c:	18bff62e 	bgeu	r3,r2,8010a08 <__alt_data_end+0xfc010a08>
        (*ctor) (); 
}
 8010a30:	0001883a 	nop
 8010a34:	e037883a 	mov	sp,fp
 8010a38:	dfc00117 	ldw	ra,4(sp)
 8010a3c:	df000017 	ldw	fp,0(sp)
 8010a40:	dec00204 	addi	sp,sp,8
 8010a44:	f800283a 	ret

08010a48 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8010a48:	defffd04 	addi	sp,sp,-12
 8010a4c:	dfc00215 	stw	ra,8(sp)
 8010a50:	df000115 	stw	fp,4(sp)
 8010a54:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8010a58:	00820074 	movhi	r2,2049
 8010a5c:	10858604 	addi	r2,r2,5656
 8010a60:	e0bfff15 	stw	r2,-4(fp)
 8010a64:	00000606 	br	8010a80 <_do_dtors+0x38>
        (*dtor) (); 
 8010a68:	e0bfff17 	ldw	r2,-4(fp)
 8010a6c:	10800017 	ldw	r2,0(r2)
 8010a70:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8010a74:	e0bfff17 	ldw	r2,-4(fp)
 8010a78:	10bfff04 	addi	r2,r2,-4
 8010a7c:	e0bfff15 	stw	r2,-4(fp)
 8010a80:	e0ffff17 	ldw	r3,-4(fp)
 8010a84:	00820074 	movhi	r2,2049
 8010a88:	10858704 	addi	r2,r2,5660
 8010a8c:	18bff62e 	bgeu	r3,r2,8010a68 <__alt_data_end+0xfc010a68>
        (*dtor) (); 
}
 8010a90:	0001883a 	nop
 8010a94:	e037883a 	mov	sp,fp
 8010a98:	dfc00117 	ldw	ra,4(sp)
 8010a9c:	df000017 	ldw	fp,0(sp)
 8010aa0:	dec00204 	addi	sp,sp,8
 8010aa4:	f800283a 	ret

08010aa8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8010aa8:	defffa04 	addi	sp,sp,-24
 8010aac:	dfc00515 	stw	ra,20(sp)
 8010ab0:	df000415 	stw	fp,16(sp)
 8010ab4:	df000404 	addi	fp,sp,16
 8010ab8:	e13ffe15 	stw	r4,-8(fp)
 8010abc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8010ac0:	e0bfff17 	ldw	r2,-4(fp)
 8010ac4:	10800017 	ldw	r2,0(r2)
 8010ac8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8010acc:	e13ffe17 	ldw	r4,-8(fp)
 8010ad0:	800141c0 	call	800141c <strlen>
 8010ad4:	10800044 	addi	r2,r2,1
 8010ad8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010adc:	00000d06 	br	8010b14 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8010ae0:	e0bffc17 	ldw	r2,-16(fp)
 8010ae4:	10800217 	ldw	r2,8(r2)
 8010ae8:	e0fffd17 	ldw	r3,-12(fp)
 8010aec:	180d883a 	mov	r6,r3
 8010af0:	e17ffe17 	ldw	r5,-8(fp)
 8010af4:	1009883a 	mov	r4,r2
 8010af8:	801116c0 	call	801116c <memcmp>
 8010afc:	1000021e 	bne	r2,zero,8010b08 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8010b00:	e0bffc17 	ldw	r2,-16(fp)
 8010b04:	00000706 	br	8010b24 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8010b08:	e0bffc17 	ldw	r2,-16(fp)
 8010b0c:	10800017 	ldw	r2,0(r2)
 8010b10:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010b14:	e0fffc17 	ldw	r3,-16(fp)
 8010b18:	e0bfff17 	ldw	r2,-4(fp)
 8010b1c:	18bff01e 	bne	r3,r2,8010ae0 <__alt_data_end+0xfc010ae0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8010b20:	0005883a 	mov	r2,zero
}
 8010b24:	e037883a 	mov	sp,fp
 8010b28:	dfc00117 	ldw	ra,4(sp)
 8010b2c:	df000017 	ldw	fp,0(sp)
 8010b30:	dec00204 	addi	sp,sp,8
 8010b34:	f800283a 	ret

08010b38 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8010b38:	deffff04 	addi	sp,sp,-4
 8010b3c:	df000015 	stw	fp,0(sp)
 8010b40:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8010b44:	0001883a 	nop
 8010b48:	e037883a 	mov	sp,fp
 8010b4c:	df000017 	ldw	fp,0(sp)
 8010b50:	dec00104 	addi	sp,sp,4
 8010b54:	f800283a 	ret

08010b58 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8010b58:	defff904 	addi	sp,sp,-28
 8010b5c:	dfc00615 	stw	ra,24(sp)
 8010b60:	df000515 	stw	fp,20(sp)
 8010b64:	df000504 	addi	fp,sp,20
 8010b68:	e13ffc15 	stw	r4,-16(fp)
 8010b6c:	e17ffd15 	stw	r5,-12(fp)
 8010b70:	e1bffe15 	stw	r6,-8(fp)
 8010b74:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8010b78:	e0800217 	ldw	r2,8(fp)
 8010b7c:	d8800015 	stw	r2,0(sp)
 8010b80:	e1ffff17 	ldw	r7,-4(fp)
 8010b84:	e1bffe17 	ldw	r6,-8(fp)
 8010b88:	e17ffd17 	ldw	r5,-12(fp)
 8010b8c:	e13ffc17 	ldw	r4,-16(fp)
 8010b90:	8010d080 	call	8010d08 <alt_iic_isr_register>
}  
 8010b94:	e037883a 	mov	sp,fp
 8010b98:	dfc00117 	ldw	ra,4(sp)
 8010b9c:	df000017 	ldw	fp,0(sp)
 8010ba0:	dec00204 	addi	sp,sp,8
 8010ba4:	f800283a 	ret

08010ba8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8010ba8:	defff904 	addi	sp,sp,-28
 8010bac:	df000615 	stw	fp,24(sp)
 8010bb0:	df000604 	addi	fp,sp,24
 8010bb4:	e13ffe15 	stw	r4,-8(fp)
 8010bb8:	e17fff15 	stw	r5,-4(fp)
 8010bbc:	e0bfff17 	ldw	r2,-4(fp)
 8010bc0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010bc4:	0005303a 	rdctl	r2,status
 8010bc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010bcc:	e0fffb17 	ldw	r3,-20(fp)
 8010bd0:	00bfff84 	movi	r2,-2
 8010bd4:	1884703a 	and	r2,r3,r2
 8010bd8:	1001703a 	wrctl	status,r2
  
  return context;
 8010bdc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8010be0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8010be4:	00c00044 	movi	r3,1
 8010be8:	e0bffa17 	ldw	r2,-24(fp)
 8010bec:	1884983a 	sll	r2,r3,r2
 8010bf0:	1007883a 	mov	r3,r2
 8010bf4:	d0a2cb17 	ldw	r2,-29908(gp)
 8010bf8:	1884b03a 	or	r2,r3,r2
 8010bfc:	d0a2cb15 	stw	r2,-29908(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8010c00:	d0a2cb17 	ldw	r2,-29908(gp)
 8010c04:	100170fa 	wrctl	ienable,r2
 8010c08:	e0bffc17 	ldw	r2,-16(fp)
 8010c0c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010c10:	e0bffd17 	ldw	r2,-12(fp)
 8010c14:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8010c18:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8010c1c:	0001883a 	nop
}
 8010c20:	e037883a 	mov	sp,fp
 8010c24:	df000017 	ldw	fp,0(sp)
 8010c28:	dec00104 	addi	sp,sp,4
 8010c2c:	f800283a 	ret

08010c30 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8010c30:	defff904 	addi	sp,sp,-28
 8010c34:	df000615 	stw	fp,24(sp)
 8010c38:	df000604 	addi	fp,sp,24
 8010c3c:	e13ffe15 	stw	r4,-8(fp)
 8010c40:	e17fff15 	stw	r5,-4(fp)
 8010c44:	e0bfff17 	ldw	r2,-4(fp)
 8010c48:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010c4c:	0005303a 	rdctl	r2,status
 8010c50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010c54:	e0fffb17 	ldw	r3,-20(fp)
 8010c58:	00bfff84 	movi	r2,-2
 8010c5c:	1884703a 	and	r2,r3,r2
 8010c60:	1001703a 	wrctl	status,r2
  
  return context;
 8010c64:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8010c68:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8010c6c:	00c00044 	movi	r3,1
 8010c70:	e0bffa17 	ldw	r2,-24(fp)
 8010c74:	1884983a 	sll	r2,r3,r2
 8010c78:	0084303a 	nor	r2,zero,r2
 8010c7c:	1007883a 	mov	r3,r2
 8010c80:	d0a2cb17 	ldw	r2,-29908(gp)
 8010c84:	1884703a 	and	r2,r3,r2
 8010c88:	d0a2cb15 	stw	r2,-29908(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8010c8c:	d0a2cb17 	ldw	r2,-29908(gp)
 8010c90:	100170fa 	wrctl	ienable,r2
 8010c94:	e0bffc17 	ldw	r2,-16(fp)
 8010c98:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010c9c:	e0bffd17 	ldw	r2,-12(fp)
 8010ca0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8010ca4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8010ca8:	0001883a 	nop
}
 8010cac:	e037883a 	mov	sp,fp
 8010cb0:	df000017 	ldw	fp,0(sp)
 8010cb4:	dec00104 	addi	sp,sp,4
 8010cb8:	f800283a 	ret

08010cbc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8010cbc:	defffc04 	addi	sp,sp,-16
 8010cc0:	df000315 	stw	fp,12(sp)
 8010cc4:	df000304 	addi	fp,sp,12
 8010cc8:	e13ffe15 	stw	r4,-8(fp)
 8010ccc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8010cd0:	000530fa 	rdctl	r2,ienable
 8010cd4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8010cd8:	00c00044 	movi	r3,1
 8010cdc:	e0bfff17 	ldw	r2,-4(fp)
 8010ce0:	1884983a 	sll	r2,r3,r2
 8010ce4:	1007883a 	mov	r3,r2
 8010ce8:	e0bffd17 	ldw	r2,-12(fp)
 8010cec:	1884703a 	and	r2,r3,r2
 8010cf0:	1004c03a 	cmpne	r2,r2,zero
 8010cf4:	10803fcc 	andi	r2,r2,255
}
 8010cf8:	e037883a 	mov	sp,fp
 8010cfc:	df000017 	ldw	fp,0(sp)
 8010d00:	dec00104 	addi	sp,sp,4
 8010d04:	f800283a 	ret

08010d08 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8010d08:	defff504 	addi	sp,sp,-44
 8010d0c:	dfc00a15 	stw	ra,40(sp)
 8010d10:	df000915 	stw	fp,36(sp)
 8010d14:	df000904 	addi	fp,sp,36
 8010d18:	e13ffc15 	stw	r4,-16(fp)
 8010d1c:	e17ffd15 	stw	r5,-12(fp)
 8010d20:	e1bffe15 	stw	r6,-8(fp)
 8010d24:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8010d28:	00bffa84 	movi	r2,-22
 8010d2c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8010d30:	e0bffd17 	ldw	r2,-12(fp)
 8010d34:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8010d38:	e0bff817 	ldw	r2,-32(fp)
 8010d3c:	10800808 	cmpgei	r2,r2,32
 8010d40:	1000271e 	bne	r2,zero,8010de0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010d44:	0005303a 	rdctl	r2,status
 8010d48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010d4c:	e0fffb17 	ldw	r3,-20(fp)
 8010d50:	00bfff84 	movi	r2,-2
 8010d54:	1884703a 	and	r2,r3,r2
 8010d58:	1001703a 	wrctl	status,r2
  
  return context;
 8010d5c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8010d60:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8010d64:	00820074 	movhi	r2,2049
 8010d68:	108c3904 	addi	r2,r2,12516
 8010d6c:	e0fff817 	ldw	r3,-32(fp)
 8010d70:	180690fa 	slli	r3,r3,3
 8010d74:	10c5883a 	add	r2,r2,r3
 8010d78:	e0fffe17 	ldw	r3,-8(fp)
 8010d7c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8010d80:	00820074 	movhi	r2,2049
 8010d84:	108c3904 	addi	r2,r2,12516
 8010d88:	e0fff817 	ldw	r3,-32(fp)
 8010d8c:	180690fa 	slli	r3,r3,3
 8010d90:	10c5883a 	add	r2,r2,r3
 8010d94:	10800104 	addi	r2,r2,4
 8010d98:	e0ffff17 	ldw	r3,-4(fp)
 8010d9c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8010da0:	e0bffe17 	ldw	r2,-8(fp)
 8010da4:	10000526 	beq	r2,zero,8010dbc <alt_iic_isr_register+0xb4>
 8010da8:	e0bff817 	ldw	r2,-32(fp)
 8010dac:	100b883a 	mov	r5,r2
 8010db0:	e13ffc17 	ldw	r4,-16(fp)
 8010db4:	8010ba80 	call	8010ba8 <alt_ic_irq_enable>
 8010db8:	00000406 	br	8010dcc <alt_iic_isr_register+0xc4>
 8010dbc:	e0bff817 	ldw	r2,-32(fp)
 8010dc0:	100b883a 	mov	r5,r2
 8010dc4:	e13ffc17 	ldw	r4,-16(fp)
 8010dc8:	8010c300 	call	8010c30 <alt_ic_irq_disable>
 8010dcc:	e0bff715 	stw	r2,-36(fp)
 8010dd0:	e0bffa17 	ldw	r2,-24(fp)
 8010dd4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010dd8:	e0bff917 	ldw	r2,-28(fp)
 8010ddc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8010de0:	e0bff717 	ldw	r2,-36(fp)
}
 8010de4:	e037883a 	mov	sp,fp
 8010de8:	dfc00117 	ldw	ra,4(sp)
 8010dec:	df000017 	ldw	fp,0(sp)
 8010df0:	dec00204 	addi	sp,sp,8
 8010df4:	f800283a 	ret

08010df8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 8010df8:	defff204 	addi	sp,sp,-56
 8010dfc:	dfc00a15 	stw	ra,40(sp)
 8010e00:	df000915 	stw	fp,36(sp)
 8010e04:	df000904 	addi	fp,sp,36
 8010e08:	e13fff15 	stw	r4,-4(fp)
 8010e0c:	e1400215 	stw	r5,8(fp)
 8010e10:	e1800315 	stw	r6,12(fp)
 8010e14:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 8010e18:	e0800204 	addi	r2,fp,8
 8010e1c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 8010e20:	e0bfff17 	ldw	r2,-4(fp)
 8010e24:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 8010e28:	00006f06 	br	8010fe8 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 8010e2c:	e0bff807 	ldb	r2,-32(fp)
 8010e30:	10800960 	cmpeqi	r2,r2,37
 8010e34:	1000041e 	bne	r2,zero,8010e48 <alt_printf+0x50>
        {
            alt_putchar(c);
 8010e38:	e0bff807 	ldb	r2,-32(fp)
 8010e3c:	1009883a 	mov	r4,r2
 8010e40:	80110240 	call	8011024 <alt_putchar>
 8010e44:	00006806 	br	8010fe8 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 8010e48:	e0bff717 	ldw	r2,-36(fp)
 8010e4c:	10c00044 	addi	r3,r2,1
 8010e50:	e0fff715 	stw	r3,-36(fp)
 8010e54:	10800003 	ldbu	r2,0(r2)
 8010e58:	e0bff805 	stb	r2,-32(fp)
 8010e5c:	e0bff807 	ldb	r2,-32(fp)
 8010e60:	10006926 	beq	r2,zero,8011008 <alt_printf+0x210>
            {
                if (c == '%')
 8010e64:	e0bff807 	ldb	r2,-32(fp)
 8010e68:	10800958 	cmpnei	r2,r2,37
 8010e6c:	1000041e 	bne	r2,zero,8010e80 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 8010e70:	e0bff807 	ldb	r2,-32(fp)
 8010e74:	1009883a 	mov	r4,r2
 8010e78:	80110240 	call	8011024 <alt_putchar>
 8010e7c:	00005a06 	br	8010fe8 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 8010e80:	e0bff807 	ldb	r2,-32(fp)
 8010e84:	108018d8 	cmpnei	r2,r2,99
 8010e88:	1000081e 	bne	r2,zero,8010eac <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 8010e8c:	e0bffe17 	ldw	r2,-8(fp)
 8010e90:	10c00104 	addi	r3,r2,4
 8010e94:	e0fffe15 	stw	r3,-8(fp)
 8010e98:	10800017 	ldw	r2,0(r2)
 8010e9c:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 8010ea0:	e13ffd17 	ldw	r4,-12(fp)
 8010ea4:	80110240 	call	8011024 <alt_putchar>
 8010ea8:	00004f06 	br	8010fe8 <alt_printf+0x1f0>
                }
                else if (c == 'x')
 8010eac:	e0bff807 	ldb	r2,-32(fp)
 8010eb0:	10801e18 	cmpnei	r2,r2,120
 8010eb4:	1000341e 	bne	r2,zero,8010f88 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 8010eb8:	e0bffe17 	ldw	r2,-8(fp)
 8010ebc:	10c00104 	addi	r3,r2,4
 8010ec0:	e0fffe15 	stw	r3,-8(fp)
 8010ec4:	10800017 	ldw	r2,0(r2)
 8010ec8:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 8010ecc:	e0bffb17 	ldw	r2,-20(fp)
 8010ed0:	1000031e 	bne	r2,zero,8010ee0 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 8010ed4:	01000c04 	movi	r4,48
 8010ed8:	80110240 	call	8011024 <alt_putchar>
                        continue;
 8010edc:	00004206 	br	8010fe8 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 8010ee0:	00800704 	movi	r2,28
 8010ee4:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 8010ee8:	00000306 	br	8010ef8 <alt_printf+0x100>
                        digit_shift -= 4;
 8010eec:	e0bff917 	ldw	r2,-28(fp)
 8010ef0:	10bfff04 	addi	r2,r2,-4
 8010ef4:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 8010ef8:	00c003c4 	movi	r3,15
 8010efc:	e0bff917 	ldw	r2,-28(fp)
 8010f00:	1884983a 	sll	r2,r3,r2
 8010f04:	1007883a 	mov	r3,r2
 8010f08:	e0bffb17 	ldw	r2,-20(fp)
 8010f0c:	1884703a 	and	r2,r3,r2
 8010f10:	103ff626 	beq	r2,zero,8010eec <__alt_data_end+0xfc010eec>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8010f14:	00001906 	br	8010f7c <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 8010f18:	00c003c4 	movi	r3,15
 8010f1c:	e0bff917 	ldw	r2,-28(fp)
 8010f20:	1884983a 	sll	r2,r3,r2
 8010f24:	1007883a 	mov	r3,r2
 8010f28:	e0bffb17 	ldw	r2,-20(fp)
 8010f2c:	1886703a 	and	r3,r3,r2
 8010f30:	e0bff917 	ldw	r2,-28(fp)
 8010f34:	1884d83a 	srl	r2,r3,r2
 8010f38:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 8010f3c:	e0bffc17 	ldw	r2,-16(fp)
 8010f40:	108002a8 	cmpgeui	r2,r2,10
 8010f44:	1000041e 	bne	r2,zero,8010f58 <alt_printf+0x160>
                            c = '0' + digit;
 8010f48:	e0bffc17 	ldw	r2,-16(fp)
 8010f4c:	10800c04 	addi	r2,r2,48
 8010f50:	e0bff805 	stb	r2,-32(fp)
 8010f54:	00000306 	br	8010f64 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 8010f58:	e0bffc17 	ldw	r2,-16(fp)
 8010f5c:	108015c4 	addi	r2,r2,87
 8010f60:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 8010f64:	e0bff807 	ldb	r2,-32(fp)
 8010f68:	1009883a 	mov	r4,r2
 8010f6c:	80110240 	call	8011024 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8010f70:	e0bff917 	ldw	r2,-28(fp)
 8010f74:	10bfff04 	addi	r2,r2,-4
 8010f78:	e0bff915 	stw	r2,-28(fp)
 8010f7c:	e0bff917 	ldw	r2,-28(fp)
 8010f80:	103fe50e 	bge	r2,zero,8010f18 <__alt_data_end+0xfc010f18>
 8010f84:	00001806 	br	8010fe8 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 8010f88:	e0bff807 	ldb	r2,-32(fp)
 8010f8c:	10801cd8 	cmpnei	r2,r2,115
 8010f90:	1000151e 	bne	r2,zero,8010fe8 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 8010f94:	e0bffe17 	ldw	r2,-8(fp)
 8010f98:	10c00104 	addi	r3,r2,4
 8010f9c:	e0fffe15 	stw	r3,-8(fp)
 8010fa0:	10800017 	ldw	r2,0(r2)
 8010fa4:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 8010fa8:	00000906 	br	8010fd0 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 8010fac:	e0bffa17 	ldw	r2,-24(fp)
 8010fb0:	10c00044 	addi	r3,r2,1
 8010fb4:	e0fffa15 	stw	r3,-24(fp)
 8010fb8:	10800003 	ldbu	r2,0(r2)
 8010fbc:	10803fcc 	andi	r2,r2,255
 8010fc0:	1080201c 	xori	r2,r2,128
 8010fc4:	10bfe004 	addi	r2,r2,-128
 8010fc8:	1009883a 	mov	r4,r2
 8010fcc:	80110240 	call	8011024 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 8010fd0:	e0bffa17 	ldw	r2,-24(fp)
 8010fd4:	10800003 	ldbu	r2,0(r2)
 8010fd8:	10803fcc 	andi	r2,r2,255
 8010fdc:	1080201c 	xori	r2,r2,128
 8010fe0:	10bfe004 	addi	r2,r2,-128
 8010fe4:	103ff11e 	bne	r2,zero,8010fac <__alt_data_end+0xfc010fac>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 8010fe8:	e0bff717 	ldw	r2,-36(fp)
 8010fec:	10c00044 	addi	r3,r2,1
 8010ff0:	e0fff715 	stw	r3,-36(fp)
 8010ff4:	10800003 	ldbu	r2,0(r2)
 8010ff8:	e0bff805 	stb	r2,-32(fp)
 8010ffc:	e0bff807 	ldb	r2,-32(fp)
 8011000:	103f8a1e 	bne	r2,zero,8010e2c <__alt_data_end+0xfc010e2c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 8011004:	00000106 	br	801100c <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 8011008:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 801100c:	0001883a 	nop
 8011010:	e037883a 	mov	sp,fp
 8011014:	dfc00117 	ldw	ra,4(sp)
 8011018:	df000017 	ldw	fp,0(sp)
 801101c:	dec00504 	addi	sp,sp,20
 8011020:	f800283a 	ret

08011024 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 8011024:	defffd04 	addi	sp,sp,-12
 8011028:	dfc00215 	stw	ra,8(sp)
 801102c:	df000115 	stw	fp,4(sp)
 8011030:	df000104 	addi	fp,sp,4
 8011034:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 8011038:	d0a00117 	ldw	r2,-32764(gp)
 801103c:	10800217 	ldw	r2,8(r2)
 8011040:	100b883a 	mov	r5,r2
 8011044:	e13fff17 	ldw	r4,-4(fp)
 8011048:	80112880 	call	8011288 <putc>
#endif
#endif
}
 801104c:	e037883a 	mov	sp,fp
 8011050:	dfc00117 	ldw	ra,4(sp)
 8011054:	df000017 	ldw	fp,0(sp)
 8011058:	dec00204 	addi	sp,sp,8
 801105c:	f800283a 	ret

08011060 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8011060:	deffff04 	addi	sp,sp,-4
 8011064:	df000015 	stw	fp,0(sp)
 8011068:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 801106c:	000170fa 	wrctl	ienable,zero
}
 8011070:	0001883a 	nop
 8011074:	e037883a 	mov	sp,fp
 8011078:	df000017 	ldw	fp,0(sp)
 801107c:	dec00104 	addi	sp,sp,4
 8011080:	f800283a 	ret

08011084 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8011084:	defffe04 	addi	sp,sp,-8
 8011088:	df000115 	stw	fp,4(sp)
 801108c:	df000104 	addi	fp,sp,4
 8011090:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8011094:	e0bfff17 	ldw	r2,-4(fp)
 8011098:	10bffe84 	addi	r2,r2,-6
 801109c:	10c00428 	cmpgeui	r3,r2,16
 80110a0:	18001a1e 	bne	r3,zero,801110c <alt_exception_cause_generated_bad_addr+0x88>
 80110a4:	100690ba 	slli	r3,r2,2
 80110a8:	00820074 	movhi	r2,2049
 80110ac:	10842f04 	addi	r2,r2,4284
 80110b0:	1885883a 	add	r2,r3,r2
 80110b4:	10800017 	ldw	r2,0(r2)
 80110b8:	1000683a 	jmp	r2
 80110bc:	080110fc 	xorhi	zero,at,1091
 80110c0:	080110fc 	xorhi	zero,at,1091
 80110c4:	0801110c 	andi	zero,at,1092
 80110c8:	0801110c 	andi	zero,at,1092
 80110cc:	0801110c 	andi	zero,at,1092
 80110d0:	080110fc 	xorhi	zero,at,1091
 80110d4:	08011104 	addi	zero,at,1092
 80110d8:	0801110c 	andi	zero,at,1092
 80110dc:	080110fc 	xorhi	zero,at,1091
 80110e0:	080110fc 	xorhi	zero,at,1091
 80110e4:	0801110c 	andi	zero,at,1092
 80110e8:	080110fc 	xorhi	zero,at,1091
 80110ec:	08011104 	addi	zero,at,1092
 80110f0:	0801110c 	andi	zero,at,1092
 80110f4:	0801110c 	andi	zero,at,1092
 80110f8:	080110fc 	xorhi	zero,at,1091
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 80110fc:	00800044 	movi	r2,1
 8011100:	00000306 	br	8011110 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8011104:	0005883a 	mov	r2,zero
 8011108:	00000106 	br	8011110 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 801110c:	0005883a 	mov	r2,zero
  }
}
 8011110:	e037883a 	mov	sp,fp
 8011114:	df000017 	ldw	fp,0(sp)
 8011118:	dec00104 	addi	sp,sp,4
 801111c:	f800283a 	ret

08011120 <atexit>:
 8011120:	200b883a 	mov	r5,r4
 8011124:	000f883a 	mov	r7,zero
 8011128:	000d883a 	mov	r6,zero
 801112c:	0009883a 	mov	r4,zero
 8011130:	80113501 	jmpi	8011350 <__register_exitproc>

08011134 <exit>:
 8011134:	defffe04 	addi	sp,sp,-8
 8011138:	000b883a 	mov	r5,zero
 801113c:	dc000015 	stw	r16,0(sp)
 8011140:	dfc00115 	stw	ra,4(sp)
 8011144:	2021883a 	mov	r16,r4
 8011148:	80114680 	call	8011468 <__call_exitprocs>
 801114c:	00820074 	movhi	r2,2049
 8011150:	10896204 	addi	r2,r2,9608
 8011154:	11000017 	ldw	r4,0(r2)
 8011158:	20800f17 	ldw	r2,60(r4)
 801115c:	10000126 	beq	r2,zero,8011164 <exit+0x30>
 8011160:	103ee83a 	callr	r2
 8011164:	8009883a 	mov	r4,r16
 8011168:	80115e80 	call	80115e8 <_exit>

0801116c <memcmp>:
 801116c:	01c000c4 	movi	r7,3
 8011170:	3980192e 	bgeu	r7,r6,80111d8 <memcmp+0x6c>
 8011174:	2144b03a 	or	r2,r4,r5
 8011178:	11c4703a 	and	r2,r2,r7
 801117c:	10000f26 	beq	r2,zero,80111bc <memcmp+0x50>
 8011180:	20800003 	ldbu	r2,0(r4)
 8011184:	28c00003 	ldbu	r3,0(r5)
 8011188:	10c0151e 	bne	r2,r3,80111e0 <memcmp+0x74>
 801118c:	31bfff84 	addi	r6,r6,-2
 8011190:	01ffffc4 	movi	r7,-1
 8011194:	00000406 	br	80111a8 <memcmp+0x3c>
 8011198:	20800003 	ldbu	r2,0(r4)
 801119c:	28c00003 	ldbu	r3,0(r5)
 80111a0:	31bfffc4 	addi	r6,r6,-1
 80111a4:	10c00e1e 	bne	r2,r3,80111e0 <memcmp+0x74>
 80111a8:	21000044 	addi	r4,r4,1
 80111ac:	29400044 	addi	r5,r5,1
 80111b0:	31fff91e 	bne	r6,r7,8011198 <__alt_data_end+0xfc011198>
 80111b4:	0005883a 	mov	r2,zero
 80111b8:	f800283a 	ret
 80111bc:	20c00017 	ldw	r3,0(r4)
 80111c0:	28800017 	ldw	r2,0(r5)
 80111c4:	18bfee1e 	bne	r3,r2,8011180 <__alt_data_end+0xfc011180>
 80111c8:	31bfff04 	addi	r6,r6,-4
 80111cc:	21000104 	addi	r4,r4,4
 80111d0:	29400104 	addi	r5,r5,4
 80111d4:	39bff936 	bltu	r7,r6,80111bc <__alt_data_end+0xfc0111bc>
 80111d8:	303fe91e 	bne	r6,zero,8011180 <__alt_data_end+0xfc011180>
 80111dc:	003ff506 	br	80111b4 <__alt_data_end+0xfc0111b4>
 80111e0:	10c5c83a 	sub	r2,r2,r3
 80111e4:	f800283a 	ret

080111e8 <_putc_r>:
 80111e8:	defffc04 	addi	sp,sp,-16
 80111ec:	dc000215 	stw	r16,8(sp)
 80111f0:	dfc00315 	stw	ra,12(sp)
 80111f4:	2021883a 	mov	r16,r4
 80111f8:	20000226 	beq	r4,zero,8011204 <_putc_r+0x1c>
 80111fc:	20800e17 	ldw	r2,56(r4)
 8011200:	10001b26 	beq	r2,zero,8011270 <_putc_r+0x88>
 8011204:	30800217 	ldw	r2,8(r6)
 8011208:	10bfffc4 	addi	r2,r2,-1
 801120c:	30800215 	stw	r2,8(r6)
 8011210:	10000a16 	blt	r2,zero,801123c <_putc_r+0x54>
 8011214:	30800017 	ldw	r2,0(r6)
 8011218:	11400005 	stb	r5,0(r2)
 801121c:	30800017 	ldw	r2,0(r6)
 8011220:	10c00044 	addi	r3,r2,1
 8011224:	30c00015 	stw	r3,0(r6)
 8011228:	10800003 	ldbu	r2,0(r2)
 801122c:	dfc00317 	ldw	ra,12(sp)
 8011230:	dc000217 	ldw	r16,8(sp)
 8011234:	dec00404 	addi	sp,sp,16
 8011238:	f800283a 	ret
 801123c:	30c00617 	ldw	r3,24(r6)
 8011240:	10c00616 	blt	r2,r3,801125c <_putc_r+0x74>
 8011244:	30800017 	ldw	r2,0(r6)
 8011248:	00c00284 	movi	r3,10
 801124c:	11400005 	stb	r5,0(r2)
 8011250:	30800017 	ldw	r2,0(r6)
 8011254:	11400003 	ldbu	r5,0(r2)
 8011258:	28fff11e 	bne	r5,r3,8011220 <__alt_data_end+0xfc011220>
 801125c:	8009883a 	mov	r4,r16
 8011260:	dfc00317 	ldw	ra,12(sp)
 8011264:	dc000217 	ldw	r16,8(sp)
 8011268:	dec00404 	addi	sp,sp,16
 801126c:	800a89c1 	jmpi	800a89c <__swbuf_r>
 8011270:	d9400015 	stw	r5,0(sp)
 8011274:	d9800115 	stw	r6,4(sp)
 8011278:	80058740 	call	8005874 <__sinit>
 801127c:	d9800117 	ldw	r6,4(sp)
 8011280:	d9400017 	ldw	r5,0(sp)
 8011284:	003fdf06 	br	8011204 <__alt_data_end+0xfc011204>

08011288 <putc>:
 8011288:	00820074 	movhi	r2,2049
 801128c:	defffc04 	addi	sp,sp,-16
 8011290:	10896304 	addi	r2,r2,9612
 8011294:	dc000115 	stw	r16,4(sp)
 8011298:	14000017 	ldw	r16,0(r2)
 801129c:	dc400215 	stw	r17,8(sp)
 80112a0:	dfc00315 	stw	ra,12(sp)
 80112a4:	2023883a 	mov	r17,r4
 80112a8:	80000226 	beq	r16,zero,80112b4 <putc+0x2c>
 80112ac:	80800e17 	ldw	r2,56(r16)
 80112b0:	10001a26 	beq	r2,zero,801131c <putc+0x94>
 80112b4:	28800217 	ldw	r2,8(r5)
 80112b8:	10bfffc4 	addi	r2,r2,-1
 80112bc:	28800215 	stw	r2,8(r5)
 80112c0:	10000b16 	blt	r2,zero,80112f0 <putc+0x68>
 80112c4:	28800017 	ldw	r2,0(r5)
 80112c8:	14400005 	stb	r17,0(r2)
 80112cc:	28800017 	ldw	r2,0(r5)
 80112d0:	10c00044 	addi	r3,r2,1
 80112d4:	28c00015 	stw	r3,0(r5)
 80112d8:	10800003 	ldbu	r2,0(r2)
 80112dc:	dfc00317 	ldw	ra,12(sp)
 80112e0:	dc400217 	ldw	r17,8(sp)
 80112e4:	dc000117 	ldw	r16,4(sp)
 80112e8:	dec00404 	addi	sp,sp,16
 80112ec:	f800283a 	ret
 80112f0:	28c00617 	ldw	r3,24(r5)
 80112f4:	10c00e16 	blt	r2,r3,8011330 <putc+0xa8>
 80112f8:	28800017 	ldw	r2,0(r5)
 80112fc:	01000284 	movi	r4,10
 8011300:	14400005 	stb	r17,0(r2)
 8011304:	28800017 	ldw	r2,0(r5)
 8011308:	10c00003 	ldbu	r3,0(r2)
 801130c:	193ff01e 	bne	r3,r4,80112d0 <__alt_data_end+0xfc0112d0>
 8011310:	280d883a 	mov	r6,r5
 8011314:	180b883a 	mov	r5,r3
 8011318:	00000706 	br	8011338 <putc+0xb0>
 801131c:	8009883a 	mov	r4,r16
 8011320:	d9400015 	stw	r5,0(sp)
 8011324:	80058740 	call	8005874 <__sinit>
 8011328:	d9400017 	ldw	r5,0(sp)
 801132c:	003fe106 	br	80112b4 <__alt_data_end+0xfc0112b4>
 8011330:	280d883a 	mov	r6,r5
 8011334:	880b883a 	mov	r5,r17
 8011338:	8009883a 	mov	r4,r16
 801133c:	dfc00317 	ldw	ra,12(sp)
 8011340:	dc400217 	ldw	r17,8(sp)
 8011344:	dc000117 	ldw	r16,4(sp)
 8011348:	dec00404 	addi	sp,sp,16
 801134c:	800a89c1 	jmpi	800a89c <__swbuf_r>

08011350 <__register_exitproc>:
 8011350:	defffa04 	addi	sp,sp,-24
 8011354:	dc000315 	stw	r16,12(sp)
 8011358:	04020074 	movhi	r16,2049
 801135c:	84096204 	addi	r16,r16,9608
 8011360:	80c00017 	ldw	r3,0(r16)
 8011364:	dc400415 	stw	r17,16(sp)
 8011368:	dfc00515 	stw	ra,20(sp)
 801136c:	18805217 	ldw	r2,328(r3)
 8011370:	2023883a 	mov	r17,r4
 8011374:	10003726 	beq	r2,zero,8011454 <__register_exitproc+0x104>
 8011378:	10c00117 	ldw	r3,4(r2)
 801137c:	010007c4 	movi	r4,31
 8011380:	20c00e16 	blt	r4,r3,80113bc <__register_exitproc+0x6c>
 8011384:	1a000044 	addi	r8,r3,1
 8011388:	8800221e 	bne	r17,zero,8011414 <__register_exitproc+0xc4>
 801138c:	18c00084 	addi	r3,r3,2
 8011390:	18c7883a 	add	r3,r3,r3
 8011394:	18c7883a 	add	r3,r3,r3
 8011398:	12000115 	stw	r8,4(r2)
 801139c:	10c7883a 	add	r3,r2,r3
 80113a0:	19400015 	stw	r5,0(r3)
 80113a4:	0005883a 	mov	r2,zero
 80113a8:	dfc00517 	ldw	ra,20(sp)
 80113ac:	dc400417 	ldw	r17,16(sp)
 80113b0:	dc000317 	ldw	r16,12(sp)
 80113b4:	dec00604 	addi	sp,sp,24
 80113b8:	f800283a 	ret
 80113bc:	00800034 	movhi	r2,0
 80113c0:	10800004 	addi	r2,r2,0
 80113c4:	10002626 	beq	r2,zero,8011460 <__register_exitproc+0x110>
 80113c8:	01006404 	movi	r4,400
 80113cc:	d9400015 	stw	r5,0(sp)
 80113d0:	d9800115 	stw	r6,4(sp)
 80113d4:	d9c00215 	stw	r7,8(sp)
 80113d8:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 80113dc:	d9400017 	ldw	r5,0(sp)
 80113e0:	d9800117 	ldw	r6,4(sp)
 80113e4:	d9c00217 	ldw	r7,8(sp)
 80113e8:	10001d26 	beq	r2,zero,8011460 <__register_exitproc+0x110>
 80113ec:	81000017 	ldw	r4,0(r16)
 80113f0:	10000115 	stw	zero,4(r2)
 80113f4:	02000044 	movi	r8,1
 80113f8:	22405217 	ldw	r9,328(r4)
 80113fc:	0007883a 	mov	r3,zero
 8011400:	12400015 	stw	r9,0(r2)
 8011404:	20805215 	stw	r2,328(r4)
 8011408:	10006215 	stw	zero,392(r2)
 801140c:	10006315 	stw	zero,396(r2)
 8011410:	883fde26 	beq	r17,zero,801138c <__alt_data_end+0xfc01138c>
 8011414:	18c9883a 	add	r4,r3,r3
 8011418:	2109883a 	add	r4,r4,r4
 801141c:	1109883a 	add	r4,r2,r4
 8011420:	21802215 	stw	r6,136(r4)
 8011424:	01800044 	movi	r6,1
 8011428:	12406217 	ldw	r9,392(r2)
 801142c:	30cc983a 	sll	r6,r6,r3
 8011430:	4992b03a 	or	r9,r9,r6
 8011434:	12406215 	stw	r9,392(r2)
 8011438:	21c04215 	stw	r7,264(r4)
 801143c:	01000084 	movi	r4,2
 8011440:	893fd21e 	bne	r17,r4,801138c <__alt_data_end+0xfc01138c>
 8011444:	11006317 	ldw	r4,396(r2)
 8011448:	218cb03a 	or	r6,r4,r6
 801144c:	11806315 	stw	r6,396(r2)
 8011450:	003fce06 	br	801138c <__alt_data_end+0xfc01138c>
 8011454:	18805304 	addi	r2,r3,332
 8011458:	18805215 	stw	r2,328(r3)
 801145c:	003fc606 	br	8011378 <__alt_data_end+0xfc011378>
 8011460:	00bfffc4 	movi	r2,-1
 8011464:	003fd006 	br	80113a8 <__alt_data_end+0xfc0113a8>

08011468 <__call_exitprocs>:
 8011468:	defff504 	addi	sp,sp,-44
 801146c:	df000915 	stw	fp,36(sp)
 8011470:	dd400615 	stw	r21,24(sp)
 8011474:	dc800315 	stw	r18,12(sp)
 8011478:	dfc00a15 	stw	ra,40(sp)
 801147c:	ddc00815 	stw	r23,32(sp)
 8011480:	dd800715 	stw	r22,28(sp)
 8011484:	dd000515 	stw	r20,20(sp)
 8011488:	dcc00415 	stw	r19,16(sp)
 801148c:	dc400215 	stw	r17,8(sp)
 8011490:	dc000115 	stw	r16,4(sp)
 8011494:	d9000015 	stw	r4,0(sp)
 8011498:	2839883a 	mov	fp,r5
 801149c:	04800044 	movi	r18,1
 80114a0:	057fffc4 	movi	r21,-1
 80114a4:	00820074 	movhi	r2,2049
 80114a8:	10896204 	addi	r2,r2,9608
 80114ac:	12000017 	ldw	r8,0(r2)
 80114b0:	45005217 	ldw	r20,328(r8)
 80114b4:	44c05204 	addi	r19,r8,328
 80114b8:	a0001c26 	beq	r20,zero,801152c <__call_exitprocs+0xc4>
 80114bc:	a0800117 	ldw	r2,4(r20)
 80114c0:	15ffffc4 	addi	r23,r2,-1
 80114c4:	b8000d16 	blt	r23,zero,80114fc <__call_exitprocs+0x94>
 80114c8:	14000044 	addi	r16,r2,1
 80114cc:	8421883a 	add	r16,r16,r16
 80114d0:	8421883a 	add	r16,r16,r16
 80114d4:	84402004 	addi	r17,r16,128
 80114d8:	a463883a 	add	r17,r20,r17
 80114dc:	a421883a 	add	r16,r20,r16
 80114e0:	e0001e26 	beq	fp,zero,801155c <__call_exitprocs+0xf4>
 80114e4:	80804017 	ldw	r2,256(r16)
 80114e8:	e0801c26 	beq	fp,r2,801155c <__call_exitprocs+0xf4>
 80114ec:	bdffffc4 	addi	r23,r23,-1
 80114f0:	843fff04 	addi	r16,r16,-4
 80114f4:	8c7fff04 	addi	r17,r17,-4
 80114f8:	bd7ff91e 	bne	r23,r21,80114e0 <__alt_data_end+0xfc0114e0>
 80114fc:	00800034 	movhi	r2,0
 8011500:	10800004 	addi	r2,r2,0
 8011504:	10000926 	beq	r2,zero,801152c <__call_exitprocs+0xc4>
 8011508:	a0800117 	ldw	r2,4(r20)
 801150c:	1000301e 	bne	r2,zero,80115d0 <__call_exitprocs+0x168>
 8011510:	a0800017 	ldw	r2,0(r20)
 8011514:	10003226 	beq	r2,zero,80115e0 <__call_exitprocs+0x178>
 8011518:	a009883a 	mov	r4,r20
 801151c:	98800015 	stw	r2,0(r19)
 8011520:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8011524:	9d000017 	ldw	r20,0(r19)
 8011528:	a03fe41e 	bne	r20,zero,80114bc <__alt_data_end+0xfc0114bc>
 801152c:	dfc00a17 	ldw	ra,40(sp)
 8011530:	df000917 	ldw	fp,36(sp)
 8011534:	ddc00817 	ldw	r23,32(sp)
 8011538:	dd800717 	ldw	r22,28(sp)
 801153c:	dd400617 	ldw	r21,24(sp)
 8011540:	dd000517 	ldw	r20,20(sp)
 8011544:	dcc00417 	ldw	r19,16(sp)
 8011548:	dc800317 	ldw	r18,12(sp)
 801154c:	dc400217 	ldw	r17,8(sp)
 8011550:	dc000117 	ldw	r16,4(sp)
 8011554:	dec00b04 	addi	sp,sp,44
 8011558:	f800283a 	ret
 801155c:	a0800117 	ldw	r2,4(r20)
 8011560:	80c00017 	ldw	r3,0(r16)
 8011564:	10bfffc4 	addi	r2,r2,-1
 8011568:	15c01426 	beq	r2,r23,80115bc <__call_exitprocs+0x154>
 801156c:	80000015 	stw	zero,0(r16)
 8011570:	183fde26 	beq	r3,zero,80114ec <__alt_data_end+0xfc0114ec>
 8011574:	95c8983a 	sll	r4,r18,r23
 8011578:	a0806217 	ldw	r2,392(r20)
 801157c:	a5800117 	ldw	r22,4(r20)
 8011580:	2084703a 	and	r2,r4,r2
 8011584:	10000b26 	beq	r2,zero,80115b4 <__call_exitprocs+0x14c>
 8011588:	a0806317 	ldw	r2,396(r20)
 801158c:	2088703a 	and	r4,r4,r2
 8011590:	20000c1e 	bne	r4,zero,80115c4 <__call_exitprocs+0x15c>
 8011594:	89400017 	ldw	r5,0(r17)
 8011598:	d9000017 	ldw	r4,0(sp)
 801159c:	183ee83a 	callr	r3
 80115a0:	a0800117 	ldw	r2,4(r20)
 80115a4:	15bfbf1e 	bne	r2,r22,80114a4 <__alt_data_end+0xfc0114a4>
 80115a8:	98800017 	ldw	r2,0(r19)
 80115ac:	153fcf26 	beq	r2,r20,80114ec <__alt_data_end+0xfc0114ec>
 80115b0:	003fbc06 	br	80114a4 <__alt_data_end+0xfc0114a4>
 80115b4:	183ee83a 	callr	r3
 80115b8:	003ff906 	br	80115a0 <__alt_data_end+0xfc0115a0>
 80115bc:	a5c00115 	stw	r23,4(r20)
 80115c0:	003feb06 	br	8011570 <__alt_data_end+0xfc011570>
 80115c4:	89000017 	ldw	r4,0(r17)
 80115c8:	183ee83a 	callr	r3
 80115cc:	003ff406 	br	80115a0 <__alt_data_end+0xfc0115a0>
 80115d0:	a0800017 	ldw	r2,0(r20)
 80115d4:	a027883a 	mov	r19,r20
 80115d8:	1029883a 	mov	r20,r2
 80115dc:	003fb606 	br	80114b8 <__alt_data_end+0xfc0114b8>
 80115e0:	0005883a 	mov	r2,zero
 80115e4:	003ffb06 	br	80115d4 <__alt_data_end+0xfc0115d4>

080115e8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80115e8:	defffd04 	addi	sp,sp,-12
 80115ec:	df000215 	stw	fp,8(sp)
 80115f0:	df000204 	addi	fp,sp,8
 80115f4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 80115f8:	0001883a 	nop
 80115fc:	e0bfff17 	ldw	r2,-4(fp)
 8011600:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8011604:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8011608:	10000226 	beq	r2,zero,8011614 <_exit+0x2c>
    ALT_SIM_FAIL();
 801160c:	002af070 	cmpltui	zero,zero,43969
 8011610:	00000106 	br	8011618 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8011614:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8011618:	003fff06 	br	8011618 <__alt_data_end+0xfc011618>
